/*! For license information please see main.618072d41b800c875e23.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatefloema("main",{"./app/components/Canvas/home/index.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>h});var r=s("./node_modules/ogl/src/core/Transform.js"),i=s("./node_modules/ogl/src/extras/Plane.js"),l=s("./node_modules/gsap/index.js"),o=s("./node_modules/lodash/map.js"),n=s.n(o),a=s("./app/components/Canvas/home/Media.js");const h=class{constructor({gl:e,scene:t,sizes:s}){this.gl=e,this.sizes=s,this.group=new r.Transform,this.mediasElements=document.querySelectorAll(".home__gallery__media__image"),this.createGeometry(),this.createGallery(),this.group.setParent(t),this.x={current:0,target:0,lerp:.1},this.y={current:0,target:0,lerp:.1},this.scrollCurrent={x:0,y:0},this.scroll={x:0,y:0}}createGeometry(){this.geometry=new i.Plane(this.gl)}createGallery(){this.medias=n()(this.mediasElements,((e,t)=>new a.default({element:e,geometry:this.geometry,gl:this.gl,index:t,scene:this.group,sizes:this.sizes})))}onResize(e){n()(this.medias,(t=>t.onResize(e)))}onTouchDown({x:e,y:t}){this.scrollCurrent.x=this.scroll.x,this.scrollCurrent.y=this.scroll.y}onTouchMove({x:e,y:t}){const s=e.start-e.end,r=t.start-t.end;this.x.target=this.scrollCurrent.x+s,this.y.target=this.scrollCurrent.y+r,console.log(this.x.target,this.y.target)}onTouchUp({x:e,y:t}){}update(){this.x.current=l.default.utils.interpolate(this.x.current,this.x.target,this.x.lerp),this.y.current=l.default.utils.interpolate(this.y.current,this.y.target,this.y.lerp),this.scroll.x=this.x.current,this.scroll.y=this.y.current,n()(this.medias,(e=>{e.update(this.scroll)}))}}}},(function(e){e.h=()=>"1a5e61160f298a0bbe33"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi42MTgwNzJkNDFiODAwYzg3NWUyMy5ob3QtdXBkYXRlLmpzIiwibWFwcGluZ3MiOiI7aVdBUUEsY0FDSUEsV0FBQUEsRUFBWSxHQUFFQyxFQUFFLE1BQUVDLEVBQUssTUFBRUMsSUFDckJDLEtBQUtILEdBQUtBLEVBQ1ZHLEtBQUtELE1BQVFBLEVBQ2JDLEtBQUtDLE1BQVEsSUFBSUMsRUFBQUEsVUFDakJGLEtBQUtHLGVBQWlCQyxTQUFTQyxpQkFDM0IsZ0NBR0pMLEtBQUtNLGlCQUNMTixLQUFLTyxnQkFHTFAsS0FBS0MsTUFBTU8sVUFBVVYsR0FFckJFLEtBQUtTLEVBQUksQ0FDTEMsUUFBUSxFQUNSQyxPQUFPLEVBQ1BDLEtBQUssSUFHVFosS0FBS2EsRUFBSSxDQUNMSCxRQUFRLEVBQ1JDLE9BQU8sRUFDUEMsS0FBSyxJQUdUWixLQUFLYyxjQUFjLENBQ2ZMLEVBQUUsRUFDRkksRUFBRSxHQUdOYixLQUFLZSxPQUFTLENBQ1ZOLEVBQUUsRUFDRkksRUFBRSxFQUlWLENBRUFQLGNBQUFBLEdBQ0lOLEtBQUtnQixTQUFXLElBQUlDLEVBQUFBLE1BQU1qQixLQUFLSCxHQUNuQyxDQUVBVSxhQUFBQSxHQUVJUCxLQUFLa0IsT0FBU0MsSUFBSW5CLEtBQUtHLGdCQUFnQixDQUFDaUIsRUFBU0MsSUFDdEMsSUFBSUMsRUFBQUEsUUFBTSxDQUNiRixVQUNBSixTQUFVaEIsS0FBS2dCLFNBQ2ZuQixHQUFJRyxLQUFLSCxHQUNUd0IsUUFDQXZCLE1BQU9FLEtBQUtDLE1BQ1pGLE1BQU9DLEtBQUtELFNBR3hCLENBR0F3QixRQUFBQSxDQUFTQyxHQUNMTCxJQUFJbkIsS0FBS2tCLFFBQVFPLEdBQVNBLEVBQU1GLFNBQVNDLElBQzdDLENBRUFFLFdBQUFBLEVBQVksRUFBRWpCLEVBQUMsRUFBRUksSUFDYmIsS0FBS2MsY0FBY0wsRUFBR1QsS0FBS2UsT0FBT04sRUFDbENULEtBQUtjLGNBQWNELEVBQUdiLEtBQUtlLE9BQU9GLENBQ3RDLENBRUFjLFdBQUFBLEVBQVksRUFBRWxCLEVBQUMsRUFBRUksSUFDYixNQUFNZSxFQUFXbkIsRUFBRW9CLE1BQVFwQixFQUFFcUIsSUFDdkJDLEVBQVdsQixFQUFFZ0IsTUFBUWhCLEVBQUVpQixJQUU3QjlCLEtBQUtTLEVBQUVFLE9BQVFYLEtBQUtjLGNBQWNMLEVBQUltQixFQUN0QzVCLEtBQUthLEVBQUVGLE9BQVFYLEtBQUtjLGNBQWNELEVBQUlrQixFQUV0Q0MsUUFBUUMsSUFBS2pDLEtBQUtTLEVBQUVFLE9BQVFYLEtBQUthLEVBQUVGLE9BRXZDLENBRUF1QixTQUFBQSxFQUFVLEVBQUV6QixFQUFDLEVBQUVJLElBRWYsQ0FHQXNCLE1BQUFBLEdBQ0luQyxLQUFLUyxFQUFFQyxRQUFTMEIsRUFBQUEsUUFBS0MsTUFBTUMsWUFBWXRDLEtBQUtTLEVBQUVDLFFBQVNWLEtBQUtTLEVBQUVFLE9BQVFYLEtBQUtTLEVBQUVHLE1BQzdFWixLQUFLYSxFQUFFSCxRQUFTMEIsRUFBQUEsUUFBS0MsTUFBTUMsWUFBWXRDLEtBQUthLEVBQUVILFFBQVNWLEtBQUthLEVBQUVGLE9BQVFYLEtBQUthLEVBQUVELE1BRTdFWixLQUFLZSxPQUFPTixFQUFJVCxLQUFLUyxFQUFFQyxRQUN2QlYsS0FBS2UsT0FBT0YsRUFBSWIsS0FBS2EsRUFBRUgsUUFFdkJTLElBQUluQixLQUFLa0IsUUFBUU8sSUFDYkEsRUFBTVUsT0FBT25DLEtBQUtlLE9BQU8sR0FHakMsa0JDdkdKd0IsRUFBb0JDLEVBQUksSUFBTSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zsb2VtYS8uL2FwcC9jb21wb25lbnRzL0NhbnZhcy9ob21lL2luZGV4LmpzIiwid2VicGFjazovL2Zsb2VtYS93ZWJwYWNrL3J1bnRpbWUvZ2V0RnVsbEhhc2giXSwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBQbGFuZSwgVHJhbnNmb3JtIH0gZnJvbSAnb2dsJztcbmltcG9ydCBHU0FQIGZyb20gJ2dzYXAnXG5cbmltcG9ydCBtYXAgZnJvbSAnbG9kYXNoL21hcCdcblxuaW1wb3J0IE1lZGlhIGZyb20gJy4vTWVkaWEnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcbiAgICBjb25zdHJ1Y3Rvcih7IGdsLCBzY2VuZSwgc2l6ZXMgfSkge1xuICAgICAgICB0aGlzLmdsID0gZ2w7XG4gICAgICAgIHRoaXMuc2l6ZXMgPSBzaXplcztcbiAgICAgICAgdGhpcy5ncm91cCA9IG5ldyBUcmFuc2Zvcm0oKTtcbiAgICAgICAgdGhpcy5tZWRpYXNFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgICAgICAgICAnLmhvbWVfX2dhbGxlcnlfX21lZGlhX19pbWFnZSdcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmNyZWF0ZUdlb21ldHJ5KCk7XG4gICAgICAgIHRoaXMuY3JlYXRlR2FsbGVyeSgpO1xuXG5cbiAgICAgICAgdGhpcy5ncm91cC5zZXRQYXJlbnQoc2NlbmUpO1xuXG4gICAgICAgIHRoaXMueCA9IHtcbiAgICAgICAgICAgIGN1cnJlbnQ6MCxcbiAgICAgICAgICAgIHRhcmdldDowLFxuICAgICAgICAgICAgbGVycDowLjFcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMueSA9IHtcbiAgICAgICAgICAgIGN1cnJlbnQ6MCxcbiAgICAgICAgICAgIHRhcmdldDowLFxuICAgICAgICAgICAgbGVycDowLjFcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2Nyb2xsQ3VycmVudD17XG4gICAgICAgICAgICB4OjAsXG4gICAgICAgICAgICB5OjBcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2Nyb2xsID0ge1xuICAgICAgICAgICAgeDowLFxuICAgICAgICAgICAgeTowXG4gICAgICAgIH1cbiAgICAgICAgLy8g5aeQ77yMY29uc3RydWN0b3LmoLzlvI/mmK8oe30pe33jgILkuI3opoHlv5jorrDkuoZcblxuICAgIH1cblxuICAgIGNyZWF0ZUdlb21ldHJ5KCkge1xuICAgICAgICB0aGlzLmdlb21ldHJ5ID0gbmV3IFBsYW5lKHRoaXMuZ2wpXG4gICAgfVxuXG4gICAgY3JlYXRlR2FsbGVyeSgpIHtcbiAgICAgICAgLy8g5Lyg5YiwTWVkaWHph4zpnaJcbiAgICAgICAgdGhpcy5tZWRpYXMgPSBtYXAodGhpcy5tZWRpYXNFbGVtZW50cywgKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IE1lZGlhKHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LFxuICAgICAgICAgICAgICAgIGdlb21ldHJ5OiB0aGlzLmdlb21ldHJ5LFxuICAgICAgICAgICAgICAgIGdsOiB0aGlzLmdsLFxuICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICAgIHNjZW5lOiB0aGlzLmdyb3VwLFxuICAgICAgICAgICAgICAgIHNpemVzOiB0aGlzLnNpemVzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvLyBFdmVudHNcbiAgICBvblJlc2l6ZShldmVudCkge1xuICAgICAgICBtYXAodGhpcy5tZWRpYXMsIG1lZGlhID0+IG1lZGlhLm9uUmVzaXplKGV2ZW50KSlcbiAgICB9XG5cbiAgICBvblRvdWNoRG93bih7IHgsIHkgfSkge1xuICAgICAgICB0aGlzLnNjcm9sbEN1cnJlbnQueCA9dGhpcy5zY3JvbGwueFxuICAgICAgICB0aGlzLnNjcm9sbEN1cnJlbnQueSA9dGhpcy5zY3JvbGwueVxuICAgIH1cblxuICAgIG9uVG91Y2hNb3ZlKHsgeCwgeSB9KSB7XG4gICAgICAgIGNvbnN0IHhEaXN0YW5jZSA9eC5zdGFydCAtIHguZW5kXG4gICAgICAgIGNvbnN0IHlEaXN0YW5jZSA9eS5zdGFydCAtIHkuZW5kXG5cbiAgICAgICAgdGhpcy54LnRhcmdldCA9dGhpcy5zY3JvbGxDdXJyZW50LnggKyB4RGlzdGFuY2UsXG4gICAgICAgIHRoaXMueS50YXJnZXQgPXRoaXMuc2Nyb2xsQ3VycmVudC55ICsgeURpc3RhbmNlXG5cbiAgICAgICAgY29uc29sZS5sb2coIHRoaXMueC50YXJnZXQgLHRoaXMueS50YXJnZXQpXG5cbiAgICB9XG5cbiAgICBvblRvdWNoVXAoeyB4LCB5IH0pIHtcblxuICAgIH1cblxuICAgIC8vIFVwZGF0ZVxuICAgIHVwZGF0ZSgpe1xuICAgICAgICB0aGlzLnguY3VycmVudCA9R1NBUC51dGlscy5pbnRlcnBvbGF0ZSh0aGlzLnguY3VycmVudCwgdGhpcy54LnRhcmdldCwgdGhpcy54LmxlcnApXG4gICAgICAgIHRoaXMueS5jdXJyZW50ID1HU0FQLnV0aWxzLmludGVycG9sYXRlKHRoaXMueS5jdXJyZW50LCB0aGlzLnkudGFyZ2V0LCB0aGlzLnkubGVycClcblxuICAgICAgICB0aGlzLnNjcm9sbC54ID0gdGhpcy54LmN1cnJlbnRcbiAgICAgICAgdGhpcy5zY3JvbGwueSA9IHRoaXMueS5jdXJyZW50XG5cbiAgICAgICAgbWFwKHRoaXMubWVkaWFzLCBtZWRpYSA9PiB7XG4gICAgICAgICAgICBtZWRpYS51cGRhdGUodGhpcy5zY3JvbGwpXG4gICAgICAgIH0pXG4gICAgICAgIC8vIOS8oOe7mW1lZGlh5paH5Lu2XG4gICAgfVxuXG59IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5oID0gKCkgPT4gKFwiMWE1ZTYxMTYwZjI5OGEwYmJlMzNcIikiXSwibmFtZXMiOlsiY29uc3RydWN0b3IiLCJnbCIsInNjZW5lIiwic2l6ZXMiLCJ0aGlzIiwiZ3JvdXAiLCJUcmFuc2Zvcm0iLCJtZWRpYXNFbGVtZW50cyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsImNyZWF0ZUdlb21ldHJ5IiwiY3JlYXRlR2FsbGVyeSIsInNldFBhcmVudCIsIngiLCJjdXJyZW50IiwidGFyZ2V0IiwibGVycCIsInkiLCJzY3JvbGxDdXJyZW50Iiwic2Nyb2xsIiwiZ2VvbWV0cnkiLCJQbGFuZSIsIm1lZGlhcyIsIm1hcCIsImVsZW1lbnQiLCJpbmRleCIsIk1lZGlhIiwib25SZXNpemUiLCJldmVudCIsIm1lZGlhIiwib25Ub3VjaERvd24iLCJvblRvdWNoTW92ZSIsInhEaXN0YW5jZSIsInN0YXJ0IiwiZW5kIiwieURpc3RhbmNlIiwiY29uc29sZSIsImxvZyIsIm9uVG91Y2hVcCIsInVwZGF0ZSIsIkdTQVAiLCJ1dGlscyIsImludGVycG9sYXRlIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImgiXSwic291cmNlUm9vdCI6IiJ9