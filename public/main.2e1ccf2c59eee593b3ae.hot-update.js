/*! For license information please see main.2e1ccf2c59eee593b3ae.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatefloema("main",{"./app/components/Canvas/index.js":(e,r,n)=>{n.r(r),n.d(r,{default:()=>d});var t=n("./node_modules/ogl/src/core/Renderer.js"),s=n("./node_modules/ogl/src/core/Camera.js"),i=n("./node_modules/ogl/src/core/Transform.js"),o=n("./node_modules/ogl/src/extras/Box.js"),a=n("./node_modules/ogl/src/core/Program.js"),c=n("./node_modules/ogl/src/core/Mesh.js");class d{constructor(){this.createRenderer(),this.createCamera(),this.createScene(),this.createCube()}createRenderer(){this.renderer=new t.Renderer,this.gl=this.renderer.gl,document.body.appendChild(this.gl.canvas)}createCamera(){this.camera=new s.Camera(this.gl),this.camera.position.z=5}createScene(){this.scene=new i.Transform}createCube(){this.geometry=new o.Box(this.gl),this.program=new a.Program(this.gl,{vertex:"\n        attribute vec3 position;\n\n        uniform mat4 modelViewMatrix;\n        uniform mat4 projectionMatrix;\n\n        void main() {\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n        ",fragment:"\n      void main() {\n          gl_FragColor = vec4(1.0);\n      }\n      "}),this.mesh=new c.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene)}onResize(){this.renderer.setSize(window.innerWidth,window.innerHeight),this.camera.perspective({aspect:window.innerWidth/window.innerHeight})}update(){this.renderer.render({camera:this.camera,scene:this.scene})}}}},(function(e){e.h=()=>"55a4ea4a64c23fdadd7f"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi4yZTFjY2YyYzU5ZWVlNTkzYjNhZS5ob3QtdXBkYXRlLmpzIiwibWFwcGluZ3MiOiI7aVpBSWUsTUFBTUEsRUFDbkJDLFdBQUFBLEdBQ0VDLEtBQUtDLGlCQUNMRCxLQUFLRSxlQUNMRixLQUFLRyxjQUdMSCxLQUFLSSxZQUVQLENBRUFILGNBQUFBLEdBQ0VELEtBQUtLLFNBQVcsSUFBSUMsRUFBQUEsU0FFcEJOLEtBQUtPLEdBQUtQLEtBQUtLLFNBQVNFLEdBRXhCQyxTQUFTQyxLQUFLQyxZQUFZVixLQUFLTyxHQUFHSSxPQUNwQyxDQUVBVCxZQUFBQSxHQUNFRixLQUFLWSxPQUFTLElBQUlDLEVBQUFBLE9BQU9iLEtBQUtPLElBQzlCUCxLQUFLWSxPQUFPRSxTQUFTQyxFQUFJLENBRTNCLENBRUFaLFdBQUFBLEdBQ0VILEtBQUtnQixNQUFRLElBQUlDLEVBQUFBLFNBQ25CLENBVUFiLFVBQUFBLEdBQ0VKLEtBQUtrQixTQUFXLElBQUlDLEVBQUFBLElBQUluQixLQUFLTyxJQUM3QlAsS0FBS29CLFFBQVUsSUFBSUMsRUFBQUEsUUFBUXJCLEtBQUtPLEdBQUksQ0FDbENlLE9BQW9CLHVQQVVwQkMsU0FBc0IsZ0ZBT3hCdkIsS0FBS3dCLEtBQU8sSUFBSUMsRUFBQUEsS0FBS3pCLEtBQUtPLEdBQUksQ0FDNUJXLFNBQVNsQixLQUFLa0IsU0FDZEUsUUFBUXBCLEtBQUtvQixVQUdmcEIsS0FBS3dCLEtBQUtFLFVBQVUxQixLQUFLZ0IsTUFFM0IsQ0FHQVcsUUFBQUEsR0FFRTNCLEtBQUtLLFNBQVN1QixRQUFRQyxPQUFPQyxXQUFZRCxPQUFPRSxhQUVoRC9CLEtBQUtZLE9BQU9vQixZQUFZLENBQUVDLE9BQVFKLE9BQU9DLFdBQWFELE9BQU9FLGFBZ0IvRCxDQUVBRyxNQUFBQSxHQUlFbEMsS0FBS0ssU0FBUzhCLE9BQU8sQ0FDbkJ2QixPQUFRWixLQUFLWSxPQUNiSSxNQUFPaEIsS0FBS2dCLE9BRWhCLGtCQ3JHRm9CLEVBQW9CQyxFQUFJLElBQU0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvY29tcG9uZW50cy9DYW52YXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZmxvZW1hL3dlYnBhY2svcnVudGltZS9nZXRGdWxsSGFzaCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDYW1lcmEsIFJlbmRlcmVyLCBUcmFuc2Zvcm0sIE1lc2gsIEJveCwgUHJvZ3JhbSB9IGZyb20gJ29nbCc7XG5cbi8vIGltcG9ydCBIb21lIGZyb20gJy4vSG9tZSdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FudmFzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jcmVhdGVSZW5kZXJlcigpXG4gICAgdGhpcy5jcmVhdGVDYW1lcmEoKVxuICAgIHRoaXMuY3JlYXRlU2NlbmUoKVxuICAgIC8vICAgICB0aGlzLm9uUmVzaXplKClcbiAgICAvLyAgICAgdGhpcy5jcmVhdGVIb21lKClcbiAgICB0aGlzLmNyZWF0ZUN1YmUoKVxuICAgIC8vIOS7gOS5iOS7gOS5iOW/mOiusGRlZmluZeS6hu+8jOWwseeci+i/memHjOacieayoeacieiiq+WIneWni+WMllxuICB9XG5cbiAgY3JlYXRlUmVuZGVyZXIoKSB7XG4gICAgdGhpcy5yZW5kZXJlciA9IG5ldyBSZW5kZXJlcigpO1xuXG4gICAgdGhpcy5nbCA9IHRoaXMucmVuZGVyZXIuZ2w7IC8vVElQIHdvcmtzIGxpa2UgYSBjYW52YXMgY29udGV4dFxuXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmdsLmNhbnZhcyk7XG4gIH1cblxuICBjcmVhdGVDYW1lcmEoKSB7XG4gICAgdGhpcy5jYW1lcmEgPSBuZXcgQ2FtZXJhKHRoaXMuZ2wpXG4gICAgdGhpcy5jYW1lcmEucG9zaXRpb24ueiA9IDVcblxuICB9XG5cbiAgY3JlYXRlU2NlbmUoKSB7XG4gICAgdGhpcy5zY2VuZSA9IG5ldyBUcmFuc2Zvcm0oKVxuICB9XG5cbiAgLy8gICBjcmVhdGVIb21lKCkge1xuICAvLyAgICAgdGhpcy5ob21lID0gbmV3IEhvbWUoe1xuICAvLyAgICAgICBnbDogdGhpcy5nbCxcbiAgLy8gICAgICAgc2NlbmU6IHRoaXMuc2NlbmUsXG4gIC8vICAgICAgIHNpemVzOiB0aGlzLnNpemVzXG4gIC8vICAgICB9KTtcblxuICAvLyAgIH1cbiAgY3JlYXRlQ3ViZSgpIHtcbiAgICB0aGlzLmdlb21ldHJ5ID0gbmV3IEJveCh0aGlzLmdsKVxuICAgIHRoaXMucHJvZ3JhbSA9IG5ldyBQcm9ncmFtKHRoaXMuZ2wsIHtcbiAgICAgIHZlcnRleDogLyogZ2xzbCAqLyBgXG4gICAgICAgIGF0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uO1xuXG4gICAgICAgIHVuaWZvcm0gbWF0NCBtb2RlbFZpZXdNYXRyaXg7XG4gICAgICAgIHVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uTWF0cml4O1xuXG4gICAgICAgIHZvaWQgbWFpbigpIHtcbiAgICAgICAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KHBvc2l0aW9uLCAxLjApO1xuICAgICAgICB9XG4gICAgICAgIGAsXG4gICAgICBmcmFnbWVudDogLyogZ2xzbCAqLyBgXG4gICAgICB2b2lkIG1haW4oKSB7XG4gICAgICAgICAgZ2xfRnJhZ0NvbG9yID0gdmVjNCgxLjApO1xuICAgICAgfVxuICAgICAgYFxuICAgIH0pXG4gICAgLy8g5bCGZ2zkvZzkuLrnrKzkuIDkuKrlhYPntKDkvKDnu5lNZXNoXG4gICAgdGhpcy5tZXNoID0gbmV3IE1lc2godGhpcy5nbCwge1xuICAgICAgZ2VvbWV0cnk6dGhpcy5nZW9tZXRyeSwgXG4gICAgICBwcm9ncmFtOnRoaXMucHJvZ3JhbVxuICAgIH0pXG4gICAgLy8g5bCG55uS5a2Q6K6+572u5Li655u45py655qE5a2Q5YWD57SgXG4gICAgdGhpcy5tZXNoLnNldFBhcmVudCh0aGlzLnNjZW5lKVxuXG4gIH1cblxuXG4gIG9uUmVzaXplKCkge1xuICAgIC8vIOWwhua4suafk+eahOeUu+W4g+WwuuWvuOWhq+a7oeinhueql+WPo1xuICAgIHRoaXMucmVuZGVyZXIuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcbiAgICAvLyDliJvlu7rkuoZjYW1lcmHkuYvlkI7miY3og73liJvlu7rpgI/op4blm75cbiAgICB0aGlzLmNhbWVyYS5wZXJzcGVjdGl2ZSh7IGFzcGVjdDogd2luZG93LmlubmVyV2lkdGggLyB3aW5kb3cuaW5uZXJIZWlnaHQgfSk7XG5cbiAgICAvLyAgICAgY29uc3QgZm92ID0gdGhpcy5jYW1lcmEuZm92ICogKE1hdGguUEkgLyAxODApO1xuICAgIC8vICAgICBjb25zdCBoZWlnaHQgPSAyICogTWF0aC50YW4oZm92IC8gMikgKiB0aGlzLmNhbWVyYS5wb3NpdGlvbi56O1xuICAgIC8vICAgICBjb25zdCB3aWR0aCA9IGhlaWdodCAqIHRoaXMuY2FtZXJhLmFzcGVjdDtcblxuICAgIC8vICAgICB0aGlzLnNpemVzID0ge1xuICAgIC8vICAgICAgIGhlaWdodCxcbiAgICAvLyAgICAgICB3aWR0aCxcbiAgICAvLyAgICAgfTtcblxuICAgIC8vICAgICBpZiAodGhpcy5ob21lKSB7XG4gICAgLy8gICAgICAgdGhpcy5ob21lLm9uUmVzaXplKHtcbiAgICAvLyAgICAgICAgIHNpemVzOiB0aGlzLnNpemVzXG4gICAgLy8gICAgICAgfSlcbiAgICAvLyAgICAgfVxuICB9XG5cbiAgdXBkYXRlKCkge1xuICAgIC8vIOWunuaXtua4suafk1xuICAgIC8vIHRoaXMubWVzaC5yb3RhdGlvbi54ICs9IDAuMDFcbiAgICAvLyB0aGlzLm1lc2gucm90YXRpb24ueSArPSAwLjAxXG4gICAgdGhpcy5yZW5kZXJlci5yZW5kZXIoe1xuICAgICAgY2FtZXJhOiB0aGlzLmNhbWVyYSxcbiAgICAgIHNjZW5lOiB0aGlzLnNjZW5lXG4gICAgfSlcbiAgfVxufSIsIl9fd2VicGFja19yZXF1aXJlX18uaCA9ICgpID0+IChcIjU1YTRlYTRhNjRjMjNmZGFkZDdmXCIpIl0sIm5hbWVzIjpbIkNhbnZhcyIsImNvbnN0cnVjdG9yIiwidGhpcyIsImNyZWF0ZVJlbmRlcmVyIiwiY3JlYXRlQ2FtZXJhIiwiY3JlYXRlU2NlbmUiLCJjcmVhdGVDdWJlIiwicmVuZGVyZXIiLCJSZW5kZXJlciIsImdsIiwiZG9jdW1lbnQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJjYW52YXMiLCJjYW1lcmEiLCJDYW1lcmEiLCJwb3NpdGlvbiIsInoiLCJzY2VuZSIsIlRyYW5zZm9ybSIsImdlb21ldHJ5IiwiQm94IiwicHJvZ3JhbSIsIlByb2dyYW0iLCJ2ZXJ0ZXgiLCJmcmFnbWVudCIsIm1lc2giLCJNZXNoIiwic2V0UGFyZW50Iiwib25SZXNpemUiLCJzZXRTaXplIiwid2luZG93IiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwicGVyc3BlY3RpdmUiLCJhc3BlY3QiLCJ1cGRhdGUiLCJyZW5kZXIiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiaCJdLCJzb3VyY2VSb290IjoiIn0=