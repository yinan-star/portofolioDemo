/*! For license information please see main.57a3c7e9cf58626f4e37.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatefloema("main",{"./app/components/Canvas/index.js":(e,r,n)=>{n.r(r),n.d(r,{default:()=>o});var t=n("./node_modules/ogl/src/core/Renderer.js"),s=n("./node_modules/ogl/src/core/Camera.js"),a=n("./node_modules/ogl/src/core/Transform.js");Object(function(){var e=new Error("Cannot find module './Home'");throw e.code="MODULE_NOT_FOUND",e}());class o{constructor(){this.createRenderer(),this.createCamera(),this.createScene(),this.createHome()}createRenderer(){this.renderer=new t.Renderer,this.gl=this.renderer.gl,document.body.appendChild(this.gl.canvas)}createCamera(){this.camera=new s.Camera(this.gl),this.camera.position.z=5}createScene(){this.scene=new a.Transform}createHome(){this.home=new Object(function(){var e=new Error("Cannot find module './Home'");throw e.code="MODULE_NOT_FOUND",e}())({gl:this.gl,scene:this.scene})}onResize(){this.renderer.setSize(window.innerWidth,window.innerHeight),this.camera.perspective({aspect:window.innerWidth/window.innerHeight})}update(){this.renderer.render({camera:this.camera,scene:this.scene})}}}},(function(e){e.h=()=>"08cfb65caf45a530101f"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi41N2EzYzdlOWNmNTg2MjZmNGUzNy5ob3QtdXBkYXRlLmpzIiwibWFwcGluZ3MiOiI7bVhBS2UsTUFBTUEsRUFDbkJDLFdBQUFBLEdBQ0VDLEtBQUtDLGlCQUNMRCxLQUFLRSxlQUNMRixLQUFLRyxjQUVMSCxLQUFLSSxZQUdQLENBRUFILGNBQUFBLEdBQ0VELEtBQUtLLFNBQVcsSUFBSUMsRUFBQUEsU0FFcEJOLEtBQUtPLEdBQUtQLEtBQUtLLFNBQVNFLEdBRXhCQyxTQUFTQyxLQUFLQyxZQUFZVixLQUFLTyxHQUFHSSxPQUNwQyxDQUVBVCxZQUFBQSxHQUNFRixLQUFLWSxPQUFTLElBQUlDLEVBQUFBLE9BQU9iLEtBQUtPLElBQzlCUCxLQUFLWSxPQUFPRSxTQUFTQyxFQUFJLENBRTNCLENBRUFaLFdBQUFBLEdBQ0VILEtBQUtnQixNQUFRLElBQUlDLEVBQUFBLFNBQ25CLENBRUFiLFVBQUFBLEdBQ0VKLEtBQUtrQixLQUFPLElBQUlDLE9BQUFBLFdBQUFBLElBQUFBLEVBQUFBLElBQUFBLE1BQUFBLCtCQUFBQSxNQUFBQSxFQUFBQSxLQUFBQSxtQkFBQUEsQ0FBQUEsQ0FBQUEsR0FBSixDQUFTLENBQ25CWixHQUFJUCxLQUFLTyxHQUNUUyxNQUFPaEIsS0FBS2dCLE9BSWhCLENBbUJBSSxRQUFBQSxHQUVFcEIsS0FBS0ssU0FBU2dCLFFBQVFDLE9BQU9DLFdBQVlELE9BQU9FLGFBRWhEeEIsS0FBS1ksT0FBT2EsWUFBWSxDQUFFQyxPQUFRSixPQUFPQyxXQUFhRCxPQUFPRSxhQWdCL0QsQ0FFQUcsTUFBQUEsR0FJRTNCLEtBQUtLLFNBQVN1QixPQUFPLENBQ25CaEIsT0FBUVosS0FBS1ksT0FDYkksTUFBT2hCLEtBQUtnQixPQUVoQixrQkMxRkZhLEVBQW9CQyxFQUFJLElBQU0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvY29tcG9uZW50cy9DYW52YXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZmxvZW1hL3dlYnBhY2svcnVudGltZS9nZXRGdWxsSGFzaCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDYW1lcmEsIFJlbmRlcmVyLCBUcmFuc2Zvcm0sIE1lc2gsIEJveCwgUHJvZ3JhbSB9IGZyb20gJ29nbCc7XG5cbmltcG9ydCBIb21lIGZyb20gJy4vSG9tZSdcblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYW52YXMge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNyZWF0ZVJlbmRlcmVyKClcbiAgICB0aGlzLmNyZWF0ZUNhbWVyYSgpXG4gICAgdGhpcy5jcmVhdGVTY2VuZSgpXG4gICAgLy8gICAgIHRoaXMub25SZXNpemUoKVxuICAgIHRoaXMuY3JlYXRlSG9tZSgpXG4gICAgLy8gdGhpcy5jcmVhdGVDdWJlKClcbiAgICAvLyDku4DkuYjku4DkuYjlv5jorrBkZWZpbmXkuobvvIzlsLHnnIvov5nph4zmnInmsqHmnInooqvliJ3lp4vljJZcbiAgfVxuXG4gIGNyZWF0ZVJlbmRlcmVyKCkge1xuICAgIHRoaXMucmVuZGVyZXIgPSBuZXcgUmVuZGVyZXIoKTtcblxuICAgIHRoaXMuZ2wgPSB0aGlzLnJlbmRlcmVyLmdsOyAvL1RJUCB3b3JrcyBsaWtlIGEgY2FudmFzIGNvbnRleHRcblxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5nbC5jYW52YXMpO1xuICB9XG5cbiAgY3JlYXRlQ2FtZXJhKCkge1xuICAgIHRoaXMuY2FtZXJhID0gbmV3IENhbWVyYSh0aGlzLmdsKVxuICAgIHRoaXMuY2FtZXJhLnBvc2l0aW9uLnogPSA1XG5cbiAgfVxuXG4gIGNyZWF0ZVNjZW5lKCkge1xuICAgIHRoaXMuc2NlbmUgPSBuZXcgVHJhbnNmb3JtKClcbiAgfVxuXG4gIGNyZWF0ZUhvbWUoKSB7XG4gICAgdGhpcy5ob21lID0gbmV3IEhvbWUoe1xuICAgICAgZ2w6IHRoaXMuZ2wsXG4gICAgICBzY2VuZTogdGhpcy5zY2VuZSxcbiAgICAgIC8vIHNpemVzOiB0aGlzLnNpemVzXG4gICAgfSk7XG5cbiAgfVxuXG4gIC8vIGNyZWF0ZUN1YmUoKSB7XG4gIC8vICAgdGhpcy5nZW9tZXRyeSA9IG5ldyBCb3godGhpcy5nbClcbiAgLy8gICB0aGlzLnByb2dyYW0gPSBuZXcgUHJvZ3JhbSh0aGlzLmdsLCB7XG4gIC8vICAgICB2ZXJ0ZXgsXG4gIC8vICAgICBmcmFnbWVudFxuICAvLyAgIH0pXG4gIC8vICAgLy8g5bCGZ2zkvZzkuLrnrKzkuIDkuKrlhYPntKDkvKDnu5lNZXNoXG4gIC8vICAgdGhpcy5tZXNoID0gbmV3IE1lc2godGhpcy5nbCwge1xuICAvLyAgICAgZ2VvbWV0cnk6dGhpcy5nZW9tZXRyeSwgXG4gIC8vICAgICBwcm9ncmFtOnRoaXMucHJvZ3JhbVxuICAvLyAgIH0pXG4gIC8vICAgLy8g5bCG55uS5a2Q6K6+572u5Li655u45py655qE5a2Q5YWD57SgXG4gIC8vICAgdGhpcy5tZXNoLnNldFBhcmVudCh0aGlzLnNjZW5lKVxuXG4gIC8vIH1cblxuXG4gIG9uUmVzaXplKCkge1xuICAgIC8vIOWwhua4suafk+eahOeUu+W4g+WwuuWvuOWhq+a7oeinhueql+WPo1xuICAgIHRoaXMucmVuZGVyZXIuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcbiAgICAvLyDliJvlu7rkuoZjYW1lcmHkuYvlkI7miY3og73liJvlu7rpgI/op4blm75cbiAgICB0aGlzLmNhbWVyYS5wZXJzcGVjdGl2ZSh7IGFzcGVjdDogd2luZG93LmlubmVyV2lkdGggLyB3aW5kb3cuaW5uZXJIZWlnaHQgfSk7XG5cbiAgICAvLyAgICAgY29uc3QgZm92ID0gdGhpcy5jYW1lcmEuZm92ICogKE1hdGguUEkgLyAxODApO1xuICAgIC8vICAgICBjb25zdCBoZWlnaHQgPSAyICogTWF0aC50YW4oZm92IC8gMikgKiB0aGlzLmNhbWVyYS5wb3NpdGlvbi56O1xuICAgIC8vICAgICBjb25zdCB3aWR0aCA9IGhlaWdodCAqIHRoaXMuY2FtZXJhLmFzcGVjdDtcblxuICAgIC8vICAgICB0aGlzLnNpemVzID0ge1xuICAgIC8vICAgICAgIGhlaWdodCxcbiAgICAvLyAgICAgICB3aWR0aCxcbiAgICAvLyAgICAgfTtcblxuICAgIC8vICAgICBpZiAodGhpcy5ob21lKSB7XG4gICAgLy8gICAgICAgdGhpcy5ob21lLm9uUmVzaXplKHtcbiAgICAvLyAgICAgICAgIHNpemVzOiB0aGlzLnNpemVzXG4gICAgLy8gICAgICAgfSlcbiAgICAvLyAgICAgfVxuICB9XG5cbiAgdXBkYXRlKCkge1xuICAgIC8vIOWunuaXtua4suafk1xuICAgIC8vIHRoaXMubWVzaC5yb3RhdGlvbi54ICs9IDAuMDFcbiAgICAvLyB0aGlzLm1lc2gucm90YXRpb24ueSArPSAwLjAxXG4gICAgdGhpcy5yZW5kZXJlci5yZW5kZXIoe1xuICAgICAgY2FtZXJhOiB0aGlzLmNhbWVyYSxcbiAgICAgIHNjZW5lOiB0aGlzLnNjZW5lXG4gICAgfSlcbiAgfVxufSIsIl9fd2VicGFja19yZXF1aXJlX18uaCA9ICgpID0+IChcIjA4Y2ZiNjVjYWY0NWE1MzAxMDFmXCIpIl0sIm5hbWVzIjpbIkNhbnZhcyIsImNvbnN0cnVjdG9yIiwidGhpcyIsImNyZWF0ZVJlbmRlcmVyIiwiY3JlYXRlQ2FtZXJhIiwiY3JlYXRlU2NlbmUiLCJjcmVhdGVIb21lIiwicmVuZGVyZXIiLCJSZW5kZXJlciIsImdsIiwiZG9jdW1lbnQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJjYW52YXMiLCJjYW1lcmEiLCJDYW1lcmEiLCJwb3NpdGlvbiIsInoiLCJzY2VuZSIsIlRyYW5zZm9ybSIsImhvbWUiLCJIb21lIiwib25SZXNpemUiLCJzZXRTaXplIiwid2luZG93IiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwicGVyc3BlY3RpdmUiLCJhc3BlY3QiLCJ1cGRhdGUiLCJyZW5kZXIiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiaCJdLCJzb3VyY2VSb290IjoiIn0=