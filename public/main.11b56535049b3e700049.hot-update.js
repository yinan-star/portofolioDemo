/*! For license information please see main.11b56535049b3e700049.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatefloema("main",{"./app/components/Canvas/index.js":(e,r,n)=>{n.r(r),n.d(r,{default:()=>d});var s=n("./node_modules/ogl/src/core/Renderer.js"),t=n("./node_modules/ogl/src/core/Camera.js"),i=n("./node_modules/ogl/src/core/Transform.js"),o=n("./node_modules/ogl/src/extras/Box.js"),a=n("./node_modules/ogl/src/core/Program.js"),c=n("./node_modules/ogl/src/core/Mesh.js");class d{constructor(){this.createRenderer(),this.createScene(),this.createCube()}createRenderer(){this.renderer=new s.Renderer,this.gl=this.renderer.gl,document.body.appendChild(this.gl.canvas)}createCamera(){this.camera=new t.Camera(this.gl),this.camera.position.z=5}createScene(){this.scene=new i.Transform}createCube(){this.geometry=new o.Box(this.gl),this.program=new a.Program(this.gl,{vertex:"\n        attribute vec3 position;\n\n        uniform mat4 modelViewMatrix;\n        uniform mat4 projectionMatrix;\n\n        void main() {\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n        ",fragment:"\n      void main() {\n          gl_FragColor = vec4(1.0);\n      }\n      "}),this.mesh=new c.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene)}onResize(){this.renderer.setSize(window.innerWidth,window.innerHeight),this.camera.perspective({aspect:window.innerWidth/window.innerHeight})}update(){this.renderer.render({camera:this.camera,scene:this.scene})}}}},(function(e){e.h=()=>"2e1ccf2c59eee593b3ae"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi4xMWI1NjUzNTA0OWIzZTcwMDA0OS5ob3QtdXBkYXRlLmpzIiwibWFwcGluZ3MiOiI7aVpBSWUsTUFBTUEsRUFDbkJDLFdBQUFBLEdBQ0VDLEtBQUtDLGlCQUVMRCxLQUFLRSxjQUdMRixLQUFLRyxZQUNQLENBRUFGLGNBQUFBLEdBQ0VELEtBQUtJLFNBQVcsSUFBSUMsRUFBQUEsU0FFcEJMLEtBQUtNLEdBQUtOLEtBQUtJLFNBQVNFLEdBRXhCQyxTQUFTQyxLQUFLQyxZQUFZVCxLQUFLTSxHQUFHSSxPQUNwQyxDQUVBQyxZQUFBQSxHQUNFWCxLQUFLWSxPQUFTLElBQUlDLEVBQUFBLE9BQU9iLEtBQUtNLElBQzlCTixLQUFLWSxPQUFPRSxTQUFTQyxFQUFJLENBRTNCLENBRUFiLFdBQUFBLEdBQ0VGLEtBQUtnQixNQUFRLElBQUlDLEVBQUFBLFNBQ25CLENBVUFkLFVBQUFBLEdBQ0VILEtBQUtrQixTQUFXLElBQUlDLEVBQUFBLElBQUluQixLQUFLTSxJQUM3Qk4sS0FBS29CLFFBQVUsSUFBSUMsRUFBQUEsUUFBUXJCLEtBQUtNLEdBQUksQ0FDbENnQixPQUFvQix1UEFVcEJDLFNBQXNCLGdGQU94QnZCLEtBQUt3QixLQUFPLElBQUlDLEVBQUFBLEtBQUt6QixLQUFLTSxHQUFJLENBQzVCWSxTQUFTbEIsS0FBS2tCLFNBQ2RFLFFBQVFwQixLQUFLb0IsVUFHZnBCLEtBQUt3QixLQUFLRSxVQUFVMUIsS0FBS2dCLE1BRTNCLENBR0FXLFFBQUFBLEdBRUUzQixLQUFLSSxTQUFTd0IsUUFBUUMsT0FBT0MsV0FBWUQsT0FBT0UsYUFFaEQvQixLQUFLWSxPQUFPb0IsWUFBWSxDQUFFQyxPQUFRSixPQUFPQyxXQUFhRCxPQUFPRSxhQWdCL0QsQ0FFQUcsTUFBQUEsR0FJRWxDLEtBQUtJLFNBQVMrQixPQUFPLENBQ25CdkIsT0FBUVosS0FBS1ksT0FDYkksTUFBT2hCLEtBQUtnQixPQUVoQixrQkNwR0ZvQixFQUFvQkMsRUFBSSxJQUFNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL2NvbXBvbmVudHMvQ2FudmFzL2luZGV4LmpzIiwid2VicGFjazovL2Zsb2VtYS93ZWJwYWNrL3J1bnRpbWUvZ2V0RnVsbEhhc2giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2FtZXJhLCBSZW5kZXJlciwgVHJhbnNmb3JtLCBNZXNoLCBCb3gsIFByb2dyYW0gfSBmcm9tICdvZ2wnO1xuXG4vLyBpbXBvcnQgSG9tZSBmcm9tICcuL0hvbWUnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhbnZhcyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY3JlYXRlUmVuZGVyZXIoKVxuICAgIC8vICAgICB0aGlzLmNyZWF0ZUNhbWVyYSgpXG4gICAgdGhpcy5jcmVhdGVTY2VuZSgpXG4gICAgLy8gICAgIHRoaXMub25SZXNpemUoKVxuICAgIC8vICAgICB0aGlzLmNyZWF0ZUhvbWUoKVxuICAgIHRoaXMuY3JlYXRlQ3ViZSgpXG4gIH1cblxuICBjcmVhdGVSZW5kZXJlcigpIHtcbiAgICB0aGlzLnJlbmRlcmVyID0gbmV3IFJlbmRlcmVyKCk7XG5cbiAgICB0aGlzLmdsID0gdGhpcy5yZW5kZXJlci5nbDsgLy9USVAgd29ya3MgbGlrZSBhIGNhbnZhcyBjb250ZXh0XG5cbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuZ2wuY2FudmFzKTtcbiAgfVxuXG4gIGNyZWF0ZUNhbWVyYSgpIHtcbiAgICB0aGlzLmNhbWVyYSA9IG5ldyBDYW1lcmEodGhpcy5nbClcbiAgICB0aGlzLmNhbWVyYS5wb3NpdGlvbi56ID0gNVxuXG4gIH1cblxuICBjcmVhdGVTY2VuZSgpIHtcbiAgICB0aGlzLnNjZW5lID0gbmV3IFRyYW5zZm9ybSgpXG4gIH1cblxuICAvLyAgIGNyZWF0ZUhvbWUoKSB7XG4gIC8vICAgICB0aGlzLmhvbWUgPSBuZXcgSG9tZSh7XG4gIC8vICAgICAgIGdsOiB0aGlzLmdsLFxuICAvLyAgICAgICBzY2VuZTogdGhpcy5zY2VuZSxcbiAgLy8gICAgICAgc2l6ZXM6IHRoaXMuc2l6ZXNcbiAgLy8gICAgIH0pO1xuXG4gIC8vICAgfVxuICBjcmVhdGVDdWJlKCkge1xuICAgIHRoaXMuZ2VvbWV0cnkgPSBuZXcgQm94KHRoaXMuZ2wpXG4gICAgdGhpcy5wcm9ncmFtID0gbmV3IFByb2dyYW0odGhpcy5nbCwge1xuICAgICAgdmVydGV4OiAvKiBnbHNsICovIGBcbiAgICAgICAgYXR0cmlidXRlIHZlYzMgcG9zaXRpb247XG5cbiAgICAgICAgdW5pZm9ybSBtYXQ0IG1vZGVsVmlld01hdHJpeDtcbiAgICAgICAgdW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaXg7XG5cbiAgICAgICAgdm9pZCBtYWluKCkge1xuICAgICAgICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG1vZGVsVmlld01hdHJpeCAqIHZlYzQocG9zaXRpb24sIDEuMCk7XG4gICAgICAgIH1cbiAgICAgICAgYCxcbiAgICAgIGZyYWdtZW50OiAvKiBnbHNsICovIGBcbiAgICAgIHZvaWQgbWFpbigpIHtcbiAgICAgICAgICBnbF9GcmFnQ29sb3IgPSB2ZWM0KDEuMCk7XG4gICAgICB9XG4gICAgICBgXG4gICAgfSlcbiAgICAvLyDlsIZnbOS9nOS4uuesrOS4gOS4quWFg+e0oOS8oOe7mU1lc2hcbiAgICB0aGlzLm1lc2ggPSBuZXcgTWVzaCh0aGlzLmdsLCB7XG4gICAgICBnZW9tZXRyeTp0aGlzLmdlb21ldHJ5LCBcbiAgICAgIHByb2dyYW06dGhpcy5wcm9ncmFtXG4gICAgfSlcbiAgICAvLyDlsIbnm5LlrZDorr7nva7kuLrnm7jmnLrnmoTlrZDlhYPntKBcbiAgICB0aGlzLm1lc2guc2V0UGFyZW50KHRoaXMuc2NlbmUpXG5cbiAgfVxuXG5cbiAgb25SZXNpemUoKSB7XG4gICAgLy8g5bCG5riy5p+T55qE55S75biD5bC65a+45aGr5ruh6KeG56qX5Y+jXG4gICAgdGhpcy5yZW5kZXJlci5zZXRTaXplKHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xuICAgIC8vIOWIm+W7uuS6hmNhbWVyYeS5i+WQjuaJjeiDveWIm+W7uumAj+inhuWbvlxuICAgIHRoaXMuY2FtZXJhLnBlcnNwZWN0aXZlKHsgYXNwZWN0OiB3aW5kb3cuaW5uZXJXaWR0aCAvIHdpbmRvdy5pbm5lckhlaWdodCB9KTtcblxuICAgIC8vICAgICBjb25zdCBmb3YgPSB0aGlzLmNhbWVyYS5mb3YgKiAoTWF0aC5QSSAvIDE4MCk7XG4gICAgLy8gICAgIGNvbnN0IGhlaWdodCA9IDIgKiBNYXRoLnRhbihmb3YgLyAyKSAqIHRoaXMuY2FtZXJhLnBvc2l0aW9uLno7XG4gICAgLy8gICAgIGNvbnN0IHdpZHRoID0gaGVpZ2h0ICogdGhpcy5jYW1lcmEuYXNwZWN0O1xuXG4gICAgLy8gICAgIHRoaXMuc2l6ZXMgPSB7XG4gICAgLy8gICAgICAgaGVpZ2h0LFxuICAgIC8vICAgICAgIHdpZHRoLFxuICAgIC8vICAgICB9O1xuXG4gICAgLy8gICAgIGlmICh0aGlzLmhvbWUpIHtcbiAgICAvLyAgICAgICB0aGlzLmhvbWUub25SZXNpemUoe1xuICAgIC8vICAgICAgICAgc2l6ZXM6IHRoaXMuc2l6ZXNcbiAgICAvLyAgICAgICB9KVxuICAgIC8vICAgICB9XG4gIH1cblxuICB1cGRhdGUoKSB7XG4gICAgLy8g5a6e5pe25riy5p+TXG4gICAgLy8gdGhpcy5tZXNoLnJvdGF0aW9uLnggKz0gMC4wMVxuICAgIC8vIHRoaXMubWVzaC5yb3RhdGlvbi55ICs9IDAuMDFcbiAgICB0aGlzLnJlbmRlcmVyLnJlbmRlcih7XG4gICAgICBjYW1lcmE6IHRoaXMuY2FtZXJhLFxuICAgICAgc2NlbmU6IHRoaXMuc2NlbmVcbiAgICB9KVxuICB9XG59IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5oID0gKCkgPT4gKFwiMmUxY2NmMmM1OWVlZTU5M2IzYWVcIikiXSwibmFtZXMiOlsiQ2FudmFzIiwiY29uc3RydWN0b3IiLCJ0aGlzIiwiY3JlYXRlUmVuZGVyZXIiLCJjcmVhdGVTY2VuZSIsImNyZWF0ZUN1YmUiLCJyZW5kZXJlciIsIlJlbmRlcmVyIiwiZ2wiLCJkb2N1bWVudCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImNhbnZhcyIsImNyZWF0ZUNhbWVyYSIsImNhbWVyYSIsIkNhbWVyYSIsInBvc2l0aW9uIiwieiIsInNjZW5lIiwiVHJhbnNmb3JtIiwiZ2VvbWV0cnkiLCJCb3giLCJwcm9ncmFtIiwiUHJvZ3JhbSIsInZlcnRleCIsImZyYWdtZW50IiwibWVzaCIsIk1lc2giLCJzZXRQYXJlbnQiLCJvblJlc2l6ZSIsInNldFNpemUiLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJwZXJzcGVjdGl2ZSIsImFzcGVjdCIsInVwZGF0ZSIsInJlbmRlciIsIl9fd2VicGFja19yZXF1aXJlX18iLCJoIl0sInNvdXJjZVJvb3QiOiIifQ==