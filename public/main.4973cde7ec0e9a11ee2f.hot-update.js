/*! For license information please see main.4973cde7ec0e9a11ee2f.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatefloema("main",{"./app/components/Canvas/home/index.js":(e,s,t)=>{t.r(s),t.d(s,{default:()=>c});var r=t("./node_modules/ogl/src/core/Transform.js"),i=t("./node_modules/ogl/src/extras/Plane.js"),o=t("./node_modules/gsap/index.js"),l=t("./node_modules/lodash/map.js"),n=t.n(l),h=t("./app/components/Canvas/home/Media.js");const c=class{constructor({gl:e,scene:s,sizes:t}){this.gl=e,this.sizes=t,this.group=new r.Transform,this.mediasElements=document.querySelectorAll(".home__gallery__media__image"),this.createGeometry(),this.createGallery(),this.group.setParent(s),this.x={current:0,target:0,lerp:.1},this.y={current:0,target:0,lerp:.1},this.scrollCurrent={x:0,y:0},this.scroll={x:0,y:0}}createGeometry(){this.geometry=new i.Plane(this.gl)}createGallery(){this.medias=n()(this.mediasElements,((e,s)=>new h.default({element:e,geometry:this.geometry,gl:this.gl,index:s,scene:this.group,sizes:this.sizes})))}onResize(e){n()(this.medias,(s=>s.onResize(e))),this.sizes=e.sizes}onTouchDown({x:e,y:s}){this.scrollCurrent.x=this.scroll.x,this.scrollCurrent.y=this.scroll.y}onTouchMove({x:e,y:s}){const t=e.start-e.end,r=s.start-s.end;this.x.target=this.scrollCurrent.x-t,this.y.target=this.scrollCurrent.y-r}onTouchUp({x:e,y:s}){}update(){this.x.current=o.default.utils.interpolate(this.x.current,this.x.target,this.x.lerp),this.y.current=o.default.utils.interpolate(this.y.current,this.y.target,this.y.lerp),this.scroll.x<this.x.current?this.x.direction="left":this.scroll.x>this.x.current&&(this.x.direction="right"),console.log(this.x.direction),this.scroll.x=this.x.current,this.scroll.y=this.y.current,n()(this.medias,((e,s)=>{if(0===s){e.mesh.position.x+e.mesh.scale.x/2<-this.sizes.width/2&&console.log("out of the screen",e.mesh.position.x)}e.update(this.scroll)}))}}}},(function(e){e.h=()=>"ccfb1bfc2506aad1626d"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,