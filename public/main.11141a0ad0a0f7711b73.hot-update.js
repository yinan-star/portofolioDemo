/*! For license information please see main.11141a0ad0a0f7711b73.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatefloema("main",{"./app/components/Canvas/Home.js":(t,e,r)=>{r.r(e),r.d(e,{default:()=>o});var i=r("./node_modules/ogl/src/core/Transform.js"),s=r("./node_modules/ogl/src/extras/Plane.js"),a=r("./node_modules/lodash/map.js"),n=r.n(a),h=r("./app/components/Canvas/Media.js");const o=class{constructor(t,e,r){this.gl=t,this.group=new i.Transform,this.mediasElements=document.querySelectorAll(".home__gallery__media__image"),this.createGeometry(),this.createGallery()}createGeometry(){this.geometry=new s.Plane(this.gl)}createGallery(){this.medias=n()(this.mediasElements,((t,e)=>new h.default({element:t,geometry:this.geometry,index:e,scene:this.group})))}}},"./app/components/Canvas/Media.js":(t,e,r)=>{r.r(e),r.d(e,{default:()=>o});var i=r("./node_modules/ogl/src/core/Texture.js"),s=r("./node_modules/ogl/src/core/Program.js"),a=r("./node_modules/ogl/src/core/Mesh.js"),n=r("./app/shaders/plane-fragment.glsl"),h=r("./app/shaders/plane-vertex.glsl");const o=class{constructor({element:t,geometry:e,gl:r,index:i,scene:s,sizes:a}){this.element=t,this.geometry=e,this.gl=r,this.index=i,this.scene=s,this.sizes=a,this.createTexture(),this.createProgram(),this.createMesh()}createTexture(){this.texture=new i.Texture(this.gl),this.image=new window.Image,this.image.src=this.element.getAttribute("data-src"),this.image.onload=t=>this.texture.image=this.image,console.log(this,this.element)}createProgram(){this.program=new s.Program(this.gl,{fragment:n.default,vertex:h.default,uniforms:{tMap:{value:this.texture}}})}createMesh(){this.mesh=new a.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene)}}},"./app/components/Canvas/index.js":(t,e,r)=>{r.r(e),r.d(e,{default:()=>h});var i=r("./node_modules/ogl/src/core/Renderer.js"),s=r("./node_modules/ogl/src/core/Camera.js"),a=r("./node_modules/ogl/src/core/Transform.js"),n=r("./app/components/Canvas/Home.js");class h{constructor(){this.createRenderer(),this.createCamera(),this.createScene(),this.createHome()}createRenderer(){this.renderer=new i.Renderer,this.gl=this.renderer.gl,document.body.appendChild(this.gl.canvas)}createCamera(){this.camera=new s.Camera(this.gl),this.camera.position.z=5}createScene(){this.scene=new a.Transform}createHome(){this.home=new n.default({gl:this.gl,scene:this.scene})}onResize(){this.renderer.setSize(window.innerWidth,window.innerHeight),this.camera.perspective({aspect:window.innerWidth/window.innerHeight})}update(){this.renderer.render({camera:this.camera,scene:this.scene})}}},"./app/shaders/plane-fragment.glsl":(t,e,r)=>{r.r(e),r.d(e,{default:()=>i});const i="#define GLSLIFY 1\nvoid main() {\n    gl_FragColor = vec4(1.0, 0.5, 0.5, 1.0);\n}"},"./app/shaders/plane-vertex.glsl":(t,e,r)=>{r.r(e),r.d(e,{default:()=>i});const i="#define GLSLIFY 1\nattribute vec3 position;\nattribute vec2 uv;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec2 vUv;\n\nvoid main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}"},"./node_modules/ogl/src/core/Geometry.js":(t,e,r)=>{r.r(e),r.d(e,{Geometry:()=>o});var i=r("./node_modules/ogl/src/math/Vec3.js");const s=new i.Vec3;let a=1,n=1,h=!1;class o{constructor(t,e={}){t.canvas||console.error("gl not passed as first argument to Geometry"),this.gl=t,this.attributes=e,this.id=a++,this.VAOs={},this.drawRange={start:0,count:0},this.instancedCount=0,this.gl.renderer.bindVertexArray(null),this.gl.renderer.currentGeometry=null,this.glState=this.gl.renderer.state;for(let t in e)this.addAttribute(t,e[t])}addAttribute(t,e){if(this.attributes[t]=e,e.id=n++,e.size=e.size||1,e.type=e.type||(e.data.constructor===Float32Array?this.gl.FLOAT:e.data.constructor===Uint16Array?this.gl.UNSIGNED_SHORT:this.gl.UNSIGNED_INT),e.target="index"===t?this.gl.ELEMENT_ARRAY_BUFFER:this.gl.ARRAY_BUFFER,e.normalized=e.normalized||!1,e.stride=e.stride||0,e.offset=e.offset||0,e.count=e.count||(e.stride?e.data.byteLength/e.stride:e.data.length/e.size),e.divisor=e.instanced||0,e.needsUpdate=!1,e.usage=e.usage||this.gl.STATIC_DRAW,e.buffer||this.updateAttribute(e),e.divisor){if(this.isInstanced=!0,this.instancedCount&&this.instancedCount!==e.count*e.divisor)return console.warn("geometry has multiple instanced buffers of different length"),this.instancedCount=Math.min(this.instancedCount,e.count*e.divisor);this.instancedCount=e.count*e.divisor}else"index"===t?this.drawRange.count=e.count:this.attributes.index||(this.drawRange.count=Math.max(this.drawRange.count,e.count))}updateAttribute(t){const e=!t.buffer;e&&(t.buffer=this.gl.createBuffer()),this.glState.boundBuffer!==t.buffer&&(this.gl.bindBuffer(t.target,t.buffer),this.glState.boundBuffer=t.buffer),e?this.gl.bufferData(t.target,t.data,t.usage):this.gl.bufferSubData(t.target,0,t.data),t.needsUpdate=!1}setIndex(t){this.addAttribute("index",t)}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}setInstancedCount(t){this.instancedCount=t}createVAO(t){this.VAOs[t.attributeOrder]=this.gl.renderer.createVertexArray(),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.bindAttributes(t)}bindAttributes(t){t.attributeLocations.forEach(((t,{name:e,type:r})=>{if(!this.attributes[e])return void console.warn(`active attribute ${e} not being supplied`);const i=this.attributes[e];this.gl.bindBuffer(i.target,i.buffer),this.glState.boundBuffer=i.buffer;let s=1;35674===r&&(s=2),35675===r&&(s=3),35676===r&&(s=4);const a=i.size/s,n=1===s?0:s*s*4,h=1===s?0:4*s;for(let e=0;e<s;e++)this.gl.vertexAttribPointer(t+e,a,i.type,i.normalized,i.stride+n,i.offset+e*h),this.gl.enableVertexAttribArray(t+e),this.gl.renderer.vertexAttribDivisor(t+e,i.divisor)})),this.attributes.index&&this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.attributes.index.buffer)}draw({program:t,mode:e=this.gl.TRIANGLES}){this.gl.renderer.currentGeometry!==`${this.id}_${t.attributeOrder}`&&(this.VAOs[t.attributeOrder]||this.createVAO(t),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.gl.renderer.currentGeometry=`${this.id}_${t.attributeOrder}`),t.attributeLocations.forEach(((t,{name:e})=>{const r=this.attributes[e];r.needsUpdate&&this.updateAttribute(r)}));let r=2;this.attributes.index?.type===this.gl.UNSIGNED_INT&&(r=4),this.isInstanced?this.attributes.index?this.gl.renderer.drawElementsInstanced(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+this.drawRange.start*r,this.instancedCount):this.gl.renderer.drawArraysInstanced(e,this.drawRange.start,this.drawRange.count,this.instancedCount):this.attributes.index?this.gl.drawElements(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+this.drawRange.start*r):this.gl.drawArrays(e,this.drawRange.start,this.drawRange.count)}getPosition(){const t=this.attributes.position;return t.data?t:h?void 0:(console.warn("No position buffer data found to compute bounds"),h=!0)}computeBoundingBox(t){t||(t=this.getPosition());const e=t.data,r=t.size;this.bounds||(this.bounds={min:new i.Vec3,max:new i.Vec3,center:new i.Vec3,scale:new i.Vec3,radius:1/0});const s=this.bounds.min,a=this.bounds.max,n=this.bounds.center,h=this.bounds.scale;s.set(1/0),a.set(-1/0);for(let t=0,i=e.length;t<i;t+=r){const r=e[t],i=e[t+1],n=e[t+2];s.x=Math.min(r,s.x),s.y=Math.min(i,s.y),s.z=Math.min(n,s.z),a.x=Math.max(r,a.x),a.y=Math.max(i,a.y),a.z=Math.max(n,a.z)}h.sub(a,s),n.add(s,a).divide(2)}computeBoundingSphere(t){t||(t=this.getPosition());const e=t.data,r=t.size;this.bounds||this.computeBoundingBox(t);let i=0;for(let t=0,a=e.length;t<a;t+=r)s.fromArray(e,t),i=Math.max(i,this.bounds.center.squaredDistance(s));this.bounds.radius=Math.sqrt(i)}remove(){for(let t in this.VAOs)this.gl.renderer.deleteVertexArray(this.VAOs[t]),delete this.VAOs[t];for(let t in this.attributes)this.gl.deleteBuffer(this.attributes[t].buffer),delete this.attributes[t]}}},"./node_modules/ogl/src/core/Mesh.js":(t,e,r)=>{r.r(e),r.d(e,{Mesh:()=>h});var i=r("./node_modules/ogl/src/core/Transform.js"),s=r("./node_modules/ogl/src/math/Mat3.js"),a=r("./node_modules/ogl/src/math/Mat4.js");let n=0;class h extends i.Transform{constructor(t,{geometry:e,program:r,mode:i=t.TRIANGLES,frustumCulled:h=!0,renderOrder:o=0}={}){super(),t.canvas||console.error("gl not passed as first argument to Mesh"),this.gl=t,this.id=n++,this.geometry=e,this.program=r,this.mode=i,this.frustumCulled=h,this.renderOrder=o,this.modelViewMatrix=new a.Mat4,this.normalMatrix=new s.Mat3,this.beforeRenderCallbacks=[],this.afterRenderCallbacks=[]}onBeforeRender(t){return this.beforeRenderCallbacks.push(t),this}onAfterRender(t){return this.afterRenderCallbacks.push(t),this}draw({camera:t}={}){t&&(this.program.uniforms.modelMatrix||Object.assign(this.program.uniforms,{modelMatrix:{value:null},viewMatrix:{value:null},modelViewMatrix:{value:null},normalMatrix:{value:null},projectionMatrix:{value:null},cameraPosition:{value:null}}),this.program.uniforms.projectionMatrix.value=t.projectionMatrix,this.program.uniforms.cameraPosition.value=t.worldPosition,this.program.uniforms.viewMatrix.value=t.viewMatrix,this.modelViewMatrix.multiply(t.viewMatrix,this.worldMatrix),this.normalMatrix.getNormalMatrix(this.modelViewMatrix),this.program.uniforms.modelMatrix.value=this.worldMatrix,this.program.uniforms.modelViewMatrix.value=this.modelViewMatrix,this.program.uniforms.normalMatrix.value=this.normalMatrix),this.beforeRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t})));let e=this.program.cullFace&&this.worldMatrix.determinant()<0;this.program.use({flipFaces:e}),this.geometry.draw({mode:this.mode,program:this.program}),this.afterRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t})))}}},"./node_modules/ogl/src/core/Program.js":(t,e,r)=>{r.r(e),r.d(e,{Program:()=>a});let i=1;const s={};class a{constructor(t,{vertex:e,fragment:r,uniforms:s={},transparent:a=!1,cullFace:n=t.BACK,frontFace:o=t.CCW,depthTest:l=!0,depthWrite:u=!0,depthFunc:d=t.LESS}={}){t.canvas||console.error("gl not passed as first argument to Program"),this.gl=t,this.uniforms=s,this.id=i++,e||console.warn("vertex shader not supplied"),r||console.warn("fragment shader not supplied"),this.transparent=a,this.cullFace=n,this.frontFace=o,this.depthTest=l,this.depthWrite=u,this.depthFunc=d,this.blendFunc={},this.blendEquation={},this.transparent&&!this.blendFunc.src&&(this.gl.renderer.premultipliedAlpha?this.setBlendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA):this.setBlendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA));const g=t.createShader(t.VERTEX_SHADER);t.shaderSource(g,e),t.compileShader(g),""!==t.getShaderInfoLog(g)&&console.warn(`${t.getShaderInfoLog(g)}\nVertex Shader\n${h(e)}`);const m=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(m,r),t.compileShader(m),""!==t.getShaderInfoLog(m)&&console.warn(`${t.getShaderInfoLog(m)}\nFragment Shader\n${h(r)}`),this.program=t.createProgram(),t.attachShader(this.program,g),t.attachShader(this.program,m),t.linkProgram(this.program),!t.getProgramParameter(this.program,t.LINK_STATUS))return console.warn(t.getProgramInfoLog(this.program));t.deleteShader(g),t.deleteShader(m),this.uniformLocations=new Map;let c=t.getProgramParameter(this.program,t.ACTIVE_UNIFORMS);for(let e=0;e<c;e++){let r=t.getActiveUniform(this.program,e);this.uniformLocations.set(r,t.getUniformLocation(this.program,r.name));const i=r.name.match(/(\w+)/g);r.uniformName=i[0],r.nameComponents=i.slice(1)}this.attributeLocations=new Map;const p=[],f=t.getProgramParameter(this.program,t.ACTIVE_ATTRIBUTES);for(let e=0;e<f;e++){const r=t.getActiveAttrib(this.program,e),i=t.getAttribLocation(this.program,r.name);-1!==i&&(p[i]=r.name,this.attributeLocations.set(r,i))}this.attributeOrder=p.join("")}setBlendFunc(t,e,r,i){this.blendFunc.src=t,this.blendFunc.dst=e,this.blendFunc.srcAlpha=r,this.blendFunc.dstAlpha=i,t&&(this.transparent=!0)}setBlendEquation(t,e){this.blendEquation.modeRGB=t,this.blendEquation.modeAlpha=e}applyState(){this.depthTest?this.gl.renderer.enable(this.gl.DEPTH_TEST):this.gl.renderer.disable(this.gl.DEPTH_TEST),this.cullFace?this.gl.renderer.enable(this.gl.CULL_FACE):this.gl.renderer.disable(this.gl.CULL_FACE),this.blendFunc.src?this.gl.renderer.enable(this.gl.BLEND):this.gl.renderer.disable(this.gl.BLEND),this.cullFace&&this.gl.renderer.setCullFace(this.cullFace),this.gl.renderer.setFrontFace(this.frontFace),this.gl.renderer.setDepthMask(this.depthWrite),this.gl.renderer.setDepthFunc(this.depthFunc),this.blendFunc.src&&this.gl.renderer.setBlendFunc(this.blendFunc.src,this.blendFunc.dst,this.blendFunc.srcAlpha,this.blendFunc.dstAlpha),this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB,this.blendEquation.modeAlpha)}use({flipFaces:t=!1}={}){let e=-1;this.gl.renderer.state.currentProgram===this.id||(this.gl.useProgram(this.program),this.gl.renderer.state.currentProgram=this.id),this.uniformLocations.forEach(((t,r)=>{let i=this.uniforms[r.uniformName];for(const t of r.nameComponents){if(!i)break;if(!(t in i)){if(Array.isArray(i.value))break;i=void 0;break}i=i[t]}if(!i)return l(`Active uniform ${r.name} has not been supplied`);if(i&&void 0===i.value)return l(`${r.name} uniform is missing a value parameter`);if(i.value.texture)return e+=1,i.value.update(e),n(this.gl,r.type,t,e);if(i.value.length&&i.value[0].texture){const s=[];return i.value.forEach((t=>{e+=1,t.update(e),s.push(e)})),n(this.gl,r.type,t,s)}n(this.gl,r.type,t,i.value)})),this.applyState(),t&&this.gl.renderer.setFrontFace(this.frontFace===this.gl.CCW?this.gl.CW:this.gl.CCW)}remove(){this.gl.deleteProgram(this.program)}}function n(t,e,r,i){i=i.length?function(t){const e=t.length,r=t[0].length;if(void 0===r)return t;const i=e*r;let a=s[i];a||(s[i]=a=new Float32Array(i));for(let i=0;i<e;i++)a.set(t[i],i*r);return a}(i):i;const a=t.renderer.state.uniformLocations.get(r);if(i.length)if(void 0===a||a.length!==i.length)t.renderer.state.uniformLocations.set(r,i.slice(0));else{if(function(t,e){if(t.length!==e.length)return!1;for(let r=0,i=t.length;r<i;r++)if(t[r]!==e[r])return!1;return!0}(a,i))return;a.set?a.set(i):function(t,e){for(let r=0,i=t.length;r<i;r++)t[r]=e[r]}(a,i),t.renderer.state.uniformLocations.set(r,a)}else{if(a===i)return;t.renderer.state.uniformLocations.set(r,i)}switch(e){case 5126:return i.length?t.uniform1fv(r,i):t.uniform1f(r,i);case 35664:return t.uniform2fv(r,i);case 35665:return t.uniform3fv(r,i);case 35666:return t.uniform4fv(r,i);case 35670:case 5124:case 35678:case 35680:return i.length?t.uniform1iv(r,i):t.uniform1i(r,i);case 35671:case 35667:return t.uniform2iv(r,i);case 35672:case 35668:return t.uniform3iv(r,i);case 35673:case 35669:return t.uniform4iv(r,i);case 35674:return t.uniformMatrix2fv(r,!1,i);case 35675:return t.uniformMatrix3fv(r,!1,i);case 35676:return t.uniformMatrix4fv(r,!1,i)}}function h(t){let e=t.split("\n");for(let t=0;t<e.length;t++)e[t]=t+1+": "+e[t];return e.join("\n")}let o=0;function l(t){o>100||(console.warn(t),o++,o>100&&console.warn("More than 100 program warnings - stopping logs."))}},"./node_modules/ogl/src/core/Texture.js":(t,e,r)=>{r.r(e),r.d(e,{Texture:()=>n});const i=new Uint8Array(4);function s(t){return 0==(t&t-1)}let a=1;class n{constructor(t,{image:e,target:r=t.TEXTURE_2D,type:i=t.UNSIGNED_BYTE,format:s=t.RGBA,internalFormat:n=s,wrapS:h=t.CLAMP_TO_EDGE,wrapT:o=t.CLAMP_TO_EDGE,generateMipmaps:l=!0,minFilter:u=(l?t.NEAREST_MIPMAP_LINEAR:t.LINEAR),magFilter:d=t.LINEAR,premultiplyAlpha:g=!1,unpackAlignment:m=4,flipY:c=r==t.TEXTURE_2D,anisotropy:p=0,level:f=0,width:b,height:A=b}={}){this.gl=t,this.id=a++,this.image=e,this.target=r,this.type=i,this.format=s,this.internalFormat=n,this.minFilter=u,this.magFilter=d,this.wrapS=h,this.wrapT=o,this.generateMipmaps=l,this.premultiplyAlpha=g,this.unpackAlignment=m,this.flipY=c,this.anisotropy=Math.min(p,this.gl.renderer.parameters.maxAnisotropy),this.level=f,this.width=b,this.height=A,this.texture=this.gl.createTexture(),this.store={image:null},this.glState=this.gl.renderer.state,this.state={},this.state.minFilter=this.gl.NEAREST_MIPMAP_LINEAR,this.state.magFilter=this.gl.LINEAR,this.state.wrapS=this.gl.REPEAT,this.state.wrapT=this.gl.REPEAT,this.state.anisotropy=0}bind(){this.glState.textureUnits[this.glState.activeTextureUnit]!==this.id&&(this.gl.bindTexture(this.target,this.texture),this.glState.textureUnits[this.glState.activeTextureUnit]=this.id)}update(t=0){const e=!(this.image===this.store.image&&!this.needsUpdate);if((e||this.glState.textureUnits[t]!==this.id)&&(this.gl.renderer.activeTexture(t),this.bind()),e){if(this.needsUpdate=!1,this.flipY!==this.glState.flipY&&(this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,this.flipY),this.glState.flipY=this.flipY),this.premultiplyAlpha!==this.glState.premultiplyAlpha&&(this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this.premultiplyAlpha),this.glState.premultiplyAlpha=this.premultiplyAlpha),this.unpackAlignment!==this.glState.unpackAlignment&&(this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT,this.unpackAlignment),this.glState.unpackAlignment=this.unpackAlignment),this.minFilter!==this.state.minFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MIN_FILTER,this.minFilter),this.state.minFilter=this.minFilter),this.magFilter!==this.state.magFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MAG_FILTER,this.magFilter),this.state.magFilter=this.magFilter),this.wrapS!==this.state.wrapS&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_S,this.wrapS),this.state.wrapS=this.wrapS),this.wrapT!==this.state.wrapT&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_T,this.wrapT),this.state.wrapT=this.wrapT),this.anisotropy&&this.anisotropy!==this.state.anisotropy&&(this.gl.texParameterf(this.target,this.gl.renderer.getExtension("EXT_texture_filter_anisotropic").TEXTURE_MAX_ANISOTROPY_EXT,this.anisotropy),this.state.anisotropy=this.anisotropy),this.image){if(this.image.width&&(this.width=this.image.width,this.height=this.image.height),this.target===this.gl.TEXTURE_CUBE_MAP)for(let t=0;t<6;t++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+t,this.level,this.internalFormat,this.format,this.type,this.image[t]);else if(ArrayBuffer.isView(this.image))this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,this.image);else if(this.image.isCompressedTexture)for(let t=0;t<this.image.length;t++)this.gl.compressedTexImage2D(this.target,t,this.internalFormat,this.image[t].width,this.image[t].height,0,this.image[t].data);else this.gl.texImage2D(this.target,this.level,this.internalFormat,this.format,this.type,this.image);this.generateMipmaps&&(this.gl.renderer.isWebgl2||s(this.image.width)&&s(this.image.height)?this.gl.generateMipmap(this.target):(this.generateMipmaps=!1,this.wrapS=this.wrapT=this.gl.CLAMP_TO_EDGE,this.minFilter=this.gl.LINEAR)),this.onUpdate&&this.onUpdate()}else if(this.target===this.gl.TEXTURE_CUBE_MAP)for(let t=0;t<6;t++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,i);else this.width?this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,null):this.gl.texImage2D(this.target,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,i);this.store.image=this.image}}}},"./node_modules/ogl/src/extras/Plane.js":(t,e,r)=>{r.r(e),r.d(e,{Plane:()=>s});var i=r("./node_modules/ogl/src/core/Geometry.js");class s extends i.Geometry{constructor(t,{width:e=1,height:r=1,widthSegments:i=1,heightSegments:a=1,attributes:n={}}={}){const h=i,o=a,l=(h+1)*(o+1),u=h*o*6,d=new Float32Array(3*l),g=new Float32Array(3*l),m=new Float32Array(2*l),c=u>65536?new Uint32Array(u):new Uint16Array(u);s.buildPlane(d,g,m,c,e,r,0,h,o),Object.assign(n,{position:{size:3,data:d},normal:{size:3,data:g},uv:{size:2,data:m},index:{data:c}}),super(t,n)}static buildPlane(t,e,r,i,s,a,n,h,o,l=0,u=1,d=2,g=1,m=-1,c=0,p=0){const f=c,b=s/h,A=a/o;for(let x=0;x<=o;x++){let w=x*A-a/2;for(let a=0;a<=h;a++,c++){let A=a*b-s/2;if(t[3*c+l]=A*g,t[3*c+u]=w*m,t[3*c+d]=n/2,e[3*c+l]=0,e[3*c+u]=0,e[3*c+d]=n>=0?1:-1,r[2*c]=a/h,r[2*c+1]=1-x/o,x===o||a===h)continue;let E=f+a+x*(h+1),v=f+a+(x+1)*(h+1),_=f+a+(x+1)*(h+1)+1,y=f+a+x*(h+1)+1;i[6*p]=E,i[6*p+1]=v,i[6*p+2]=y,i[6*p+3]=v,i[6*p+4]=_,i[6*p+5]=y,p++}}}}},"./node_modules/ogl/src/math/Mat3.js":(t,e,r)=>{r.r(e),r.d(e,{Mat3:()=>s});var i=r("./node_modules/ogl/src/math/functions/Mat3Func.js");class s extends Array{constructor(t=1,e=0,r=0,i=0,s=1,a=0,n=0,h=0,o=1){return super(t,e,r,i,s,a,n,h,o),this}set(t,e,r,s,a,n,h,o,l){return t.length?this.copy(t):(i.set(this,t,e,r,s,a,n,h,o,l),this)}translate(t,e=this){return i.translate(this,e,t),this}rotate(t,e=this){return i.rotate(this,e,t),this}scale(t,e=this){return i.scale(this,e,t),this}multiply(t,e){return e?i.multiply(this,t,e):i.multiply(this,this,t),this}identity(){return i.identity(this),this}copy(t){return i.copy(this,t),this}fromMatrix4(t){return i.fromMat4(this,t),this}fromQuaternion(t){return i.fromQuat(this,t),this}fromBasis(t,e,r){return this.set(t[0],t[1],t[2],e[0],e[1],e[2],r[0],r[1],r[2]),this}inverse(t=this){return i.invert(this,t),this}getNormalMatrix(t){return i.normalFromMat4(this,t),this}}},"./node_modules/ogl/src/math/functions/Mat3Func.js":(t,e,r)=>{r.r(e),r.d(e,{add:()=>b,copy:()=>a,determinant:()=>u,fromMat4:()=>i,fromQuat:()=>s,identity:()=>h,invert:()=>l,multiply:()=>d,multiplyScalar:()=>x,normalFromMat4:()=>p,projection:()=>f,rotate:()=>m,scale:()=>c,set:()=>n,subtract:()=>A,translate:()=>g,transpose:()=>o});function i(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[4],t[4]=e[5],t[5]=e[6],t[6]=e[8],t[7]=e[9],t[8]=e[10],t}function s(t,e){let r=e[0],i=e[1],s=e[2],a=e[3],n=r+r,h=i+i,o=s+s,l=r*n,u=i*n,d=i*h,g=s*n,m=s*h,c=s*o,p=a*n,f=a*h,b=a*o;return t[0]=1-d-c,t[3]=u-b,t[6]=g+f,t[1]=u+b,t[4]=1-l-c,t[7]=m-p,t[2]=g-f,t[5]=m+p,t[8]=1-l-d,t}function a(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function n(t,e,r,i,s,a,n,h,o,l){return t[0]=e,t[1]=r,t[2]=i,t[3]=s,t[4]=a,t[5]=n,t[6]=h,t[7]=o,t[8]=l,t}function h(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function o(t,e){if(t===e){let r=e[1],i=e[2],s=e[5];t[1]=e[3],t[2]=e[6],t[3]=r,t[5]=e[7],t[6]=i,t[7]=s}else t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8];return t}function l(t,e){let r=e[0],i=e[1],s=e[2],a=e[3],n=e[4],h=e[5],o=e[6],l=e[7],u=e[8],d=u*n-h*l,g=-u*a+h*o,m=l*a-n*o,c=r*d+i*g+s*m;return c?(c=1/c,t[0]=d*c,t[1]=(-u*i+s*l)*c,t[2]=(h*i-s*n)*c,t[3]=g*c,t[4]=(u*r-s*o)*c,t[5]=(-h*r+s*a)*c,t[6]=m*c,t[7]=(-l*r+i*o)*c,t[8]=(n*r-i*a)*c,t):null}function u(t){let e=t[0],r=t[1],i=t[2],s=t[3],a=t[4],n=t[5],h=t[6],o=t[7],l=t[8];return e*(l*a-n*o)+r*(-l*s+n*h)+i*(o*s-a*h)}function d(t,e,r){let i=e[0],s=e[1],a=e[2],n=e[3],h=e[4],o=e[5],l=e[6],u=e[7],d=e[8],g=r[0],m=r[1],c=r[2],p=r[3],f=r[4],b=r[5],A=r[6],x=r[7],w=r[8];return t[0]=g*i+m*n+c*l,t[1]=g*s+m*h+c*u,t[2]=g*a+m*o+c*d,t[3]=p*i+f*n+b*l,t[4]=p*s+f*h+b*u,t[5]=p*a+f*o+b*d,t[6]=A*i+x*n+w*l,t[7]=A*s+x*h+w*u,t[8]=A*a+x*o+w*d,t}function g(t,e,r){let i=e[0],s=e[1],a=e[2],n=e[3],h=e[4],o=e[5],l=e[6],u=e[7],d=e[8],g=r[0],m=r[1];return t[0]=i,t[1]=s,t[2]=a,t[3]=n,t[4]=h,t[5]=o,t[6]=g*i+m*n+l,t[7]=g*s+m*h+u,t[8]=g*a+m*o+d,t}function m(t,e,r){let i=e[0],s=e[1],a=e[2],n=e[3],h=e[4],o=e[5],l=e[6],u=e[7],d=e[8],g=Math.sin(r),m=Math.cos(r);return t[0]=m*i+g*n,t[1]=m*s+g*h,t[2]=m*a+g*o,t[3]=m*n-g*i,t[4]=m*h-g*s,t[5]=m*o-g*a,t[6]=l,t[7]=u,t[8]=d,t}function c(t,e,r){let i=r[0],s=r[1];return t[0]=i*e[0],t[1]=i*e[1],t[2]=i*e[2],t[3]=s*e[3],t[4]=s*e[4],t[5]=s*e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function p(t,e){let r=e[0],i=e[1],s=e[2],a=e[3],n=e[4],h=e[5],o=e[6],l=e[7],u=e[8],d=e[9],g=e[10],m=e[11],c=e[12],p=e[13],f=e[14],b=e[15],A=r*h-i*n,x=r*o-s*n,w=r*l-a*n,E=i*o-s*h,v=i*l-a*h,_=s*l-a*o,y=u*p-d*c,M=u*f-g*c,T=u*b-m*c,F=d*f-g*p,S=d*b-m*p,R=g*b-m*f,P=A*R-x*S+w*F+E*T-v*M+_*y;return P?(P=1/P,t[0]=(h*R-o*S+l*F)*P,t[1]=(o*T-n*R-l*M)*P,t[2]=(n*S-h*T+l*y)*P,t[3]=(s*S-i*R-a*F)*P,t[4]=(r*R-s*T+a*M)*P,t[5]=(i*T-r*S-a*y)*P,t[6]=(p*_-f*v+b*E)*P,t[7]=(f*w-c*_-b*x)*P,t[8]=(c*v-p*w+b*A)*P,t):null}function f(t,e,r){return t[0]=2/e,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/r,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t}function b(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t[3]=e[3]+r[3],t[4]=e[4]+r[4],t[5]=e[5]+r[5],t[6]=e[6]+r[6],t[7]=e[7]+r[7],t[8]=e[8]+r[8],t}function A(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t[3]=e[3]-r[3],t[4]=e[4]-r[4],t[5]=e[5]-r[5],t[6]=e[6]-r[6],t[7]=e[7]-r[7],t[8]=e[8]-r[8],t}function x(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*r,t[5]=e[5]*r,t[6]=e[6]*r,t[7]=e[7]*r,t[8]=e[8]*r,t}}},(function(t){t.h=()=>"36524746d25a8313c52a"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,