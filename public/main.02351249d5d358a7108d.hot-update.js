/*! For license information please see main.02351249d5d358a7108d.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatefloema("main",{"./app/components/Canvas/index.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>r});var i=s("./node_modules/ogl/src/core/Renderer.js");class r{constructor(){this.createRenderer()}createRenderer(){this.renderer=new i.Renderer,this.gl=this.renderer.gl,document.body.appendChild(this.gl.canvas)}}},"./app/index.js":(t,e,s)=>{s.r(e);var i=s("./node_modules/lodash/each.js"),r=s.n(i),n=s("./app/components/Canvas/index.js"),a=s("./app/components/Navigation.js"),h=s("./app/components/Preloader.js"),o=s("./app/pages/About/About.js"),l=s("./app/pages/Collections/Collections.js"),d=s("./app/pages/Detail/Detail.js"),u=s("./app/pages/Home/Home.js");new class{constructor(){this.createContent(),this.createNavigation(),this.createPreloader(),this.createCanvas(),this.createPages(),this.addLinkListeners(),this.addEventListeners(),this.update()}createNavigation(){this.navigation=new a.default({template:this.template})}createPreloader(){this.preloader=new h.default,this.preloader.once("completed",this.onPreloaded.bind(this))}createCanvas(){this.canvas=new n.default}createContent(){this.content=document.querySelector(".content"),this.template=this.content.getAttribute("data-template")}createPages(){this.pages={about:new o.default,collections:new l.default,detail:new d.default,home:new u.default},this.page=this.pages[this.template],this.page.create()}onPreloaded(){this.preloader.destroy(),this.onResize(),this.page.show()}async onChange(t){await this.page.hide();const e=await fetch(t);if(200===e.status){const t=await e.text(),s=document.createElement("div");s.innerHTML=t;const i=s.querySelector(".content");this.template=i.getAttribute("data-template"),this.navigation.onChange(this.template),this.content.setAttribute("data-template",this.template),this.content.innerHTML=i.innerHTML,this.page=this.pages[this.template],this.page.create(),this.onResize(),this.page.show(),this.addLinkListeners()}else console.log("Error");console.log(e)}onResize(){this.canvas&&this.canvas.onResize&&this.canvas.onResize(),this.page&&this.page.onResize&&this.page.onResize()}update(){this.canvas&&this.canvas.update&&this.canvas.update(),this.page&&this.page.update&&this.page.update(),this.frame=window.requestAnimationFrame(this.update.bind(this))}addEventListeners(){window.addEventListener("resize",this.onResize.bind(this))}addLinkListeners(){const t=document.querySelectorAll("a");r()(t,(t=>{t.onclick=e=>{e.preventDefault();const{href:s}=t;this.onChange(s)}}))}}},"./node_modules/ogl/src/core/Renderer.js":(t,e,s)=>{s.r(e),s.d(e,{Renderer:()=>n});const i=new(s("./node_modules/ogl/src/math/Vec3.js").Vec3);let r=1;class n{constructor({canvas:t=document.createElement("canvas"),width:e=300,height:s=150,dpr:i=1,alpha:n=!1,depth:a=!0,stencil:h=!1,antialias:o=!1,premultipliedAlpha:l=!1,preserveDrawingBuffer:d=!1,powerPreference:u="default",autoClear:c=!0,webgl:p=2}={}){const g={alpha:n,depth:a,stencil:h,antialias:o,premultipliedAlpha:l,preserveDrawingBuffer:d,powerPreference:u};this.dpr=i,this.alpha=n,this.color=!0,this.depth=a,this.stencil=h,this.premultipliedAlpha=l,this.autoClear=c,this.id=r++,2===p&&(this.gl=t.getContext("webgl2",g)),this.isWebgl2=!!this.gl,this.gl||(this.gl=t.getContext("webgl",g)),this.gl||console.error("unable to create webgl context"),this.gl.renderer=this,this.setSize(e,s),this.state={},this.state.blendFunc={src:this.gl.ONE,dst:this.gl.ZERO},this.state.blendEquation={modeRGB:this.gl.FUNC_ADD},this.state.cullFace=!1,this.state.frontFace=this.gl.CCW,this.state.depthMask=!0,this.state.depthFunc=this.gl.LESS,this.state.premultiplyAlpha=!1,this.state.flipY=!1,this.state.unpackAlignment=4,this.state.framebuffer=null,this.state.viewport={x:0,y:0,width:null,height:null},this.state.textureUnits=[],this.state.activeTextureUnit=0,this.state.boundBuffer=null,this.state.uniformLocations=new Map,this.state.currentProgram=null,this.extensions={},this.isWebgl2?(this.getExtension("EXT_color_buffer_float"),this.getExtension("OES_texture_float_linear")):(this.getExtension("OES_texture_float"),this.getExtension("OES_texture_float_linear"),this.getExtension("OES_texture_half_float"),this.getExtension("OES_texture_half_float_linear"),this.getExtension("OES_element_index_uint"),this.getExtension("OES_standard_derivatives"),this.getExtension("EXT_sRGB"),this.getExtension("WEBGL_depth_texture"),this.getExtension("WEBGL_draw_buffers")),this.getExtension("WEBGL_compressed_texture_astc"),this.getExtension("EXT_texture_compression_bptc"),this.getExtension("WEBGL_compressed_texture_s3tc"),this.getExtension("WEBGL_compressed_texture_etc1"),this.getExtension("WEBGL_compressed_texture_pvrtc"),this.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc"),this.vertexAttribDivisor=this.getExtension("ANGLE_instanced_arrays","vertexAttribDivisor","vertexAttribDivisorANGLE"),this.drawArraysInstanced=this.getExtension("ANGLE_instanced_arrays","drawArraysInstanced","drawArraysInstancedANGLE"),this.drawElementsInstanced=this.getExtension("ANGLE_instanced_arrays","drawElementsInstanced","drawElementsInstancedANGLE"),this.createVertexArray=this.getExtension("OES_vertex_array_object","createVertexArray","createVertexArrayOES"),this.bindVertexArray=this.getExtension("OES_vertex_array_object","bindVertexArray","bindVertexArrayOES"),this.deleteVertexArray=this.getExtension("OES_vertex_array_object","deleteVertexArray","deleteVertexArrayOES"),this.drawBuffers=this.getExtension("WEBGL_draw_buffers","drawBuffers","drawBuffersWEBGL"),this.parameters={},this.parameters.maxTextureUnits=this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS),this.parameters.maxAnisotropy=this.getExtension("EXT_texture_filter_anisotropic")?this.gl.getParameter(this.getExtension("EXT_texture_filter_anisotropic").MAX_TEXTURE_MAX_ANISOTROPY_EXT):0}setSize(t,e){this.width=t,this.height=e,this.gl.canvas.width=t*this.dpr,this.gl.canvas.height=e*this.dpr,this.gl.canvas.style&&Object.assign(this.gl.canvas.style,{width:t+"px",height:e+"px"})}setViewport(t,e,s=0,i=0){this.state.viewport.width===t&&this.state.viewport.height===e||(this.state.viewport.width=t,this.state.viewport.height=e,this.state.viewport.x=s,this.state.viewport.y=i,this.gl.viewport(s,i,t,e))}setScissor(t,e,s=0,i=0){this.gl.scissor(s,i,t,e)}enable(t){!0!==this.state[t]&&(this.gl.enable(t),this.state[t]=!0)}disable(t){!1!==this.state[t]&&(this.gl.disable(t),this.state[t]=!1)}setBlendFunc(t,e,s,i){this.state.blendFunc.src===t&&this.state.blendFunc.dst===e&&this.state.blendFunc.srcAlpha===s&&this.state.blendFunc.dstAlpha===i||(this.state.blendFunc.src=t,this.state.blendFunc.dst=e,this.state.blendFunc.srcAlpha=s,this.state.blendFunc.dstAlpha=i,void 0!==s?this.gl.blendFuncSeparate(t,e,s,i):this.gl.blendFunc(t,e))}setBlendEquation(t,e){t=t||this.gl.FUNC_ADD,this.state.blendEquation.modeRGB===t&&this.state.blendEquation.modeAlpha===e||(this.state.blendEquation.modeRGB=t,this.state.blendEquation.modeAlpha=e,void 0!==e?this.gl.blendEquationSeparate(t,e):this.gl.blendEquation(t))}setCullFace(t){this.state.cullFace!==t&&(this.state.cullFace=t,this.gl.cullFace(t))}setFrontFace(t){this.state.frontFace!==t&&(this.state.frontFace=t,this.gl.frontFace(t))}setDepthMask(t){this.state.depthMask!==t&&(this.state.depthMask=t,this.gl.depthMask(t))}setDepthFunc(t){this.state.depthFunc!==t&&(this.state.depthFunc=t,this.gl.depthFunc(t))}activeTexture(t){this.state.activeTextureUnit!==t&&(this.state.activeTextureUnit=t,this.gl.activeTexture(this.gl.TEXTURE0+t))}bindFramebuffer({target:t=this.gl.FRAMEBUFFER,buffer:e=null}={}){this.state.framebuffer!==e&&(this.state.framebuffer=e,this.gl.bindFramebuffer(t,e))}getExtension(t,e,s){return e&&this.gl[e]?this.gl[e].bind(this.gl):(this.extensions[t]||(this.extensions[t]=this.gl.getExtension(t)),e?this.extensions[t]?this.extensions[t][s].bind(this.extensions[t]):null:this.extensions[t])}sortOpaque(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program.id!==e.program.id?t.program.id-e.program.id:t.zDepth!==e.zDepth?t.zDepth-e.zDepth:e.id-t.id}sortTransparent(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.zDepth!==e.zDepth?e.zDepth-t.zDepth:e.id-t.id}sortUI(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program.id!==e.program.id?t.program.id-e.program.id:e.id-t.id}getRenderList({scene:t,camera:e,frustumCull:s,sort:r}){let n=[];if(e&&s&&e.updateFrustum(),t.traverse((t=>{if(!t.visible)return!0;t.draw&&(s&&t.frustumCulled&&e&&!e.frustumIntersectsMesh(t)||n.push(t))})),r){const t=[],s=[],r=[];n.forEach((n=>{n.program.transparent?n.program.depthTest?s.push(n):r.push(n):t.push(n),n.zDepth=0,0===n.renderOrder&&n.program.depthTest&&e&&(n.worldMatrix.getTranslation(i),i.applyMatrix4(e.projectionViewMatrix),n.zDepth=i.z)})),t.sort(this.sortOpaque),s.sort(this.sortTransparent),r.sort(this.sortUI),n=t.concat(s,r)}return n}render({scene:t,camera:e,target:s=null,update:i=!0,sort:r=!0,frustumCull:n=!0,clear:a}){null===s?(this.bindFramebuffer(),this.setViewport(this.width*this.dpr,this.height*this.dpr)):(this.bindFramebuffer(s),this.setViewport(s.width,s.height)),(a||this.autoClear&&!1!==a)&&(!this.depth||s&&!s.depth||(this.enable(this.gl.DEPTH_TEST),this.setDepthMask(!0)),this.gl.clear((this.color?this.gl.COLOR_BUFFER_BIT:0)|(this.depth?this.gl.DEPTH_BUFFER_BIT:0)|(this.stencil?this.gl.STENCIL_BUFFER_BIT:0))),i&&t.updateMatrixWorld(),e&&e.updateMatrixWorld();this.getRenderList({scene:t,camera:e,frustumCull:n,sort:r}).forEach((t=>{t.draw({camera:e})}))}}},"./node_modules/ogl/src/math/Vec3.js":(t,e,s)=>{s.r(e),s.d(e,{Vec3:()=>r});var i=s("./node_modules/ogl/src/math/functions/Vec3Func.js");class r extends Array{constructor(t=0,e=t,s=t){return super(t,e,s),this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(t){this[0]=t}set y(t){this[1]=t}set z(t){this[2]=t}set(t,e=t,s=t){return t.length?this.copy(t):(i.set(this,t,e,s),this)}copy(t){return i.copy(this,t),this}add(t,e){return e?i.add(this,t,e):i.add(this,this,t),this}sub(t,e){return e?i.subtract(this,t,e):i.subtract(this,this,t),this}multiply(t){return t.length?i.multiply(this,this,t):i.scale(this,this,t),this}divide(t){return t.length?i.divide(this,this,t):i.scale(this,this,1/t),this}inverse(t=this){return i.inverse(this,t),this}len(){return i.length(this)}distance(t){return t?i.distance(this,t):i.length(this)}squaredLen(){return i.squaredLength(this)}squaredDistance(t){return t?i.squaredDistance(this,t):i.squaredLength(this)}negate(t=this){return i.negate(this,t),this}cross(t,e){return e?i.cross(this,t,e):i.cross(this,this,t),this}scale(t){return i.scale(this,this,t),this}normalize(){return i.normalize(this,this),this}dot(t){return i.dot(this,t)}equals(t){return i.exactEquals(this,t)}applyMatrix3(t){return i.transformMat3(this,this,t),this}applyMatrix4(t){return i.transformMat4(this,this,t),this}scaleRotateMatrix4(t){return i.scaleRotateMat4(this,this,t),this}applyQuaternion(t){return i.transformQuat(this,this,t),this}angle(t){return i.angle(this,t)}lerp(t,e){return i.lerp(this,this,t,e),this}clone(){return new r(this[0],this[1],this[2])}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t}transformDirection(t){const e=this[0],s=this[1],i=this[2];return this[0]=t[0]*e+t[4]*s+t[8]*i,this[1]=t[1]*e+t[5]*s+t[9]*i,this[2]=t[2]*e+t[6]*s+t[10]*i,this.normalize()}}},"./node_modules/ogl/src/math/functions/Vec3Func.js":(t,e,s)=>{s.r(e),s.d(e,{add:()=>a,angle:()=>F,copy:()=>r,cross:()=>x,distance:()=>u,divide:()=>l,dot:()=>E,exactEquals:()=>y,inverse:()=>f,length:()=>i,lerp:()=>_,multiply:()=>o,negate:()=>g,normalize:()=>m,scale:()=>d,scaleRotateMat4:()=>v,set:()=>n,squaredDistance:()=>c,squaredLength:()=>p,subtract:()=>h,transformMat3:()=>w,transformMat4:()=>b,transformQuat:()=>A});function i(t){let e=t[0],s=t[1],i=t[2];return Math.sqrt(e*e+s*s+i*i)}function r(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function n(t,e,s,i){return t[0]=e,t[1]=s,t[2]=i,t}function a(t,e,s){return t[0]=e[0]+s[0],t[1]=e[1]+s[1],t[2]=e[2]+s[2],t}function h(t,e,s){return t[0]=e[0]-s[0],t[1]=e[1]-s[1],t[2]=e[2]-s[2],t}function o(t,e,s){return t[0]=e[0]*s[0],t[1]=e[1]*s[1],t[2]=e[2]*s[2],t}function l(t,e,s){return t[0]=e[0]/s[0],t[1]=e[1]/s[1],t[2]=e[2]/s[2],t}function d(t,e,s){return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t}function u(t,e){let s=e[0]-t[0],i=e[1]-t[1],r=e[2]-t[2];return Math.sqrt(s*s+i*i+r*r)}function c(t,e){let s=e[0]-t[0],i=e[1]-t[1],r=e[2]-t[2];return s*s+i*i+r*r}function p(t){let e=t[0],s=t[1],i=t[2];return e*e+s*s+i*i}function g(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t}function f(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t}function m(t,e){let s=e[0],i=e[1],r=e[2],n=s*s+i*i+r*r;return n>0&&(n=1/Math.sqrt(n)),t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t}function E(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function x(t,e,s){let i=e[0],r=e[1],n=e[2],a=s[0],h=s[1],o=s[2];return t[0]=r*o-n*h,t[1]=n*a-i*o,t[2]=i*h-r*a,t}function _(t,e,s,i){let r=e[0],n=e[1],a=e[2];return t[0]=r+i*(s[0]-r),t[1]=n+i*(s[1]-n),t[2]=a+i*(s[2]-a),t}function b(t,e,s){let i=e[0],r=e[1],n=e[2],a=s[3]*i+s[7]*r+s[11]*n+s[15];return a=a||1,t[0]=(s[0]*i+s[4]*r+s[8]*n+s[12])/a,t[1]=(s[1]*i+s[5]*r+s[9]*n+s[13])/a,t[2]=(s[2]*i+s[6]*r+s[10]*n+s[14])/a,t}function v(t,e,s){let i=e[0],r=e[1],n=e[2],a=s[3]*i+s[7]*r+s[11]*n+s[15];return a=a||1,t[0]=(s[0]*i+s[4]*r+s[8]*n)/a,t[1]=(s[1]*i+s[5]*r+s[9]*n)/a,t[2]=(s[2]*i+s[6]*r+s[10]*n)/a,t}function w(t,e,s){let i=e[0],r=e[1],n=e[2];return t[0]=i*s[0]+r*s[3]+n*s[6],t[1]=i*s[1]+r*s[4]+n*s[7],t[2]=i*s[2]+r*s[5]+n*s[8],t}function A(t,e,s){let i=e[0],r=e[1],n=e[2],a=s[0],h=s[1],o=s[2],l=h*n-o*r,d=o*i-a*n,u=a*r-h*i,c=h*u-o*d,p=o*l-a*u,g=a*d-h*l,f=2*s[3];return l*=f,d*=f,u*=f,c*=2,p*=2,g*=2,t[0]=i+l+c,t[1]=r+d+p,t[2]=n+u+g,t}const F=function(){const t=[0,0,0],e=[0,0,0];return function(s,i){r(t,s),r(e,i),m(t,t),m(e,e);let n=E(t,e);return n>1?0:n<-1?Math.PI:Math.acos(n)}}();function y(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]}}},(function(t){t.h=()=>"dadb02a85ac3e702f7c4"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,