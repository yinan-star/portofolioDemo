/*! For license information please see main.c8f785fe1188ed278987.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatefloema("main",{"./app/components/Canvas/Transition.js":(e,s,t)=>{t.r(s),t.d(s,{default:()=>r});var o=t("./node_modules/gsap/index.js"),i=t("./node_modules/ogl/src/extras/Plane.js"),a=t("./node_modules/ogl/src/core/Program.js"),l=t("./node_modules/ogl/src/core/Mesh.js"),n=t("./app/shaders/plane-fragment.glsl"),h=t("./app/shaders/plane-vertex.glsl");const r=class{constructor({collections:e,gl:s,scene:t,sizes:o,url:a}){this.collections=e,this.gl=s,this.scene=t,this.sizes=o,this.url=a,this.geometry=new i.Plane(this.gl)}createProgram(e){this.program=new a.Program(this.gl,{fragment:n.default,vertex:h.default,uniforms:{uAlpha:{value:1},tMap:{value:e}}})}createMesh(e){this.mesh=new l.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.scale.x=e.scale.x,this.mesh.scale.y=e.scale.y,this.mesh.scale.z=e.scale.z,this.mesh.position.x=e.position.x,this.mesh.position.y=e.position.y,this.mesh.position.z=e.position.z+.01,this.mesh.setParent(this.scene)}setElement(e){if(console.log(e.id),"collections"===e.id){const{index:s,medias:t}=e,o=t[s];console.log(o,o.texture),this.createProgram(o.texture),this.createMesh(o.mesh)}else this.createProgram(e.texture),this.createMesh(e)}animate(e,s,t){"detail"===this.transition&&(o.default.to(this.mesh.scale,{duration:1.5,ease:"expo.inOut",x:e.mesh.scale.x,y:e.mesh.scale.y,z:e.mesh.scale.z}),o.default.to(this.mesh.position,{duration:1.5,ease:"expo.inOut",onComplete:s,x:e.mesh.position.x,y:e.mesh.position.y,z:e.mesh.position.z}))}}}},(function(e){e.h=()=>"f88a43edc4ee3a3fddd2"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5jOGY3ODVmZTExODhlZDI3ODk4Ny5ob3QtdXBkYXRlLmpzIiwibWFwcGluZ3MiOiI7Z1lBT0EsY0FDRUEsV0FBQUEsRUFBWSxZQUFFQyxFQUFXLEdBQUVDLEVBQUUsTUFBRUMsRUFBSyxNQUFFQyxFQUFLLElBQUVDLElBQzNDQyxLQUFLTCxZQUFjQSxFQUNuQkssS0FBS0osR0FBS0EsRUFDVkksS0FBS0gsTUFBUUEsRUFDYkcsS0FBS0YsTUFBUUEsRUFDYkUsS0FBS0QsSUFBTUEsRUFFWEMsS0FBS0MsU0FBVyxJQUFJQyxFQUFBQSxNQUFNRixLQUFLSixHQUdqQyxDQUdBTyxhQUFBQSxDQUFjQyxHQUNaSixLQUFLSyxRQUFVLElBQUlDLEVBQUFBLFFBQVFOLEtBQUtKLEdBQUksQ0FDbENXLFNBQVEsVUFDUkMsT0FBTSxVQUNOQyxTQUFVLENBQ1JDLE9BQVEsQ0FBRUMsTUFBTyxHQUNqQkMsS0FBTSxDQUFFRCxNQUFPUCxLQUdyQixDQUVBUyxVQUFBQSxDQUFXQyxHQUNUZCxLQUFLYyxLQUFPLElBQUlDLEVBQUFBLEtBQUtmLEtBQUtKLEdBQUksQ0FDNUJLLFNBQVVELEtBQUtDLFNBQ2ZJLFFBQVNMLEtBQUtLLFVBR2hCTCxLQUFLYyxLQUFLRSxNQUFNQyxFQUFJSCxFQUFLRSxNQUFNQyxFQUMvQmpCLEtBQUtjLEtBQUtFLE1BQU1FLEVBQUlKLEVBQUtFLE1BQU1FLEVBQy9CbEIsS0FBS2MsS0FBS0UsTUFBTUcsRUFBSUwsRUFBS0UsTUFBTUcsRUFFL0JuQixLQUFLYyxLQUFLTSxTQUFTSCxFQUFJSCxFQUFLTSxTQUFTSCxFQUNyQ2pCLEtBQUtjLEtBQUtNLFNBQVNGLEVBQUlKLEVBQUtNLFNBQVNGLEVBQ3JDbEIsS0FBS2MsS0FBS00sU0FBU0QsRUFBSUwsRUFBS00sU0FBU0QsRUFBSSxJQUd6Q25CLEtBQUtjLEtBQUtPLFVBQVVyQixLQUFLSCxNQUczQixDQUdBeUIsVUFBQUEsQ0FBV0MsR0FHVCxHQUZBQyxRQUFRQyxJQUFJRixFQUFRRyxJQUVELGdCQUFmSCxFQUFRRyxHQUFzQixDQUNoQyxNQUFNLE1BQUVDLEVBQUssT0FBRUMsR0FBV0wsRUFDcEJNLEVBQVFELEVBQU9ELEdBRXJCSCxRQUFRQyxJQUFJSSxFQUFPQSxFQUFNekIsU0FFekJKLEtBQUtHLGNBQWMwQixFQUFNekIsU0FDekJKLEtBQUthLFdBQVdnQixFQUFNZixLQUN4QixNQUNFZCxLQUFLRyxjQUFjb0IsRUFBUW5CLFNBQzNCSixLQUFLYSxXQUFXVSxFQUlwQixDQUVBTyxPQUFBQSxDQUFRUCxFQUFTUSxFQUFZQyxHQUVILFdBQXBCaEMsS0FBS2lDLGFBQ1BDLEVBQUFBLFFBQUtDLEdBQUduQyxLQUFLYyxLQUFLRSxNQUFPLENBQ3ZCb0IsU0FBVSxJQUNWQyxLQUFNLGFBQ05wQixFQUFHTSxFQUFRVCxLQUFLRSxNQUFNQyxFQUN0QkMsRUFBR0ssRUFBUVQsS0FBS0UsTUFBTUUsRUFDdEJDLEVBQUdJLEVBQVFULEtBQUtFLE1BQU1HLElBR3hCZSxFQUFBQSxRQUFLQyxHQUFHbkMsS0FBS2MsS0FBS00sU0FBVSxDQUMxQmdCLFNBQVUsSUFDVkMsS0FBTSxhQUNOTixhQUNBZCxFQUFHTSxFQUFRVCxLQUFLTSxTQUFTSCxFQUN6QkMsRUFBR0ssRUFBUVQsS0FBS00sU0FBU0YsRUFDekJDLEVBQUdJLEVBQVFULEtBQUtNLFNBQVNELElBSS9CLGtCQzdGRm1CLEVBQW9CQyxFQUFJLElBQU0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvY29tcG9uZW50cy9DYW52YXMvVHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvd2VicGFjay9ydW50aW1lL2dldEZ1bGxIYXNoIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIC8v5aSE55CG54Wn54mHXG5pbXBvcnQgR1NBUCBmcm9tICdnc2FwJ1xuaW1wb3J0IHsgTWVzaCwgUGxhbmUsIFByb2dyYW0sIFRleHR1cmUgfSBmcm9tICdvZ2wnO1xuXG5pbXBvcnQgZnJhZ21lbnQgZnJvbSAnc2hhZGVycy9wbGFuZS1mcmFnbWVudC5nbHNsJztcbmltcG9ydCB2ZXJ0ZXggZnJvbSAnc2hhZGVycy9wbGFuZS12ZXJ0ZXguZ2xzbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoeyBjb2xsZWN0aW9ucywgZ2wsIHNjZW5lLCBzaXplcywgdXJsIH0pIHtcbiAgICB0aGlzLmNvbGxlY3Rpb25zID0gY29sbGVjdGlvbnM7XG4gICAgdGhpcy5nbCA9IGdsO1xuICAgIHRoaXMuc2NlbmUgPSBzY2VuZTtcbiAgICB0aGlzLnNpemVzID0gc2l6ZXM7XG4gICAgdGhpcy51cmwgPSB1cmw7XG5cbiAgICB0aGlzLmdlb21ldHJ5ID0gbmV3IFBsYW5lKHRoaXMuZ2wpXG4gICAgLy8g5LiK6Z2i55qEZWxtZW506YO95piv6ZyA6KaB5aSN55So55qE5omA5Lul5Zyo6L+Z6YeM5Yid5aeL5YyWXG5cbiAgfVxuXG4gIC8vIOeEtuWQjuWwhumAieWlveeahOeFp+eJh+S8oOe7mXByb2dyYW3lpITnkIbotLTlm75cbiAgY3JlYXRlUHJvZ3JhbSh0ZXh0dXJlKSB7XG4gICAgdGhpcy5wcm9ncmFtID0gbmV3IFByb2dyYW0odGhpcy5nbCwge1xuICAgICAgZnJhZ21lbnQsXG4gICAgICB2ZXJ0ZXgsXG4gICAgICB1bmlmb3Jtczoge1xuICAgICAgICB1QWxwaGE6IHsgdmFsdWU6IDEgfSxcbiAgICAgICAgdE1hcDogeyB2YWx1ZTogdGV4dHVyZSB9XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGNyZWF0ZU1lc2gobWVzaCkge1xuICAgIHRoaXMubWVzaCA9IG5ldyBNZXNoKHRoaXMuZ2wsIHtcbiAgICAgIGdlb21ldHJ5OiB0aGlzLmdlb21ldHJ5LFxuICAgICAgcHJvZ3JhbTogdGhpcy5wcm9ncmFtLFxuICAgIH0pO1xuXG4gICAgdGhpcy5tZXNoLnNjYWxlLnggPSBtZXNoLnNjYWxlLng7XG4gICAgdGhpcy5tZXNoLnNjYWxlLnkgPSBtZXNoLnNjYWxlLnk7XG4gICAgdGhpcy5tZXNoLnNjYWxlLnogPSBtZXNoLnNjYWxlLno7XG5cbiAgICB0aGlzLm1lc2gucG9zaXRpb24ueCA9IG1lc2gucG9zaXRpb24ueDtcbiAgICB0aGlzLm1lc2gucG9zaXRpb24ueSA9IG1lc2gucG9zaXRpb24ueTtcbiAgICB0aGlzLm1lc2gucG9zaXRpb24ueiA9IG1lc2gucG9zaXRpb24ueiArIDAuMDE7XG5cblxuICAgIHRoaXMubWVzaC5zZXRQYXJlbnQodGhpcy5zY2VuZSk7XG4gICAgLy8gbWVzaOaYr3NjZW5l55qE5a2Q5YWD57Sg44CCXG5cbiAgfVxuXG4gIC8vIEVsZW1lbnRcbiAgc2V0RWxlbWVudChlbGVtZW50KSB7XG4gICAgY29uc29sZS5sb2coZWxlbWVudC5pZClcblxuICAgIGlmIChlbGVtZW50LmlkID09PSAnY29sbGVjdGlvbnMnKSB7XG4gICAgICBjb25zdCB7IGluZGV4LCBtZWRpYXMgfSA9IGVsZW1lbnRcbiAgICAgIGNvbnN0IG1lZGlhID0gbWVkaWFzW2luZGV4XVxuXG4gICAgICBjb25zb2xlLmxvZyhtZWRpYSwgbWVkaWEudGV4dHVyZSlcblxuICAgICAgdGhpcy5jcmVhdGVQcm9ncmFtKG1lZGlhLnRleHR1cmUpXG4gICAgICB0aGlzLmNyZWF0ZU1lc2gobWVkaWEubWVzaClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jcmVhdGVQcm9ncmFtKGVsZW1lbnQudGV4dHVyZSlcbiAgICAgIHRoaXMuY3JlYXRlTWVzaChlbGVtZW50KVxuICAgIH1cblxuXG4gIH1cbiAgLy8gQW5pbWF0aW9ucy5cbiAgYW5pbWF0ZShlbGVtZW50LCBvbkNvbXBsZXRlLCBmbGFnKSB7XG4gICAgLy8g6K6pZmFraW5nIGltYWdl5Yqo6LW35p2lbWF0Y2jljp/mnInnmoRpbWFnZSzkvYbmmK/ov5nkuKrov4fnqIvpnIDopoHnrYnlh6Dnp5Is5Zug5Li65ZyoY29sbGVjdGlvbnPnmoRpbmRleOmHjOiuvue9ruS6hmJvdW5kc+mcgOimgeetieWHoOenki7ov5nkuKrnrYnlh6Dnp5LlnKhDYW52YXPnmoRpbmRleOaWh+S7tumHjOiuvue9rkdTQVAuZGVsYXllZENhbGxcbiAgICBpZiAodGhpcy50cmFuc2l0aW9uID09PSAnZGV0YWlsJykge1xuICAgICAgR1NBUC50byh0aGlzLm1lc2guc2NhbGUsIHtcbiAgICAgICAgZHVyYXRpb246IDEuNSxcbiAgICAgICAgZWFzZTogJ2V4cG8uaW5PdXQnLFxuICAgICAgICB4OiBlbGVtZW50Lm1lc2guc2NhbGUueCxcbiAgICAgICAgeTogZWxlbWVudC5tZXNoLnNjYWxlLnksXG4gICAgICAgIHo6IGVsZW1lbnQubWVzaC5zY2FsZS56LFxuXG4gICAgICB9KVxuICAgICAgR1NBUC50byh0aGlzLm1lc2gucG9zaXRpb24sIHtcbiAgICAgICAgZHVyYXRpb246IDEuNSxcbiAgICAgICAgZWFzZTogJ2V4cG8uaW5PdXQnLFxuICAgICAgICBvbkNvbXBsZXRlLFxuICAgICAgICB4OiBlbGVtZW50Lm1lc2gucG9zaXRpb24ueCxcbiAgICAgICAgeTogZWxlbWVudC5tZXNoLnBvc2l0aW9uLnksXG4gICAgICAgIHo6IGVsZW1lbnQubWVzaC5wb3NpdGlvbi56LFxuICAgICAgfSlcbiAgICB9XG5cbiAgfVxuXG5cblxuXG5cbn0iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmggPSAoKSA9PiAoXCJmODhhNDNlZGM0ZWUzYTNmZGRkMlwiKSJdLCJuYW1lcyI6WyJjb25zdHJ1Y3RvciIsImNvbGxlY3Rpb25zIiwiZ2wiLCJzY2VuZSIsInNpemVzIiwidXJsIiwidGhpcyIsImdlb21ldHJ5IiwiUGxhbmUiLCJjcmVhdGVQcm9ncmFtIiwidGV4dHVyZSIsInByb2dyYW0iLCJQcm9ncmFtIiwiZnJhZ21lbnQiLCJ2ZXJ0ZXgiLCJ1bmlmb3JtcyIsInVBbHBoYSIsInZhbHVlIiwidE1hcCIsImNyZWF0ZU1lc2giLCJtZXNoIiwiTWVzaCIsInNjYWxlIiwieCIsInkiLCJ6IiwicG9zaXRpb24iLCJzZXRQYXJlbnQiLCJzZXRFbGVtZW50IiwiZWxlbWVudCIsImNvbnNvbGUiLCJsb2ciLCJpZCIsImluZGV4IiwibWVkaWFzIiwibWVkaWEiLCJhbmltYXRlIiwib25Db21wbGV0ZSIsImZsYWciLCJ0cmFuc2l0aW9uIiwiR1NBUCIsInRvIiwiZHVyYXRpb24iLCJlYXNlIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImgiXSwic291cmNlUm9vdCI6IiJ9