/*! For license information please see main.4a3f370df29fb779fc8f.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatefloema("main",{"./app/components/Canvas/Transition.js":(e,s,t)=>{t.r(s),t.d(s,{default:()=>h});var i=t("./node_modules/gsap/index.js"),o=t("./node_modules/ogl/src/extras/Plane.js"),a=t("./node_modules/ogl/src/core/Program.js"),n=t("./node_modules/ogl/src/core/Mesh.js"),l=t("./app/shaders/plane-fragment.glsl"),r=t("./app/shaders/plane-vertex.glsl");const h=class{constructor({collections:e,gl:s,scene:t,sizes:i,url:a}){this.collections=e,this.gl=s,this.scene=t,this.sizes=i,this.url=a,this.geometry=new o.Plane(this.gl)}createProgram(e){this.program=new a.Program(this.gl,{fragment:l.default,vertex:r.default,uniforms:{uAlpha:{value:1},tMap:{value:e}}})}createMesh(e){this.mesh=new n.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.scale.x=e.scale.x,this.mesh.scale.y=e.scale.y,this.mesh.scale.z=e.scale.z,this.mesh.position.x=e.position.x,this.mesh.position.y=e.position.y,this.mesh.position.z=e.position.z+.01,this.mesh.setParent(this.scene)}setElement(e){if(console.log(e.id),"collections"===e.id){const{index:s,medias:t}=e,i=t[s];this.createProgram(i.texture),this.createMesh(i.mesh),this.transition="detail"}else this.createProgram(e.texture),this.createMesh(e.mesh),this.transition="collections"}animate(e,s){if("detail"===this.transition){const t=i.default.timeline({delay:.5,onComplete:s});t.to(this.mesh.scale,{duration:1.5,ease:"expo.inOut",x:e.scale.x,y:e.scale.y,z:e.scale.z},0),t.to(this.mesh.position,{duration:1.5,ease:"expo.inOut",x:e.position.x,y:e.position.y,z:e.position.z},0)}else{const t=i.default.timeline({delay:.5,onComplete:s});t.to(this.mesh.scale,{duration:1.5,ease:"expo.inOut",x:e.scale.x,y:e.scale.y,z:e.scale.z},0),t.to(this.mesh.position,{duration:1.5,ease:"expo.inOut",x:e.position.x,y:e.position.y,z:e.position.z},0)}}}}},(function(e){e.h=()=>"2b56ee85ef813bca6670"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFTSCxFQUNwQkMsRUFBR0ssRUFBUUgsU0FBU0YsRUFDcEJDLEVBQUdJLEVBQVFILFNBQVNELEdBQ25CLEVBQ0wsQ0FFRixrQkN0SEZvQixFQUFvQkMsRUFBSSxJQUFNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL2NvbXBvbmVudHMvQ2FudmFzL1RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vZmxvZW1hL3dlYnBhY2svcnVudGltZS9nZXRGdWxsSGFzaCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAvL+WkhOeQhueFp+eJh1xuaW1wb3J0IEdTQVAgZnJvbSAnZ3NhcCdcbmltcG9ydCB7IE1lc2gsIFBsYW5lLCBQcm9ncmFtLCBUZXh0dXJlIH0gZnJvbSAnb2dsJztcblxuaW1wb3J0IGZyYWdtZW50IGZyb20gJ3NoYWRlcnMvcGxhbmUtZnJhZ21lbnQuZ2xzbCc7XG5pbXBvcnQgdmVydGV4IGZyb20gJ3NoYWRlcnMvcGxhbmUtdmVydGV4Lmdsc2wnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKHsgY29sbGVjdGlvbnMsIGdsLCBzY2VuZSwgc2l6ZXMsIHVybCB9KSB7XG4gICAgdGhpcy5jb2xsZWN0aW9ucyA9IGNvbGxlY3Rpb25zO1xuICAgIHRoaXMuZ2wgPSBnbDtcbiAgICB0aGlzLnNjZW5lID0gc2NlbmU7XG4gICAgdGhpcy5zaXplcyA9IHNpemVzO1xuICAgIHRoaXMudXJsID0gdXJsO1xuXG4gICAgdGhpcy5nZW9tZXRyeSA9IG5ldyBQbGFuZSh0aGlzLmdsKVxuICAgIC8vIOS4iumdoueahGVsbWVudOmDveaYr+mcgOimgeWkjeeUqOeahOaJgOS7peWcqOi/memHjOWIneWni+WMllxuXG4gIH1cblxuICAvLyDnhLblkI7lsIbpgInlpb3nmoTnhafniYfkvKDnu5lwcm9ncmFt5aSE55CG6LS05Zu+XG4gIGNyZWF0ZVByb2dyYW0odGV4dHVyZSkge1xuICAgIHRoaXMucHJvZ3JhbSA9IG5ldyBQcm9ncmFtKHRoaXMuZ2wsIHtcbiAgICAgIGZyYWdtZW50LFxuICAgICAgdmVydGV4LFxuICAgICAgdW5pZm9ybXM6IHtcbiAgICAgICAgdUFscGhhOiB7IHZhbHVlOiAxIH0sXG4gICAgICAgIHRNYXA6IHsgdmFsdWU6IHRleHR1cmUgfVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBjcmVhdGVNZXNoKG1lc2gpIHtcbiAgICB0aGlzLm1lc2ggPSBuZXcgTWVzaCh0aGlzLmdsLCB7XG4gICAgICBnZW9tZXRyeTogdGhpcy5nZW9tZXRyeSxcbiAgICAgIHByb2dyYW06IHRoaXMucHJvZ3JhbSxcbiAgICB9KTtcblxuICAgIHRoaXMubWVzaC5zY2FsZS54ID0gbWVzaC5zY2FsZS54O1xuICAgIHRoaXMubWVzaC5zY2FsZS55ID0gbWVzaC5zY2FsZS55O1xuICAgIHRoaXMubWVzaC5zY2FsZS56ID0gbWVzaC5zY2FsZS56O1xuXG4gICAgdGhpcy5tZXNoLnBvc2l0aW9uLnggPSBtZXNoLnBvc2l0aW9uLng7XG4gICAgdGhpcy5tZXNoLnBvc2l0aW9uLnkgPSBtZXNoLnBvc2l0aW9uLnk7XG4gICAgdGhpcy5tZXNoLnBvc2l0aW9uLnogPSBtZXNoLnBvc2l0aW9uLnogKyAwLjAxO1xuXG5cbiAgICB0aGlzLm1lc2guc2V0UGFyZW50KHRoaXMuc2NlbmUpO1xuICAgIC8vIG1lc2jmmK9zY2VuZeeahOWtkOWFg+e0oOOAglxuXG4gIH1cblxuICAvLyBFbGVtZW50XG4gIHNldEVsZW1lbnQoZWxlbWVudCkge1xuICAgIGNvbnNvbGUubG9nKGVsZW1lbnQuaWQpXG5cbiAgICBpZiAoZWxlbWVudC5pZCA9PT0gJ2NvbGxlY3Rpb25zJykge1xuICAgICAgY29uc3QgeyBpbmRleCwgbWVkaWFzIH0gPSBlbGVtZW50XG4gICAgICBjb25zdCBtZWRpYSA9IG1lZGlhc1tpbmRleF1cblxuICAgICAgdGhpcy5jcmVhdGVQcm9ncmFtKG1lZGlhLnRleHR1cmUpXG4gICAgICB0aGlzLmNyZWF0ZU1lc2gobWVkaWEubWVzaClcblxuICAgICAgdGhpcy50cmFuc2l0aW9uID0nZGV0YWlsJ1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNyZWF0ZVByb2dyYW0oZWxlbWVudC50ZXh0dXJlKVxuICAgICAgdGhpcy5jcmVhdGVNZXNoKGVsZW1lbnQubWVzaClcblxuICAgICAgdGhpcy50cmFuc2l0aW9uID0nY29sbGVjdGlvbnMnXG4gICAgfVxuXG5cbiAgfVxuICAvLyBBbmltYXRpb25zLlxuICBhbmltYXRlKGVsZW1lbnQsIG9uQ29tcGxldGUpIHtcbiAgICAvLyDorqlmYWtpbmcgaW1hZ2XliqjotbfmnaVtYXRjaOWOn+acieeahGltYWdlLOS9huaYr+i/meS4qui/h+eoi+mcgOimgeetieWHoOenkizlm6DkuLrlnKhjb2xsZWN0aW9uc+eahGluZGV46YeM6K6+572u5LqGYm91bmRz6ZyA6KaB562J5Yeg56eSLui/meS4quetieWHoOenkuWcqENhbnZhc+eahGluZGV45paH5Lu26YeM6K6+572uR1NBUC5kZWxheWVkQ2FsbFxuICAgIGlmICh0aGlzLnRyYW5zaXRpb24gPT09ICdkZXRhaWwnKSB7XG4gICAgICBjb25zdCB0aW1lbGluZSA9IEdTQVAudGltZWxpbmUoe1xuICAgICAgICBkZWxheTogMC41LFxuICAgICAgICBvbkNvbXBsZXRlXG4gICAgICB9KVxuICAgICAgdGltZWxpbmUudG8odGhpcy5tZXNoLnNjYWxlLCB7XG4gICAgICAgIGR1cmF0aW9uOiAxLjUsXG4gICAgICAgIGVhc2U6ICdleHBvLmluT3V0JyxcbiAgICAgICAgeDogZWxlbWVudC5zY2FsZS54LFxuICAgICAgICB5OiBlbGVtZW50LnNjYWxlLnksXG4gICAgICAgIHo6IGVsZW1lbnQuc2NhbGUueixcblxuICAgICAgfSwgMClcbiAgICAgIHRpbWVsaW5lLnRvKHRoaXMubWVzaC5wb3NpdGlvbiwge1xuICAgICAgICBkdXJhdGlvbjogMS41LFxuICAgICAgICBlYXNlOiAnZXhwby5pbk91dCcsXG4gICAgICAgIHg6IGVsZW1lbnQucG9zaXRpb24ueCxcbiAgICAgICAgeTogZWxlbWVudC5wb3NpdGlvbi55LFxuICAgICAgICB6OiBlbGVtZW50LnBvc2l0aW9uLnosXG4gICAgICB9LCAwKVxuICAgIH1lbHNle1xuICAgICAgY29uc3QgdGltZWxpbmUgPSBHU0FQLnRpbWVsaW5lKHtcbiAgICAgICAgZGVsYXk6IDAuNSxcbiAgICAgICAgb25Db21wbGV0ZVxuICAgICAgfSlcbiAgICAgIHRpbWVsaW5lLnRvKHRoaXMubWVzaC5zY2FsZSwge1xuICAgICAgICBkdXJhdGlvbjogMS41LFxuICAgICAgICBlYXNlOiAnZXhwby5pbk91dCcsXG4gICAgICAgIHg6IGVsZW1lbnQuc2NhbGUueCxcbiAgICAgICAgeTogZWxlbWVudC5zY2FsZS55LFxuICAgICAgICB6OiBlbGVtZW50LnNjYWxlLnosXG5cbiAgICAgIH0sIDApXG4gICAgICB0aW1lbGluZS50byh0aGlzLm1lc2gucG9zaXRpb24sIHtcbiAgICAgICAgZHVyYXRpb246IDEuNSxcbiAgICAgICAgZWFzZTogJ2V4cG8uaW5PdXQnLFxuICAgICAgICB4OiBlbGVtZW50LnBvc2l0aW9uLngsXG4gICAgICAgIHk6IGVsZW1lbnQucG9zaXRpb24ueSxcbiAgICAgICAgejogZWxlbWVudC5wb3NpdGlvbi56LFxuICAgICAgfSwgMClcbiAgICB9XG5cbiAgfVxuXG5cblxuXG5cbn0iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmggPSAoKSA9PiAoXCIyYjU2ZWU4NWVmODEzYmNhNjY3MFwiKSJdLCJuYW1lcyI6WyJjb25zdHJ1Y3RvciIsImNvbGxlY3Rpb25zIiwiZ2wiLCJzY2VuZSIsInNpemVzIiwidXJsIiwidGhpcyIsImdlb21ldHJ5IiwiUGxhbmUiLCJjcmVhdGVQcm9ncmFtIiwidGV4dHVyZSIsInByb2dyYW0iLCJQcm9ncmFtIiwiZnJhZ21lbnQiLCJ2ZXJ0ZXgiLCJ1bmlmb3JtcyIsInVBbHBoYSIsInZhbHVlIiwidE1hcCIsImNyZWF0ZU1lc2giLCJtZXNoIiwiTWVzaCIsInNjYWxlIiwieCIsInkiLCJ6IiwicG9zaXRpb24iLCJzZXRQYXJlbnQiLCJzZXRFbGVtZW50IiwiZWxlbWVudCIsImNvbnNvbGUiLCJsb2ciLCJpZCIsImluZGV4IiwibWVkaWFzIiwibWVkaWEiLCJ0cmFuc2l0aW9uIiwiYW5pbWF0ZSIsIm9uQ29tcGxldGUiLCJ0aW1lbGluZSIsIkdTQVAiLCJkZWxheSIsInRvIiwiZHVyYXRpb24iLCJlYXNlIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImgiXSwic291cmNlUm9vdCI6IiJ9