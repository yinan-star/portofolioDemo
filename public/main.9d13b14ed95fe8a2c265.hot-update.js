/*! For license information please see main.9d13b14ed95fe8a2c265.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatefloema("main",{"./app/components/Canvas/index.js":(t,e,r)=>{r.r(e),r.d(e,{default:()=>h});var s=r("./node_modules/ogl/src/core/Renderer.js"),i=r("./node_modules/ogl/src/core/Camera.js"),n=r("./node_modules/ogl/src/core/Transform.js"),a=r("./node_modules/ogl/src/extras/Box.js"),o=r("./node_modules/ogl/src/core/Program.js"),l=r("./node_modules/ogl/src/core/Mesh.js");class h{constructor(){this.createRenderer(),this.createScene(),this.createCube()}createRenderer(){this.renderer=new s.Renderer,this.gl=this.renderer.gl,document.body.appendChild(this.gl.canvas)}createCamera(){this.camera=new i.Camera(this.gl),this.camera.position.z=5}createScene(){this.scene=new n.Transform}createCube(){this.geometry=new a.Box(this.gl),this.program=new o.Program(this.gl,{vertex:"\n        attribute vec3 position;\n\n        uniform mat4 modelViewMatrix;\n        uniform mat4 projectionMatrix;\n\n        void main() {\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n        ",fragment:"\n      void main() {\n          gl_FragColor = vec4(1.0);\n      }\n      "}),this.mesh=new l.Mesh(this.geometry,this.program),this.mesh.setParent(this.scene)}onResize(){this.renderer.setSize(window.innerWidth,window.innerHeight),this.camera.perspective({aspect:window.innerWidth/window.innerHeight})}update(){this.renderer.render({camera:this.camera,scene:this.scene})}}},"./node_modules/ogl/src/core/Geometry.js":(t,e,r)=>{r.r(e),r.d(e,{Geometry:()=>l});var s=r("./node_modules/ogl/src/math/Vec3.js");const i=new s.Vec3;let n=1,a=1,o=!1;class l{constructor(t,e={}){t.canvas||console.error("gl not passed as first argument to Geometry"),this.gl=t,this.attributes=e,this.id=n++,this.VAOs={},this.drawRange={start:0,count:0},this.instancedCount=0,this.gl.renderer.bindVertexArray(null),this.gl.renderer.currentGeometry=null,this.glState=this.gl.renderer.state;for(let t in e)this.addAttribute(t,e[t])}addAttribute(t,e){if(this.attributes[t]=e,e.id=a++,e.size=e.size||1,e.type=e.type||(e.data.constructor===Float32Array?this.gl.FLOAT:e.data.constructor===Uint16Array?this.gl.UNSIGNED_SHORT:this.gl.UNSIGNED_INT),e.target="index"===t?this.gl.ELEMENT_ARRAY_BUFFER:this.gl.ARRAY_BUFFER,e.normalized=e.normalized||!1,e.stride=e.stride||0,e.offset=e.offset||0,e.count=e.count||(e.stride?e.data.byteLength/e.stride:e.data.length/e.size),e.divisor=e.instanced||0,e.needsUpdate=!1,e.usage=e.usage||this.gl.STATIC_DRAW,e.buffer||this.updateAttribute(e),e.divisor){if(this.isInstanced=!0,this.instancedCount&&this.instancedCount!==e.count*e.divisor)return console.warn("geometry has multiple instanced buffers of different length"),this.instancedCount=Math.min(this.instancedCount,e.count*e.divisor);this.instancedCount=e.count*e.divisor}else"index"===t?this.drawRange.count=e.count:this.attributes.index||(this.drawRange.count=Math.max(this.drawRange.count,e.count))}updateAttribute(t){const e=!t.buffer;e&&(t.buffer=this.gl.createBuffer()),this.glState.boundBuffer!==t.buffer&&(this.gl.bindBuffer(t.target,t.buffer),this.glState.boundBuffer=t.buffer),e?this.gl.bufferData(t.target,t.data,t.usage):this.gl.bufferSubData(t.target,0,t.data),t.needsUpdate=!1}setIndex(t){this.addAttribute("index",t)}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}setInstancedCount(t){this.instancedCount=t}createVAO(t){this.VAOs[t.attributeOrder]=this.gl.renderer.createVertexArray(),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.bindAttributes(t)}bindAttributes(t){t.attributeLocations.forEach(((t,{name:e,type:r})=>{if(!this.attributes[e])return void console.warn(`active attribute ${e} not being supplied`);const s=this.attributes[e];this.gl.bindBuffer(s.target,s.buffer),this.glState.boundBuffer=s.buffer;let i=1;35674===r&&(i=2),35675===r&&(i=3),35676===r&&(i=4);const n=s.size/i,a=1===i?0:i*i*4,o=1===i?0:4*i;for(let e=0;e<i;e++)this.gl.vertexAttribPointer(t+e,n,s.type,s.normalized,s.stride+a,s.offset+e*o),this.gl.enableVertexAttribArray(t+e),this.gl.renderer.vertexAttribDivisor(t+e,s.divisor)})),this.attributes.index&&this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.attributes.index.buffer)}draw({program:t,mode:e=this.gl.TRIANGLES}){this.gl.renderer.currentGeometry!==`${this.id}_${t.attributeOrder}`&&(this.VAOs[t.attributeOrder]||this.createVAO(t),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.gl.renderer.currentGeometry=`${this.id}_${t.attributeOrder}`),t.attributeLocations.forEach(((t,{name:e})=>{const r=this.attributes[e];r.needsUpdate&&this.updateAttribute(r)}));let r=2;this.attributes.index?.type===this.gl.UNSIGNED_INT&&(r=4),this.isInstanced?this.attributes.index?this.gl.renderer.drawElementsInstanced(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+this.drawRange.start*r,this.instancedCount):this.gl.renderer.drawArraysInstanced(e,this.drawRange.start,this.drawRange.count,this.instancedCount):this.attributes.index?this.gl.drawElements(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+this.drawRange.start*r):this.gl.drawArrays(e,this.drawRange.start,this.drawRange.count)}getPosition(){const t=this.attributes.position;return t.data?t:o?void 0:(console.warn("No position buffer data found to compute bounds"),o=!0)}computeBoundingBox(t){t||(t=this.getPosition());const e=t.data,r=t.size;this.bounds||(this.bounds={min:new s.Vec3,max:new s.Vec3,center:new s.Vec3,scale:new s.Vec3,radius:1/0});const i=this.bounds.min,n=this.bounds.max,a=this.bounds.center,o=this.bounds.scale;i.set(1/0),n.set(-1/0);for(let t=0,s=e.length;t<s;t+=r){const r=e[t],s=e[t+1],a=e[t+2];i.x=Math.min(r,i.x),i.y=Math.min(s,i.y),i.z=Math.min(a,i.z),n.x=Math.max(r,n.x),n.y=Math.max(s,n.y),n.z=Math.max(a,n.z)}o.sub(n,i),a.add(i,n).divide(2)}computeBoundingSphere(t){t||(t=this.getPosition());const e=t.data,r=t.size;this.bounds||this.computeBoundingBox(t);let s=0;for(let t=0,n=e.length;t<n;t+=r)i.fromArray(e,t),s=Math.max(s,this.bounds.center.squaredDistance(i));this.bounds.radius=Math.sqrt(s)}remove(){for(let t in this.VAOs)this.gl.renderer.deleteVertexArray(this.VAOs[t]),delete this.VAOs[t];for(let t in this.attributes)this.gl.deleteBuffer(this.attributes[t].buffer),delete this.attributes[t]}}},"./node_modules/ogl/src/core/Mesh.js":(t,e,r)=>{r.r(e),r.d(e,{Mesh:()=>o});var s=r("./node_modules/ogl/src/core/Transform.js"),i=r("./node_modules/ogl/src/math/Mat3.js"),n=r("./node_modules/ogl/src/math/Mat4.js");let a=0;class o extends s.Transform{constructor(t,{geometry:e,program:r,mode:s=t.TRIANGLES,frustumCulled:o=!0,renderOrder:l=0}={}){super(),t.canvas||console.error("gl not passed as first argument to Mesh"),this.gl=t,this.id=a++,this.geometry=e,this.program=r,this.mode=s,this.frustumCulled=o,this.renderOrder=l,this.modelViewMatrix=new n.Mat4,this.normalMatrix=new i.Mat3,this.beforeRenderCallbacks=[],this.afterRenderCallbacks=[]}onBeforeRender(t){return this.beforeRenderCallbacks.push(t),this}onAfterRender(t){return this.afterRenderCallbacks.push(t),this}draw({camera:t}={}){t&&(this.program.uniforms.modelMatrix||Object.assign(this.program.uniforms,{modelMatrix:{value:null},viewMatrix:{value:null},modelViewMatrix:{value:null},normalMatrix:{value:null},projectionMatrix:{value:null},cameraPosition:{value:null}}),this.program.uniforms.projectionMatrix.value=t.projectionMatrix,this.program.uniforms.cameraPosition.value=t.worldPosition,this.program.uniforms.viewMatrix.value=t.viewMatrix,this.modelViewMatrix.multiply(t.viewMatrix,this.worldMatrix),this.normalMatrix.getNormalMatrix(this.modelViewMatrix),this.program.uniforms.modelMatrix.value=this.worldMatrix,this.program.uniforms.modelViewMatrix.value=this.modelViewMatrix,this.program.uniforms.normalMatrix.value=this.normalMatrix),this.beforeRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t})));let e=this.program.cullFace&&this.worldMatrix.determinant()<0;this.program.use({flipFaces:e}),this.geometry.draw({mode:this.mode,program:this.program}),this.afterRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t})))}}},"./node_modules/ogl/src/core/Program.js":(t,e,r)=>{r.r(e),r.d(e,{Program:()=>n});let s=1;const i={};class n{constructor(t,{vertex:e,fragment:r,uniforms:i={},transparent:n=!1,cullFace:a=t.BACK,frontFace:l=t.CCW,depthTest:h=!0,depthWrite:u=!0,depthFunc:d=t.LESS}={}){t.canvas||console.error("gl not passed as first argument to Program"),this.gl=t,this.uniforms=i,this.id=s++,e||console.warn("vertex shader not supplied"),r||console.warn("fragment shader not supplied"),this.transparent=n,this.cullFace=a,this.frontFace=l,this.depthTest=h,this.depthWrite=u,this.depthFunc=d,this.blendFunc={},this.blendEquation={},this.transparent&&!this.blendFunc.src&&(this.gl.renderer.premultipliedAlpha?this.setBlendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA):this.setBlendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA));const c=t.createShader(t.VERTEX_SHADER);t.shaderSource(c,e),t.compileShader(c),""!==t.getShaderInfoLog(c)&&console.warn(`${t.getShaderInfoLog(c)}\nVertex Shader\n${o(e)}`);const m=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(m,r),t.compileShader(m),""!==t.getShaderInfoLog(m)&&console.warn(`${t.getShaderInfoLog(m)}\nFragment Shader\n${o(r)}`),this.program=t.createProgram(),t.attachShader(this.program,c),t.attachShader(this.program,m),t.linkProgram(this.program),!t.getProgramParameter(this.program,t.LINK_STATUS))return console.warn(t.getProgramInfoLog(this.program));t.deleteShader(c),t.deleteShader(m),this.uniformLocations=new Map;let g=t.getProgramParameter(this.program,t.ACTIVE_UNIFORMS);for(let e=0;e<g;e++){let r=t.getActiveUniform(this.program,e);this.uniformLocations.set(r,t.getUniformLocation(this.program,r.name));const s=r.name.match(/(\w+)/g);r.uniformName=s[0],r.nameComponents=s.slice(1)}this.attributeLocations=new Map;const f=[],p=t.getProgramParameter(this.program,t.ACTIVE_ATTRIBUTES);for(let e=0;e<p;e++){const r=t.getActiveAttrib(this.program,e),s=t.getAttribLocation(this.program,r.name);-1!==s&&(f[s]=r.name,this.attributeLocations.set(r,s))}this.attributeOrder=f.join("")}setBlendFunc(t,e,r,s){this.blendFunc.src=t,this.blendFunc.dst=e,this.blendFunc.srcAlpha=r,this.blendFunc.dstAlpha=s,t&&(this.transparent=!0)}setBlendEquation(t,e){this.blendEquation.modeRGB=t,this.blendEquation.modeAlpha=e}applyState(){this.depthTest?this.gl.renderer.enable(this.gl.DEPTH_TEST):this.gl.renderer.disable(this.gl.DEPTH_TEST),this.cullFace?this.gl.renderer.enable(this.gl.CULL_FACE):this.gl.renderer.disable(this.gl.CULL_FACE),this.blendFunc.src?this.gl.renderer.enable(this.gl.BLEND):this.gl.renderer.disable(this.gl.BLEND),this.cullFace&&this.gl.renderer.setCullFace(this.cullFace),this.gl.renderer.setFrontFace(this.frontFace),this.gl.renderer.setDepthMask(this.depthWrite),this.gl.renderer.setDepthFunc(this.depthFunc),this.blendFunc.src&&this.gl.renderer.setBlendFunc(this.blendFunc.src,this.blendFunc.dst,this.blendFunc.srcAlpha,this.blendFunc.dstAlpha),this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB,this.blendEquation.modeAlpha)}use({flipFaces:t=!1}={}){let e=-1;this.gl.renderer.state.currentProgram===this.id||(this.gl.useProgram(this.program),this.gl.renderer.state.currentProgram=this.id),this.uniformLocations.forEach(((t,r)=>{let s=this.uniforms[r.uniformName];for(const t of r.nameComponents){if(!s)break;if(!(t in s)){if(Array.isArray(s.value))break;s=void 0;break}s=s[t]}if(!s)return h(`Active uniform ${r.name} has not been supplied`);if(s&&void 0===s.value)return h(`${r.name} uniform is missing a value parameter`);if(s.value.texture)return e+=1,s.value.update(e),a(this.gl,r.type,t,e);if(s.value.length&&s.value[0].texture){const i=[];return s.value.forEach((t=>{e+=1,t.update(e),i.push(e)})),a(this.gl,r.type,t,i)}a(this.gl,r.type,t,s.value)})),this.applyState(),t&&this.gl.renderer.setFrontFace(this.frontFace===this.gl.CCW?this.gl.CW:this.gl.CCW)}remove(){this.gl.deleteProgram(this.program)}}function a(t,e,r,s){s=s.length?function(t){const e=t.length,r=t[0].length;if(void 0===r)return t;const s=e*r;let n=i[s];n||(i[s]=n=new Float32Array(s));for(let s=0;s<e;s++)n.set(t[s],s*r);return n}(s):s;const n=t.renderer.state.uniformLocations.get(r);if(s.length)if(void 0===n||n.length!==s.length)t.renderer.state.uniformLocations.set(r,s.slice(0));else{if(function(t,e){if(t.length!==e.length)return!1;for(let r=0,s=t.length;r<s;r++)if(t[r]!==e[r])return!1;return!0}(n,s))return;n.set?n.set(s):function(t,e){for(let r=0,s=t.length;r<s;r++)t[r]=e[r]}(n,s),t.renderer.state.uniformLocations.set(r,n)}else{if(n===s)return;t.renderer.state.uniformLocations.set(r,s)}switch(e){case 5126:return s.length?t.uniform1fv(r,s):t.uniform1f(r,s);case 35664:return t.uniform2fv(r,s);case 35665:return t.uniform3fv(r,s);case 35666:return t.uniform4fv(r,s);case 35670:case 5124:case 35678:case 35680:return s.length?t.uniform1iv(r,s):t.uniform1i(r,s);case 35671:case 35667:return t.uniform2iv(r,s);case 35672:case 35668:return t.uniform3iv(r,s);case 35673:case 35669:return t.uniform4iv(r,s);case 35674:return t.uniformMatrix2fv(r,!1,s);case 35675:return t.uniformMatrix3fv(r,!1,s);case 35676:return t.uniformMatrix4fv(r,!1,s)}}function o(t){let e=t.split("\n");for(let t=0;t<e.length;t++)e[t]=t+1+": "+e[t];return e.join("\n")}let l=0;function h(t){l>100||(console.warn(t),l++,l>100&&console.warn("More than 100 program warnings - stopping logs."))}},"./node_modules/ogl/src/extras/Box.js":(t,e,r)=>{r.r(e),r.d(e,{Box:()=>n});var s=r("./node_modules/ogl/src/core/Geometry.js"),i=r("./node_modules/ogl/src/extras/Plane.js");class n extends s.Geometry{constructor(t,{width:e=1,height:r=1,depth:s=1,widthSegments:n=1,heightSegments:a=1,depthSegments:o=1,attributes:l={}}={}){const h=n,u=a,d=o,c=(h+1)*(u+1)*2+(h+1)*(d+1)*2+(u+1)*(d+1)*2,m=6*(h*u*2+h*d*2+u*d*2),g=new Float32Array(3*c),f=new Float32Array(3*c),p=new Float32Array(2*c),b=c>65536?new Uint32Array(m):new Uint16Array(m);let w=0,x=0;i.Plane.buildPlane(g,f,p,b,s,r,e,d,u,2,1,0,-1,-1,w,x),w+=(d+1)*(u+1),x+=d*u,i.Plane.buildPlane(g,f,p,b,s,r,-e,d,u,2,1,0,1,-1,w,x),w+=(d+1)*(u+1),x+=d*u,i.Plane.buildPlane(g,f,p,b,e,s,r,d,h,0,2,1,1,1,w,x),w+=(h+1)*(d+1),x+=h*d,i.Plane.buildPlane(g,f,p,b,e,s,-r,d,h,0,2,1,1,-1,w,x),w+=(h+1)*(d+1),x+=h*d,i.Plane.buildPlane(g,f,p,b,e,r,-s,h,u,0,1,2,-1,-1,w,x),w+=(h+1)*(u+1),x+=h*u,i.Plane.buildPlane(g,f,p,b,e,r,s,h,u,0,1,2,1,-1,w,x),Object.assign(l,{position:{size:3,data:g},normal:{size:3,data:f},uv:{size:2,data:p},index:{data:b}}),super(t,l)}}},"./node_modules/ogl/src/extras/Plane.js":(t,e,r)=>{r.r(e),r.d(e,{Plane:()=>i});var s=r("./node_modules/ogl/src/core/Geometry.js");class i extends s.Geometry{constructor(t,{width:e=1,height:r=1,widthSegments:s=1,heightSegments:n=1,attributes:a={}}={}){const o=s,l=n,h=(o+1)*(l+1),u=o*l*6,d=new Float32Array(3*h),c=new Float32Array(3*h),m=new Float32Array(2*h),g=u>65536?new Uint32Array(u):new Uint16Array(u);i.buildPlane(d,c,m,g,e,r,0,o,l),Object.assign(a,{position:{size:3,data:d},normal:{size:3,data:c},uv:{size:2,data:m},index:{data:g}}),super(t,a)}static buildPlane(t,e,r,s,i,n,a,o,l,h=0,u=1,d=2,c=1,m=-1,g=0,f=0){const p=g,b=i/o,w=n/l;for(let x=0;x<=l;x++){let A=x*w-n/2;for(let n=0;n<=o;n++,g++){let w=n*b-i/2;if(t[3*g+h]=w*c,t[3*g+u]=A*m,t[3*g+d]=a/2,e[3*g+h]=0,e[3*g+u]=0,e[3*g+d]=a>=0?1:-1,r[2*g]=n/o,r[2*g+1]=1-x/l,x===l||n===o)continue;let v=p+n+x*(o+1),M=p+n+(x+1)*(o+1),y=p+n+(x+1)*(o+1)+1,F=p+n+x*(o+1)+1;s[6*f]=v,s[6*f+1]=M,s[6*f+2]=F,s[6*f+3]=M,s[6*f+4]=y,s[6*f+5]=F,f++}}}}},"./node_modules/ogl/src/math/Mat3.js":(t,e,r)=>{r.r(e),r.d(e,{Mat3:()=>i});var s=r("./node_modules/ogl/src/math/functions/Mat3Func.js");class i extends Array{constructor(t=1,e=0,r=0,s=0,i=1,n=0,a=0,o=0,l=1){return super(t,e,r,s,i,n,a,o,l),this}set(t,e,r,i,n,a,o,l,h){return t.length?this.copy(t):(s.set(this,t,e,r,i,n,a,o,l,h),this)}translate(t,e=this){return s.translate(this,e,t),this}rotate(t,e=this){return s.rotate(this,e,t),this}scale(t,e=this){return s.scale(this,e,t),this}multiply(t,e){return e?s.multiply(this,t,e):s.multiply(this,this,t),this}identity(){return s.identity(this),this}copy(t){return s.copy(this,t),this}fromMatrix4(t){return s.fromMat4(this,t),this}fromQuaternion(t){return s.fromQuat(this,t),this}fromBasis(t,e,r){return this.set(t[0],t[1],t[2],e[0],e[1],e[2],r[0],r[1],r[2]),this}inverse(t=this){return s.invert(this,t),this}getNormalMatrix(t){return s.normalFromMat4(this,t),this}}},"./node_modules/ogl/src/math/functions/Mat3Func.js":(t,e,r)=>{r.r(e),r.d(e,{add:()=>b,copy:()=>n,determinant:()=>u,fromMat4:()=>s,fromQuat:()=>i,identity:()=>o,invert:()=>h,multiply:()=>d,multiplyScalar:()=>x,normalFromMat4:()=>f,projection:()=>p,rotate:()=>m,scale:()=>g,set:()=>a,subtract:()=>w,translate:()=>c,transpose:()=>l});function s(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[4],t[4]=e[5],t[5]=e[6],t[6]=e[8],t[7]=e[9],t[8]=e[10],t}function i(t,e){let r=e[0],s=e[1],i=e[2],n=e[3],a=r+r,o=s+s,l=i+i,h=r*a,u=s*a,d=s*o,c=i*a,m=i*o,g=i*l,f=n*a,p=n*o,b=n*l;return t[0]=1-d-g,t[3]=u-b,t[6]=c+p,t[1]=u+b,t[4]=1-h-g,t[7]=m-f,t[2]=c-p,t[5]=m+f,t[8]=1-h-d,t}function n(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function a(t,e,r,s,i,n,a,o,l,h){return t[0]=e,t[1]=r,t[2]=s,t[3]=i,t[4]=n,t[5]=a,t[6]=o,t[7]=l,t[8]=h,t}function o(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function l(t,e){if(t===e){let r=e[1],s=e[2],i=e[5];t[1]=e[3],t[2]=e[6],t[3]=r,t[5]=e[7],t[6]=s,t[7]=i}else t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8];return t}function h(t,e){let r=e[0],s=e[1],i=e[2],n=e[3],a=e[4],o=e[5],l=e[6],h=e[7],u=e[8],d=u*a-o*h,c=-u*n+o*l,m=h*n-a*l,g=r*d+s*c+i*m;return g?(g=1/g,t[0]=d*g,t[1]=(-u*s+i*h)*g,t[2]=(o*s-i*a)*g,t[3]=c*g,t[4]=(u*r-i*l)*g,t[5]=(-o*r+i*n)*g,t[6]=m*g,t[7]=(-h*r+s*l)*g,t[8]=(a*r-s*n)*g,t):null}function u(t){let e=t[0],r=t[1],s=t[2],i=t[3],n=t[4],a=t[5],o=t[6],l=t[7],h=t[8];return e*(h*n-a*l)+r*(-h*i+a*o)+s*(l*i-n*o)}function d(t,e,r){let s=e[0],i=e[1],n=e[2],a=e[3],o=e[4],l=e[5],h=e[6],u=e[7],d=e[8],c=r[0],m=r[1],g=r[2],f=r[3],p=r[4],b=r[5],w=r[6],x=r[7],A=r[8];return t[0]=c*s+m*a+g*h,t[1]=c*i+m*o+g*u,t[2]=c*n+m*l+g*d,t[3]=f*s+p*a+b*h,t[4]=f*i+p*o+b*u,t[5]=f*n+p*l+b*d,t[6]=w*s+x*a+A*h,t[7]=w*i+x*o+A*u,t[8]=w*n+x*l+A*d,t}function c(t,e,r){let s=e[0],i=e[1],n=e[2],a=e[3],o=e[4],l=e[5],h=e[6],u=e[7],d=e[8],c=r[0],m=r[1];return t[0]=s,t[1]=i,t[2]=n,t[3]=a,t[4]=o,t[5]=l,t[6]=c*s+m*a+h,t[7]=c*i+m*o+u,t[8]=c*n+m*l+d,t}function m(t,e,r){let s=e[0],i=e[1],n=e[2],a=e[3],o=e[4],l=e[5],h=e[6],u=e[7],d=e[8],c=Math.sin(r),m=Math.cos(r);return t[0]=m*s+c*a,t[1]=m*i+c*o,t[2]=m*n+c*l,t[3]=m*a-c*s,t[4]=m*o-c*i,t[5]=m*l-c*n,t[6]=h,t[7]=u,t[8]=d,t}function g(t,e,r){let s=r[0],i=r[1];return t[0]=s*e[0],t[1]=s*e[1],t[2]=s*e[2],t[3]=i*e[3],t[4]=i*e[4],t[5]=i*e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function f(t,e){let r=e[0],s=e[1],i=e[2],n=e[3],a=e[4],o=e[5],l=e[6],h=e[7],u=e[8],d=e[9],c=e[10],m=e[11],g=e[12],f=e[13],p=e[14],b=e[15],w=r*o-s*a,x=r*l-i*a,A=r*h-n*a,v=s*l-i*o,M=s*h-n*o,y=i*h-n*l,F=u*f-d*g,S=u*p-c*g,R=u*b-m*g,_=d*p-c*f,E=d*b-m*f,P=c*b-m*p,C=w*P-x*E+A*_+v*R-M*S+y*F;return C?(C=1/C,t[0]=(o*P-l*E+h*_)*C,t[1]=(l*R-a*P-h*S)*C,t[2]=(a*E-o*R+h*F)*C,t[3]=(i*E-s*P-n*_)*C,t[4]=(r*P-i*R+n*S)*C,t[5]=(s*R-r*E-n*F)*C,t[6]=(f*y-p*M+b*v)*C,t[7]=(p*A-g*y-b*x)*C,t[8]=(g*M-f*A+b*w)*C,t):null}function p(t,e,r){return t[0]=2/e,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/r,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t}function b(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t[3]=e[3]+r[3],t[4]=e[4]+r[4],t[5]=e[5]+r[5],t[6]=e[6]+r[6],t[7]=e[7]+r[7],t[8]=e[8]+r[8],t}function w(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t[3]=e[3]-r[3],t[4]=e[4]-r[4],t[5]=e[5]-r[5],t[6]=e[6]-r[6],t[7]=e[7]-r[7],t[8]=e[8]-r[8],t}function x(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*r,t[5]=e[5]*r,t[6]=e[6]*r,t[7]=e[7]*r,t[8]=e[8]*r,t}}},(function(t){t.h=()=>"11b56535049b3e700049"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFLTSxFQUNUMkUsQ0FDWCxpQkNyZkF5RCxFQUFvQkMsRUFBSSxJQUFNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL2NvbXBvbmVudHMvQ2FudmFzL2luZGV4LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL2NvcmUvR2VvbWV0cnkuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvY29yZS9NZXNoLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL2NvcmUvUHJvZ3JhbS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9leHRyYXMvQm94LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL2V4dHJhcy9QbGFuZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9tYXRoL01hdDMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvbWF0aC9mdW5jdGlvbnMvTWF0M0Z1bmMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hL3dlYnBhY2svcnVudGltZS9nZXRGdWxsSGFzaCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDYW1lcmEsIFJlbmRlcmVyLCBUcmFuc2Zvcm0sIE1lc2gsIEJveCwgUHJvZ3JhbSB9IGZyb20gJ29nbCc7XG5cbi8vIGltcG9ydCBIb21lIGZyb20gJy4vSG9tZSdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FudmFzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jcmVhdGVSZW5kZXJlcigpXG4gICAgLy8gICAgIHRoaXMuY3JlYXRlQ2FtZXJhKClcbiAgICB0aGlzLmNyZWF0ZVNjZW5lKClcbiAgICAvLyAgICAgdGhpcy5vblJlc2l6ZSgpXG4gICAgLy8gICAgIHRoaXMuY3JlYXRlSG9tZSgpXG4gICAgdGhpcy5jcmVhdGVDdWJlKClcbiAgfVxuXG4gIGNyZWF0ZVJlbmRlcmVyKCkge1xuICAgIHRoaXMucmVuZGVyZXIgPSBuZXcgUmVuZGVyZXIoKTtcblxuICAgIHRoaXMuZ2wgPSB0aGlzLnJlbmRlcmVyLmdsOyAvL1RJUCB3b3JrcyBsaWtlIGEgY2FudmFzIGNvbnRleHRcblxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5nbC5jYW52YXMpO1xuICB9XG5cbiAgY3JlYXRlQ2FtZXJhKCkge1xuICAgIHRoaXMuY2FtZXJhID0gbmV3IENhbWVyYSh0aGlzLmdsKVxuICAgIHRoaXMuY2FtZXJhLnBvc2l0aW9uLnogPSA1XG5cbiAgfVxuXG4gIGNyZWF0ZVNjZW5lKCkge1xuICAgIHRoaXMuc2NlbmUgPSBuZXcgVHJhbnNmb3JtKClcbiAgfVxuXG4gIC8vICAgY3JlYXRlSG9tZSgpIHtcbiAgLy8gICAgIHRoaXMuaG9tZSA9IG5ldyBIb21lKHtcbiAgLy8gICAgICAgZ2w6IHRoaXMuZ2wsXG4gIC8vICAgICAgIHNjZW5lOiB0aGlzLnNjZW5lLFxuICAvLyAgICAgICBzaXplczogdGhpcy5zaXplc1xuICAvLyAgICAgfSk7XG5cbiAgLy8gICB9XG4gIGNyZWF0ZUN1YmUoKSB7XG4gICAgdGhpcy5nZW9tZXRyeSA9IG5ldyBCb3godGhpcy5nbClcbiAgICB0aGlzLnByb2dyYW0gPSBuZXcgUHJvZ3JhbSh0aGlzLmdsLCB7XG4gICAgICB2ZXJ0ZXg6IC8qIGdsc2wgKi8gYFxuICAgICAgICBhdHRyaWJ1dGUgdmVjMyBwb3NpdGlvbjtcblxuICAgICAgICB1bmlmb3JtIG1hdDQgbW9kZWxWaWV3TWF0cml4O1xuICAgICAgICB1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDtcblxuICAgICAgICB2b2lkIG1haW4oKSB7XG4gICAgICAgICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbW9kZWxWaWV3TWF0cml4ICogdmVjNChwb3NpdGlvbiwgMS4wKTtcbiAgICAgICAgfVxuICAgICAgICBgLFxuICAgICAgZnJhZ21lbnQ6IC8qIGdsc2wgKi8gYFxuICAgICAgdm9pZCBtYWluKCkge1xuICAgICAgICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQoMS4wKTtcbiAgICAgIH1cbiAgICAgIGBcbiAgICB9KVxuICAgIHRoaXMubWVzaD1uZXcgTWVzaCh0aGlzLmdlb21ldHJ5LCB0aGlzLnByb2dyYW0pXG4gICAgLy8g5bCG55uS5a2Q6K6+572u5Li655u45py655qE5a2Q5YWD57SgXG4gICAgdGhpcy5tZXNoLnNldFBhcmVudCh0aGlzLnNjZW5lKVxuXG4gIH1cblxuXG4gIG9uUmVzaXplKCkge1xuICAgIC8vIOWwhua4suafk+eahOeUu+W4g+WwuuWvuOWhq+a7oeinhueql+WPo1xuICAgIHRoaXMucmVuZGVyZXIuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcbiAgICAvLyDliJvlu7rkuoZjYW1lcmHkuYvlkI7miY3og73liJvlu7rpgI/op4blm75cbiAgICB0aGlzLmNhbWVyYS5wZXJzcGVjdGl2ZSh7IGFzcGVjdDogd2luZG93LmlubmVyV2lkdGggLyB3aW5kb3cuaW5uZXJIZWlnaHQgfSk7XG5cbiAgICAvLyAgICAgY29uc3QgZm92ID0gdGhpcy5jYW1lcmEuZm92ICogKE1hdGguUEkgLyAxODApO1xuICAgIC8vICAgICBjb25zdCBoZWlnaHQgPSAyICogTWF0aC50YW4oZm92IC8gMikgKiB0aGlzLmNhbWVyYS5wb3NpdGlvbi56O1xuICAgIC8vICAgICBjb25zdCB3aWR0aCA9IGhlaWdodCAqIHRoaXMuY2FtZXJhLmFzcGVjdDtcblxuICAgIC8vICAgICB0aGlzLnNpemVzID0ge1xuICAgIC8vICAgICAgIGhlaWdodCxcbiAgICAvLyAgICAgICB3aWR0aCxcbiAgICAvLyAgICAgfTtcblxuICAgIC8vICAgICBpZiAodGhpcy5ob21lKSB7XG4gICAgLy8gICAgICAgdGhpcy5ob21lLm9uUmVzaXplKHtcbiAgICAvLyAgICAgICAgIHNpemVzOiB0aGlzLnNpemVzXG4gICAgLy8gICAgICAgfSlcbiAgICAvLyAgICAgfVxuICB9XG5cbiAgdXBkYXRlKCkge1xuICAgIC8vIOWunuaXtua4suafk1xuICAgIC8vIHRoaXMubWVzaC5yb3RhdGlvbi54ICs9IDAuMDFcbiAgICAvLyB0aGlzLm1lc2gucm90YXRpb24ueSArPSAwLjAxXG4gICAgdGhpcy5yZW5kZXJlci5yZW5kZXIoe1xuICAgICAgY2FtZXJhOiB0aGlzLmNhbWVyYSxcbiAgICAgIHNjZW5lOiB0aGlzLnNjZW5lXG4gICAgfSlcbiAgfVxufSIsIi8vIGF0dHJpYnV0ZSBwYXJhbXNcbi8vIHtcbi8vICAgICBkYXRhIC0gdHlwZWQgYXJyYXkgZWcgVUludDE2QXJyYXkgZm9yIGluZGljZXMsIEZsb2F0MzJBcnJheVxuLy8gICAgIHNpemUgLSBpbnQgZGVmYXVsdCAxXG4vLyAgICAgaW5zdGFuY2VkIC0gZGVmYXVsdCBudWxsLiBQYXNzIGRpdmlzb3IgYW1vdW50XG4vLyAgICAgdHlwZSAtIGdsIGVudW0gZGVmYXVsdCBnbC5VTlNJR05FRF9TSE9SVCBmb3IgJ2luZGV4JywgZ2wuRkxPQVQgZm9yIG90aGVyc1xuLy8gICAgIG5vcm1hbGl6ZWQgLSBib29sZWFuIGRlZmF1bHQgZmFsc2VcblxuLy8gICAgIGJ1ZmZlciAtIGdsIGJ1ZmZlciwgaWYgYnVmZmVyIGV4aXN0cywgZG9uJ3QgbmVlZCB0byBwcm92aWRlIGRhdGEgLSBhbHRob3VnaCBuZWVkcyBwb3NpdGlvbiBkYXRhIGZvciBib3VuZHMgY2FsY3VsYXRpb25cbi8vICAgICBzdHJpZGUgLSBkZWZhdWx0IDAgLSBmb3Igd2hlbiBwYXNzaW5nIGluIGJ1ZmZlclxuLy8gICAgIG9mZnNldCAtIGRlZmF1bHQgMCAtIGZvciB3aGVuIHBhc3NpbmcgaW4gYnVmZmVyXG4vLyAgICAgY291bnQgLSBkZWZhdWx0IG51bGwgLSBmb3Igd2hlbiBwYXNzaW5nIGluIGJ1ZmZlclxuLy8gICAgIG1pbiAtIGFycmF5IC0gZm9yIHdoZW4gcGFzc2luZyBpbiBidWZmZXJcbi8vICAgICBtYXggLSBhcnJheSAtIGZvciB3aGVuIHBhc3NpbmcgaW4gYnVmZmVyXG4vLyB9XG5cbi8vIFRPRE86IGZpdCBpbiB0cmFuc2Zvcm0gZmVlZGJhY2tcblxuaW1wb3J0IHsgVmVjMyB9IGZyb20gJy4uL21hdGgvVmVjMy5qcyc7XG5cbmNvbnN0IHRlbXBWZWMzID0gLyogQF9fUFVSRV9fICovIG5ldyBWZWMzKCk7XG5cbmxldCBJRCA9IDE7XG5sZXQgQVRUUl9JRCA9IDE7XG5cbi8vIFRvIHN0b3AgaW5pZmluaXRlIHdhcm5pbmdzXG5sZXQgaXNCb3VuZHNXYXJuZWQgPSBmYWxzZTtcblxuZXhwb3J0IGNsYXNzIEdlb21ldHJ5IHtcbiAgICBjb25zdHJ1Y3RvcihnbCwgYXR0cmlidXRlcyA9IHt9KSB7XG4gICAgICAgIGlmICghZ2wuY2FudmFzKSBjb25zb2xlLmVycm9yKCdnbCBub3QgcGFzc2VkIGFzIGZpcnN0IGFyZ3VtZW50IHRvIEdlb21ldHJ5Jyk7XG4gICAgICAgIHRoaXMuZ2wgPSBnbDtcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzID0gYXR0cmlidXRlcztcbiAgICAgICAgdGhpcy5pZCA9IElEKys7XG5cbiAgICAgICAgLy8gU3RvcmUgb25lIFZBTyBwZXIgcHJvZ3JhbSBhdHRyaWJ1dGUgbG9jYXRpb25zIG9yZGVyXG4gICAgICAgIHRoaXMuVkFPcyA9IHt9O1xuXG4gICAgICAgIHRoaXMuZHJhd1JhbmdlID0geyBzdGFydDogMCwgY291bnQ6IDAgfTtcbiAgICAgICAgdGhpcy5pbnN0YW5jZWRDb3VudCA9IDA7XG5cbiAgICAgICAgLy8gVW5iaW5kIGN1cnJlbnQgVkFPIHNvIHRoYXQgbmV3IGJ1ZmZlcnMgZG9uJ3QgZ2V0IGFkZGVkIHRvIGFjdGl2ZSBtZXNoXG4gICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuYmluZFZlcnRleEFycmF5KG51bGwpO1xuICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLmN1cnJlbnRHZW9tZXRyeSA9IG51bGw7XG5cbiAgICAgICAgLy8gQWxpYXMgZm9yIHN0YXRlIHN0b3JlIHRvIGF2b2lkIHJlZHVuZGFudCBjYWxscyBmb3IgZ2xvYmFsIHN0YXRlXG4gICAgICAgIHRoaXMuZ2xTdGF0ZSA9IHRoaXMuZ2wucmVuZGVyZXIuc3RhdGU7XG5cbiAgICAgICAgLy8gY3JlYXRlIHRoZSBidWZmZXJzXG4gICAgICAgIGZvciAobGV0IGtleSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICB0aGlzLmFkZEF0dHJpYnV0ZShrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhZGRBdHRyaWJ1dGUoa2V5LCBhdHRyKSB7XG4gICAgICAgIHRoaXMuYXR0cmlidXRlc1trZXldID0gYXR0cjtcblxuICAgICAgICAvLyBTZXQgb3B0aW9uc1xuICAgICAgICBhdHRyLmlkID0gQVRUUl9JRCsrOyAvLyBUT0RPOiBjdXJyZW50bHkgdW51c2VkLCByZW1vdmU/XG4gICAgICAgIGF0dHIuc2l6ZSA9IGF0dHIuc2l6ZSB8fCAxO1xuICAgICAgICBhdHRyLnR5cGUgPVxuICAgICAgICAgICAgYXR0ci50eXBlIHx8XG4gICAgICAgICAgICAoYXR0ci5kYXRhLmNvbnN0cnVjdG9yID09PSBGbG9hdDMyQXJyYXlcbiAgICAgICAgICAgICAgICA/IHRoaXMuZ2wuRkxPQVRcbiAgICAgICAgICAgICAgICA6IGF0dHIuZGF0YS5jb25zdHJ1Y3RvciA9PT0gVWludDE2QXJyYXlcbiAgICAgICAgICAgICAgICA/IHRoaXMuZ2wuVU5TSUdORURfU0hPUlRcbiAgICAgICAgICAgICAgICA6IHRoaXMuZ2wuVU5TSUdORURfSU5UKTsgLy8gVWludDMyQXJyYXlcbiAgICAgICAgYXR0ci50YXJnZXQgPSBrZXkgPT09ICdpbmRleCcgPyB0aGlzLmdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSIDogdGhpcy5nbC5BUlJBWV9CVUZGRVI7XG4gICAgICAgIGF0dHIubm9ybWFsaXplZCA9IGF0dHIubm9ybWFsaXplZCB8fCBmYWxzZTtcbiAgICAgICAgYXR0ci5zdHJpZGUgPSBhdHRyLnN0cmlkZSB8fCAwO1xuICAgICAgICBhdHRyLm9mZnNldCA9IGF0dHIub2Zmc2V0IHx8IDA7XG4gICAgICAgIGF0dHIuY291bnQgPSBhdHRyLmNvdW50IHx8IChhdHRyLnN0cmlkZSA/IGF0dHIuZGF0YS5ieXRlTGVuZ3RoIC8gYXR0ci5zdHJpZGUgOiBhdHRyLmRhdGEubGVuZ3RoIC8gYXR0ci5zaXplKTtcbiAgICAgICAgYXR0ci5kaXZpc29yID0gYXR0ci5pbnN0YW5jZWQgfHwgMDtcbiAgICAgICAgYXR0ci5uZWVkc1VwZGF0ZSA9IGZhbHNlO1xuICAgICAgICBhdHRyLnVzYWdlID0gYXR0ci51c2FnZSB8fCB0aGlzLmdsLlNUQVRJQ19EUkFXO1xuXG4gICAgICAgIGlmICghYXR0ci5idWZmZXIpIHtcbiAgICAgICAgICAgIC8vIFB1c2ggZGF0YSB0byBidWZmZXJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQXR0cmlidXRlKGF0dHIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXBkYXRlIGdlb21ldHJ5IGNvdW50cy4gSWYgaW5kZXhlZCwgaWdub3JlIHJlZ3VsYXIgYXR0cmlidXRlc1xuICAgICAgICBpZiAoYXR0ci5kaXZpc29yKSB7XG4gICAgICAgICAgICB0aGlzLmlzSW5zdGFuY2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLmluc3RhbmNlZENvdW50ICYmIHRoaXMuaW5zdGFuY2VkQ291bnQgIT09IGF0dHIuY291bnQgKiBhdHRyLmRpdmlzb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2dlb21ldHJ5IGhhcyBtdWx0aXBsZSBpbnN0YW5jZWQgYnVmZmVycyBvZiBkaWZmZXJlbnQgbGVuZ3RoJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLmluc3RhbmNlZENvdW50ID0gTWF0aC5taW4odGhpcy5pbnN0YW5jZWRDb3VudCwgYXR0ci5jb3VudCAqIGF0dHIuZGl2aXNvcikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZWRDb3VudCA9IGF0dHIuY291bnQgKiBhdHRyLmRpdmlzb3I7XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnaW5kZXgnKSB7XG4gICAgICAgICAgICB0aGlzLmRyYXdSYW5nZS5jb3VudCA9IGF0dHIuY291bnQ7XG4gICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuYXR0cmlidXRlcy5pbmRleCkge1xuICAgICAgICAgICAgdGhpcy5kcmF3UmFuZ2UuY291bnQgPSBNYXRoLm1heCh0aGlzLmRyYXdSYW5nZS5jb3VudCwgYXR0ci5jb3VudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVBdHRyaWJ1dGUoYXR0cikge1xuICAgICAgICBjb25zdCBpc05ld0J1ZmZlciA9ICFhdHRyLmJ1ZmZlcjtcbiAgICAgICAgaWYgKGlzTmV3QnVmZmVyKSBhdHRyLmJ1ZmZlciA9IHRoaXMuZ2wuY3JlYXRlQnVmZmVyKCk7XG4gICAgICAgIGlmICh0aGlzLmdsU3RhdGUuYm91bmRCdWZmZXIgIT09IGF0dHIuYnVmZmVyKSB7XG4gICAgICAgICAgICB0aGlzLmdsLmJpbmRCdWZmZXIoYXR0ci50YXJnZXQsIGF0dHIuYnVmZmVyKTtcbiAgICAgICAgICAgIHRoaXMuZ2xTdGF0ZS5ib3VuZEJ1ZmZlciA9IGF0dHIuYnVmZmVyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc05ld0J1ZmZlcikge1xuICAgICAgICAgICAgdGhpcy5nbC5idWZmZXJEYXRhKGF0dHIudGFyZ2V0LCBhdHRyLmRhdGEsIGF0dHIudXNhZ2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5nbC5idWZmZXJTdWJEYXRhKGF0dHIudGFyZ2V0LCAwLCBhdHRyLmRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGF0dHIubmVlZHNVcGRhdGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBzZXRJbmRleCh2YWx1ZSkge1xuICAgICAgICB0aGlzLmFkZEF0dHJpYnV0ZSgnaW5kZXgnLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgc2V0RHJhd1JhbmdlKHN0YXJ0LCBjb3VudCkge1xuICAgICAgICB0aGlzLmRyYXdSYW5nZS5zdGFydCA9IHN0YXJ0O1xuICAgICAgICB0aGlzLmRyYXdSYW5nZS5jb3VudCA9IGNvdW50O1xuICAgIH1cblxuICAgIHNldEluc3RhbmNlZENvdW50KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuaW5zdGFuY2VkQ291bnQgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBjcmVhdGVWQU8ocHJvZ3JhbSkge1xuICAgICAgICB0aGlzLlZBT3NbcHJvZ3JhbS5hdHRyaWJ1dGVPcmRlcl0gPSB0aGlzLmdsLnJlbmRlcmVyLmNyZWF0ZVZlcnRleEFycmF5KCk7XG4gICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuYmluZFZlcnRleEFycmF5KHRoaXMuVkFPc1twcm9ncmFtLmF0dHJpYnV0ZU9yZGVyXSk7XG4gICAgICAgIHRoaXMuYmluZEF0dHJpYnV0ZXMocHJvZ3JhbSk7XG4gICAgfVxuXG4gICAgYmluZEF0dHJpYnV0ZXMocHJvZ3JhbSkge1xuICAgICAgICAvLyBMaW5rIGFsbCBhdHRyaWJ1dGVzIHRvIHByb2dyYW0gdXNpbmcgZ2wudmVydGV4QXR0cmliUG9pbnRlclxuICAgICAgICBwcm9ncmFtLmF0dHJpYnV0ZUxvY2F0aW9ucy5mb3JFYWNoKChsb2NhdGlvbiwgeyBuYW1lLCB0eXBlIH0pID0+IHtcbiAgICAgICAgICAgIC8vIElmIGdlb21ldHJ5IG1pc3NpbmcgYSByZXF1aXJlZCBzaGFkZXIgYXR0cmlidXRlXG4gICAgICAgICAgICBpZiAoIXRoaXMuYXR0cmlidXRlc1tuYW1lXSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgYWN0aXZlIGF0dHJpYnV0ZSAke25hbWV9IG5vdCBiZWluZyBzdXBwbGllZGApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgYXR0ciA9IHRoaXMuYXR0cmlidXRlc1tuYW1lXTtcblxuICAgICAgICAgICAgdGhpcy5nbC5iaW5kQnVmZmVyKGF0dHIudGFyZ2V0LCBhdHRyLmJ1ZmZlcik7XG4gICAgICAgICAgICB0aGlzLmdsU3RhdGUuYm91bmRCdWZmZXIgPSBhdHRyLmJ1ZmZlcjtcblxuICAgICAgICAgICAgLy8gRm9yIG1hdHJpeCBhdHRyaWJ1dGVzLCBidWZmZXIgbmVlZHMgdG8gYmUgZGVmaW5lZCBwZXIgY29sdW1uXG4gICAgICAgICAgICBsZXQgbnVtTG9jID0gMTtcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAzNTY3NCkgbnVtTG9jID0gMjsgLy8gbWF0MlxuICAgICAgICAgICAgaWYgKHR5cGUgPT09IDM1Njc1KSBudW1Mb2MgPSAzOyAvLyBtYXQzXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gMzU2NzYpIG51bUxvYyA9IDQ7IC8vIG1hdDRcblxuICAgICAgICAgICAgY29uc3Qgc2l6ZSA9IGF0dHIuc2l6ZSAvIG51bUxvYztcbiAgICAgICAgICAgIGNvbnN0IHN0cmlkZSA9IG51bUxvYyA9PT0gMSA/IDAgOiBudW1Mb2MgKiBudW1Mb2MgKiA0O1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gbnVtTG9jID09PSAxID8gMCA6IG51bUxvYyAqIDQ7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtTG9jOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdsLnZlcnRleEF0dHJpYlBvaW50ZXIobG9jYXRpb24gKyBpLCBzaXplLCBhdHRyLnR5cGUsIGF0dHIubm9ybWFsaXplZCwgYXR0ci5zdHJpZGUgKyBzdHJpZGUsIGF0dHIub2Zmc2V0ICsgaSAqIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgdGhpcy5nbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShsb2NhdGlvbiArIGkpO1xuXG4gICAgICAgICAgICAgICAgLy8gRm9yIGluc3RhbmNlZCBhdHRyaWJ1dGVzLCBkaXZpc29yIG5lZWRzIHRvIGJlIHNldC5cbiAgICAgICAgICAgICAgICAvLyBGb3IgZmlyZWZveCwgbmVlZCB0byBzZXQgYmFjayB0byAwIGlmIG5vbi1pbnN0YW5jZWQgZHJhd24gYWZ0ZXIgaW5zdGFuY2VkLiBFbHNlIHdvbid0IHJlbmRlclxuICAgICAgICAgICAgICAgIHRoaXMuZ2wucmVuZGVyZXIudmVydGV4QXR0cmliRGl2aXNvcihsb2NhdGlvbiArIGksIGF0dHIuZGl2aXNvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEJpbmQgaW5kaWNlcyBpZiBnZW9tZXRyeSBpbmRleGVkXG4gICAgICAgIGlmICh0aGlzLmF0dHJpYnV0ZXMuaW5kZXgpIHRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLmdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCB0aGlzLmF0dHJpYnV0ZXMuaW5kZXguYnVmZmVyKTtcbiAgICB9XG5cbiAgICBkcmF3KHsgcHJvZ3JhbSwgbW9kZSA9IHRoaXMuZ2wuVFJJQU5HTEVTIH0pIHtcbiAgICAgICAgaWYgKHRoaXMuZ2wucmVuZGVyZXIuY3VycmVudEdlb21ldHJ5ICE9PSBgJHt0aGlzLmlkfV8ke3Byb2dyYW0uYXR0cmlidXRlT3JkZXJ9YCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLlZBT3NbcHJvZ3JhbS5hdHRyaWJ1dGVPcmRlcl0pIHRoaXMuY3JlYXRlVkFPKHByb2dyYW0pO1xuICAgICAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5iaW5kVmVydGV4QXJyYXkodGhpcy5WQU9zW3Byb2dyYW0uYXR0cmlidXRlT3JkZXJdKTtcbiAgICAgICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuY3VycmVudEdlb21ldHJ5ID0gYCR7dGhpcy5pZH1fJHtwcm9ncmFtLmF0dHJpYnV0ZU9yZGVyfWA7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBpZiBhbnkgYXR0cmlidXRlcyBuZWVkIHVwZGF0aW5nXG4gICAgICAgIHByb2dyYW0uYXR0cmlidXRlTG9jYXRpb25zLmZvckVhY2goKGxvY2F0aW9uLCB7IG5hbWUgfSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYXR0ciA9IHRoaXMuYXR0cmlidXRlc1tuYW1lXTtcbiAgICAgICAgICAgIGlmIChhdHRyLm5lZWRzVXBkYXRlKSB0aGlzLnVwZGF0ZUF0dHJpYnV0ZShhdHRyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gRm9yIGRyYXdFbGVtZW50cywgb2Zmc2V0IG5lZWRzIHRvIGJlIG11bHRpcGxlIG9mIHR5cGUgc2l6ZVxuICAgICAgICBsZXQgaW5kZXhCeXRlc1BlckVsZW1lbnQgPSAyO1xuICAgICAgICBpZiAodGhpcy5hdHRyaWJ1dGVzLmluZGV4Py50eXBlID09PSB0aGlzLmdsLlVOU0lHTkVEX0lOVCkgaW5kZXhCeXRlc1BlckVsZW1lbnQgPSA0O1xuXG4gICAgICAgIGlmICh0aGlzLmlzSW5zdGFuY2VkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hdHRyaWJ1dGVzLmluZGV4KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5kcmF3RWxlbWVudHNJbnN0YW5jZWQoXG4gICAgICAgICAgICAgICAgICAgIG1vZGUsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhd1JhbmdlLmNvdW50LFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMuaW5kZXgudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLmluZGV4Lm9mZnNldCArIHRoaXMuZHJhd1JhbmdlLnN0YXJ0ICogaW5kZXhCeXRlc1BlckVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VkQ291bnRcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLmRyYXdBcnJheXNJbnN0YW5jZWQobW9kZSwgdGhpcy5kcmF3UmFuZ2Uuc3RhcnQsIHRoaXMuZHJhd1JhbmdlLmNvdW50LCB0aGlzLmluc3RhbmNlZENvdW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmF0dHJpYnV0ZXMuaW5kZXgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdsLmRyYXdFbGVtZW50cyhcbiAgICAgICAgICAgICAgICAgICAgbW9kZSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3UmFuZ2UuY291bnQsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlcy5pbmRleC50eXBlLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMuaW5kZXgub2Zmc2V0ICsgdGhpcy5kcmF3UmFuZ2Uuc3RhcnQgKiBpbmRleEJ5dGVzUGVyRWxlbWVudFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2wuZHJhd0FycmF5cyhtb2RlLCB0aGlzLmRyYXdSYW5nZS5zdGFydCwgdGhpcy5kcmF3UmFuZ2UuY291bnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0UG9zaXRpb24oKSB7XG4gICAgICAgIC8vIFVzZSBwb3NpdGlvbiBidWZmZXIsIG9yIG1pbi9tYXggaWYgYXZhaWxhYmxlXG4gICAgICAgIGNvbnN0IGF0dHIgPSB0aGlzLmF0dHJpYnV0ZXMucG9zaXRpb247XG4gICAgICAgIC8vIGlmIChhdHRyLm1pbikgcmV0dXJuIFsuLi5hdHRyLm1pbiwgLi4uYXR0ci5tYXhdO1xuICAgICAgICBpZiAoYXR0ci5kYXRhKSByZXR1cm4gYXR0cjtcbiAgICAgICAgaWYgKGlzQm91bmRzV2FybmVkKSByZXR1cm47XG4gICAgICAgIGNvbnNvbGUud2FybignTm8gcG9zaXRpb24gYnVmZmVyIGRhdGEgZm91bmQgdG8gY29tcHV0ZSBib3VuZHMnKTtcbiAgICAgICAgcmV0dXJuIChpc0JvdW5kc1dhcm5lZCA9IHRydWUpO1xuICAgIH1cblxuICAgIGNvbXB1dGVCb3VuZGluZ0JveChhdHRyKSB7XG4gICAgICAgIGlmICghYXR0cikgYXR0ciA9IHRoaXMuZ2V0UG9zaXRpb24oKTtcbiAgICAgICAgY29uc3QgYXJyYXkgPSBhdHRyLmRhdGE7XG4gICAgICAgIC8vIERhdGEgbG9hZGVkIHNob3VsZG4ndCBoYWF2ZSBzdHJpZGUsIG9ubHkgYnVmZmVyc1xuICAgICAgICAvLyBjb25zdCBzdHJpZGUgPSBhdHRyLnN0cmlkZSA/IGF0dHIuc3RyaWRlIC8gYXJyYXkuQllURVNfUEVSX0VMRU1FTlQgOiBhdHRyLnNpemU7XG4gICAgICAgIGNvbnN0IHN0cmlkZSA9IGF0dHIuc2l6ZTtcblxuICAgICAgICBpZiAoIXRoaXMuYm91bmRzKSB7XG4gICAgICAgICAgICB0aGlzLmJvdW5kcyA9IHtcbiAgICAgICAgICAgICAgICBtaW46IG5ldyBWZWMzKCksXG4gICAgICAgICAgICAgICAgbWF4OiBuZXcgVmVjMygpLFxuICAgICAgICAgICAgICAgIGNlbnRlcjogbmV3IFZlYzMoKSxcbiAgICAgICAgICAgICAgICBzY2FsZTogbmV3IFZlYzMoKSxcbiAgICAgICAgICAgICAgICByYWRpdXM6IEluZmluaXR5LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1pbiA9IHRoaXMuYm91bmRzLm1pbjtcbiAgICAgICAgY29uc3QgbWF4ID0gdGhpcy5ib3VuZHMubWF4O1xuICAgICAgICBjb25zdCBjZW50ZXIgPSB0aGlzLmJvdW5kcy5jZW50ZXI7XG4gICAgICAgIGNvbnN0IHNjYWxlID0gdGhpcy5ib3VuZHMuc2NhbGU7XG5cbiAgICAgICAgbWluLnNldCgrSW5maW5pdHkpO1xuICAgICAgICBtYXguc2V0KC1JbmZpbml0eSk7XG5cbiAgICAgICAgLy8gVE9ETzogY2hlY2sgc2l6ZSBvZiBwb3NpdGlvbiAoZWcgdHJpYW5nbGUgd2l0aCBWZWMyKVxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGw7IGkgKz0gc3RyaWRlKSB7XG4gICAgICAgICAgICBjb25zdCB4ID0gYXJyYXlbaV07XG4gICAgICAgICAgICBjb25zdCB5ID0gYXJyYXlbaSArIDFdO1xuICAgICAgICAgICAgY29uc3QgeiA9IGFycmF5W2kgKyAyXTtcblxuICAgICAgICAgICAgbWluLnggPSBNYXRoLm1pbih4LCBtaW4ueCk7XG4gICAgICAgICAgICBtaW4ueSA9IE1hdGgubWluKHksIG1pbi55KTtcbiAgICAgICAgICAgIG1pbi56ID0gTWF0aC5taW4oeiwgbWluLnopO1xuXG4gICAgICAgICAgICBtYXgueCA9IE1hdGgubWF4KHgsIG1heC54KTtcbiAgICAgICAgICAgIG1heC55ID0gTWF0aC5tYXgoeSwgbWF4LnkpO1xuICAgICAgICAgICAgbWF4LnogPSBNYXRoLm1heCh6LCBtYXgueik7XG4gICAgICAgIH1cblxuICAgICAgICBzY2FsZS5zdWIobWF4LCBtaW4pO1xuICAgICAgICBjZW50ZXIuYWRkKG1pbiwgbWF4KS5kaXZpZGUoMik7XG4gICAgfVxuXG4gICAgY29tcHV0ZUJvdW5kaW5nU3BoZXJlKGF0dHIpIHtcbiAgICAgICAgaWYgKCFhdHRyKSBhdHRyID0gdGhpcy5nZXRQb3NpdGlvbigpO1xuICAgICAgICBjb25zdCBhcnJheSA9IGF0dHIuZGF0YTtcbiAgICAgICAgLy8gRGF0YSBsb2FkZWQgc2hvdWxkbid0IGhhYXZlIHN0cmlkZSwgb25seSBidWZmZXJzXG4gICAgICAgIC8vIGNvbnN0IHN0cmlkZSA9IGF0dHIuc3RyaWRlID8gYXR0ci5zdHJpZGUgLyBhcnJheS5CWVRFU19QRVJfRUxFTUVOVCA6IGF0dHIuc2l6ZTtcbiAgICAgICAgY29uc3Qgc3RyaWRlID0gYXR0ci5zaXplO1xuXG4gICAgICAgIGlmICghdGhpcy5ib3VuZHMpIHRoaXMuY29tcHV0ZUJvdW5kaW5nQm94KGF0dHIpO1xuXG4gICAgICAgIGxldCBtYXhSYWRpdXNTcSA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgaSArPSBzdHJpZGUpIHtcbiAgICAgICAgICAgIHRlbXBWZWMzLmZyb21BcnJheShhcnJheSwgaSk7XG4gICAgICAgICAgICBtYXhSYWRpdXNTcSA9IE1hdGgubWF4KG1heFJhZGl1c1NxLCB0aGlzLmJvdW5kcy5jZW50ZXIuc3F1YXJlZERpc3RhbmNlKHRlbXBWZWMzKSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmJvdW5kcy5yYWRpdXMgPSBNYXRoLnNxcnQobWF4UmFkaXVzU3EpO1xuICAgIH1cblxuICAgIHJlbW92ZSgpIHtcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMuVkFPcykge1xuICAgICAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5kZWxldGVWZXJ0ZXhBcnJheSh0aGlzLlZBT3Nba2V5XSk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5WQU9zW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMuYXR0cmlidXRlcykge1xuICAgICAgICAgICAgdGhpcy5nbC5kZWxldGVCdWZmZXIodGhpcy5hdHRyaWJ1dGVzW2tleV0uYnVmZmVyKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IFRyYW5zZm9ybSB9IGZyb20gJy4vVHJhbnNmb3JtLmpzJztcbmltcG9ydCB7IE1hdDMgfSBmcm9tICcuLi9tYXRoL01hdDMuanMnO1xuaW1wb3J0IHsgTWF0NCB9IGZyb20gJy4uL21hdGgvTWF0NC5qcyc7XG5cbmxldCBJRCA9IDA7XG5cbmV4cG9ydCBjbGFzcyBNZXNoIGV4dGVuZHMgVHJhbnNmb3JtIHtcbiAgICBjb25zdHJ1Y3RvcihnbCwgeyBnZW9tZXRyeSwgcHJvZ3JhbSwgbW9kZSA9IGdsLlRSSUFOR0xFUywgZnJ1c3R1bUN1bGxlZCA9IHRydWUsIHJlbmRlck9yZGVyID0gMCB9ID0ge30pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgaWYgKCFnbC5jYW52YXMpIGNvbnNvbGUuZXJyb3IoJ2dsIG5vdCBwYXNzZWQgYXMgZmlyc3QgYXJndW1lbnQgdG8gTWVzaCcpO1xuICAgICAgICB0aGlzLmdsID0gZ2w7XG4gICAgICAgIHRoaXMuaWQgPSBJRCsrO1xuICAgICAgICB0aGlzLmdlb21ldHJ5ID0gZ2VvbWV0cnk7XG4gICAgICAgIHRoaXMucHJvZ3JhbSA9IHByb2dyYW07XG4gICAgICAgIHRoaXMubW9kZSA9IG1vZGU7XG5cbiAgICAgICAgLy8gVXNlZCB0byBza2lwIGZydXN0dW0gY3VsbGluZ1xuICAgICAgICB0aGlzLmZydXN0dW1DdWxsZWQgPSBmcnVzdHVtQ3VsbGVkO1xuXG4gICAgICAgIC8vIE92ZXJyaWRlIHNvcnRpbmcgdG8gZm9yY2UgYW4gb3JkZXJcbiAgICAgICAgdGhpcy5yZW5kZXJPcmRlciA9IHJlbmRlck9yZGVyO1xuICAgICAgICB0aGlzLm1vZGVsVmlld01hdHJpeCA9IG5ldyBNYXQ0KCk7XG4gICAgICAgIHRoaXMubm9ybWFsTWF0cml4ID0gbmV3IE1hdDMoKTtcbiAgICAgICAgdGhpcy5iZWZvcmVSZW5kZXJDYWxsYmFja3MgPSBbXTtcbiAgICAgICAgdGhpcy5hZnRlclJlbmRlckNhbGxiYWNrcyA9IFtdO1xuICAgIH1cblxuICAgIG9uQmVmb3JlUmVuZGVyKGYpIHtcbiAgICAgICAgdGhpcy5iZWZvcmVSZW5kZXJDYWxsYmFja3MucHVzaChmKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgb25BZnRlclJlbmRlcihmKSB7XG4gICAgICAgIHRoaXMuYWZ0ZXJSZW5kZXJDYWxsYmFja3MucHVzaChmKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZHJhdyh7IGNhbWVyYSB9ID0ge30pIHtcbiAgICAgICAgaWYgKGNhbWVyYSkge1xuICAgICAgICAgICAgLy8gQWRkIGVtcHR5IG1hdHJpeCB1bmlmb3JtcyB0byBwcm9ncmFtIGlmIHVuc2V0XG4gICAgICAgICAgICBpZiAoIXRoaXMucHJvZ3JhbS51bmlmb3Jtcy5tb2RlbE1hdHJpeCkge1xuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5wcm9ncmFtLnVuaWZvcm1zLCB7XG4gICAgICAgICAgICAgICAgICAgIG1vZGVsTWF0cml4OiB7IHZhbHVlOiBudWxsIH0sXG4gICAgICAgICAgICAgICAgICAgIHZpZXdNYXRyaXg6IHsgdmFsdWU6IG51bGwgfSxcbiAgICAgICAgICAgICAgICAgICAgbW9kZWxWaWV3TWF0cml4OiB7IHZhbHVlOiBudWxsIH0sXG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbE1hdHJpeDogeyB2YWx1ZTogbnVsbCB9LFxuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0aW9uTWF0cml4OiB7IHZhbHVlOiBudWxsIH0sXG4gICAgICAgICAgICAgICAgICAgIGNhbWVyYVBvc2l0aW9uOiB7IHZhbHVlOiBudWxsIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldCB0aGUgbWF0cml4IHVuaWZvcm1zXG4gICAgICAgICAgICB0aGlzLnByb2dyYW0udW5pZm9ybXMucHJvamVjdGlvbk1hdHJpeC52YWx1ZSA9IGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4O1xuICAgICAgICAgICAgdGhpcy5wcm9ncmFtLnVuaWZvcm1zLmNhbWVyYVBvc2l0aW9uLnZhbHVlID0gY2FtZXJhLndvcmxkUG9zaXRpb247XG4gICAgICAgICAgICB0aGlzLnByb2dyYW0udW5pZm9ybXMudmlld01hdHJpeC52YWx1ZSA9IGNhbWVyYS52aWV3TWF0cml4O1xuICAgICAgICAgICAgdGhpcy5tb2RlbFZpZXdNYXRyaXgubXVsdGlwbHkoY2FtZXJhLnZpZXdNYXRyaXgsIHRoaXMud29ybGRNYXRyaXgpO1xuICAgICAgICAgICAgdGhpcy5ub3JtYWxNYXRyaXguZ2V0Tm9ybWFsTWF0cml4KHRoaXMubW9kZWxWaWV3TWF0cml4KTtcbiAgICAgICAgICAgIHRoaXMucHJvZ3JhbS51bmlmb3Jtcy5tb2RlbE1hdHJpeC52YWx1ZSA9IHRoaXMud29ybGRNYXRyaXg7XG4gICAgICAgICAgICB0aGlzLnByb2dyYW0udW5pZm9ybXMubW9kZWxWaWV3TWF0cml4LnZhbHVlID0gdGhpcy5tb2RlbFZpZXdNYXRyaXg7XG4gICAgICAgICAgICB0aGlzLnByb2dyYW0udW5pZm9ybXMubm9ybWFsTWF0cml4LnZhbHVlID0gdGhpcy5ub3JtYWxNYXRyaXg7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5iZWZvcmVSZW5kZXJDYWxsYmFja3MuZm9yRWFjaCgoZikgPT4gZiAmJiBmKHsgbWVzaDogdGhpcywgY2FtZXJhIH0pKTtcblxuICAgICAgICAvLyBkZXRlcm1pbmUgaWYgZmFjZXMgbmVlZCB0byBiZSBmbGlwcGVkIC0gd2hlbiBtZXNoIHNjYWxlZCBuZWdhdGl2ZWx5XG4gICAgICAgIGxldCBmbGlwRmFjZXMgPSB0aGlzLnByb2dyYW0uY3VsbEZhY2UgJiYgdGhpcy53b3JsZE1hdHJpeC5kZXRlcm1pbmFudCgpIDwgMDtcbiAgICAgICAgdGhpcy5wcm9ncmFtLnVzZSh7IGZsaXBGYWNlcyB9KTtcbiAgICAgICAgdGhpcy5nZW9tZXRyeS5kcmF3KHsgbW9kZTogdGhpcy5tb2RlLCBwcm9ncmFtOiB0aGlzLnByb2dyYW0gfSk7XG4gICAgICAgIHRoaXMuYWZ0ZXJSZW5kZXJDYWxsYmFja3MuZm9yRWFjaCgoZikgPT4gZiAmJiBmKHsgbWVzaDogdGhpcywgY2FtZXJhIH0pKTtcbiAgICB9XG59XG4iLCIvLyBUT0RPOiB1cGxvYWQgZW1wdHkgdGV4dHVyZSBpZiBudWxsID8gbWF5YmUgbm90XG4vLyBUT0RPOiB1cGxvYWQgaWRlbnRpdHkgbWF0cml4IGlmIG51bGwgP1xuLy8gVE9ETzogc2FtcGxlciBDdWJlXG5cbmxldCBJRCA9IDE7XG5cbi8vIGNhY2hlIG9mIHR5cGVkIGFycmF5cyB1c2VkIHRvIGZsYXR0ZW4gdW5pZm9ybSBhcnJheXNcbmNvbnN0IGFycmF5Q2FjaGVGMzIgPSB7fTtcblxuZXhwb3J0IGNsYXNzIFByb2dyYW0ge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBnbCxcbiAgICAgICAge1xuICAgICAgICAgICAgdmVydGV4LFxuICAgICAgICAgICAgZnJhZ21lbnQsXG4gICAgICAgICAgICB1bmlmb3JtcyA9IHt9LFxuXG4gICAgICAgICAgICB0cmFuc3BhcmVudCA9IGZhbHNlLFxuICAgICAgICAgICAgY3VsbEZhY2UgPSBnbC5CQUNLLFxuICAgICAgICAgICAgZnJvbnRGYWNlID0gZ2wuQ0NXLFxuICAgICAgICAgICAgZGVwdGhUZXN0ID0gdHJ1ZSxcbiAgICAgICAgICAgIGRlcHRoV3JpdGUgPSB0cnVlLFxuICAgICAgICAgICAgZGVwdGhGdW5jID0gZ2wuTEVTUyxcbiAgICAgICAgfSA9IHt9XG4gICAgKSB7XG4gICAgICAgIGlmICghZ2wuY2FudmFzKSBjb25zb2xlLmVycm9yKCdnbCBub3QgcGFzc2VkIGFzIGZpcnN0IGFyZ3VtZW50IHRvIFByb2dyYW0nKTtcbiAgICAgICAgdGhpcy5nbCA9IGdsO1xuICAgICAgICB0aGlzLnVuaWZvcm1zID0gdW5pZm9ybXM7XG4gICAgICAgIHRoaXMuaWQgPSBJRCsrO1xuXG4gICAgICAgIGlmICghdmVydGV4KSBjb25zb2xlLndhcm4oJ3ZlcnRleCBzaGFkZXIgbm90IHN1cHBsaWVkJyk7XG4gICAgICAgIGlmICghZnJhZ21lbnQpIGNvbnNvbGUud2FybignZnJhZ21lbnQgc2hhZGVyIG5vdCBzdXBwbGllZCcpO1xuXG4gICAgICAgIC8vIFN0b3JlIHByb2dyYW0gc3RhdGVcbiAgICAgICAgdGhpcy50cmFuc3BhcmVudCA9IHRyYW5zcGFyZW50O1xuICAgICAgICB0aGlzLmN1bGxGYWNlID0gY3VsbEZhY2U7XG4gICAgICAgIHRoaXMuZnJvbnRGYWNlID0gZnJvbnRGYWNlO1xuICAgICAgICB0aGlzLmRlcHRoVGVzdCA9IGRlcHRoVGVzdDtcbiAgICAgICAgdGhpcy5kZXB0aFdyaXRlID0gZGVwdGhXcml0ZTtcbiAgICAgICAgdGhpcy5kZXB0aEZ1bmMgPSBkZXB0aEZ1bmM7XG4gICAgICAgIHRoaXMuYmxlbmRGdW5jID0ge307XG4gICAgICAgIHRoaXMuYmxlbmRFcXVhdGlvbiA9IHt9O1xuXG4gICAgICAgIC8vIHNldCBkZWZhdWx0IGJsZW5kRnVuYyBpZiB0cmFuc3BhcmVudCBmbGFnZ2VkXG4gICAgICAgIGlmICh0aGlzLnRyYW5zcGFyZW50ICYmICF0aGlzLmJsZW5kRnVuYy5zcmMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmdsLnJlbmRlcmVyLnByZW11bHRpcGxpZWRBbHBoYSkgdGhpcy5zZXRCbGVuZEZ1bmModGhpcy5nbC5PTkUsIHRoaXMuZ2wuT05FX01JTlVTX1NSQ19BTFBIQSk7XG4gICAgICAgICAgICBlbHNlIHRoaXMuc2V0QmxlbmRGdW5jKHRoaXMuZ2wuU1JDX0FMUEhBLCB0aGlzLmdsLk9ORV9NSU5VU19TUkNfQUxQSEEpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29tcGlsZSB2ZXJ0ZXggc2hhZGVyIGFuZCBsb2cgZXJyb3JzXG4gICAgICAgIGNvbnN0IHZlcnRleFNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcihnbC5WRVJURVhfU0hBREVSKTtcbiAgICAgICAgZ2wuc2hhZGVyU291cmNlKHZlcnRleFNoYWRlciwgdmVydGV4KTtcbiAgICAgICAgZ2wuY29tcGlsZVNoYWRlcih2ZXJ0ZXhTaGFkZXIpO1xuICAgICAgICBpZiAoZ2wuZ2V0U2hhZGVySW5mb0xvZyh2ZXJ0ZXhTaGFkZXIpICE9PSAnJykge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGAke2dsLmdldFNoYWRlckluZm9Mb2codmVydGV4U2hhZGVyKX1cXG5WZXJ0ZXggU2hhZGVyXFxuJHthZGRMaW5lTnVtYmVycyh2ZXJ0ZXgpfWApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29tcGlsZSBmcmFnbWVudCBzaGFkZXIgYW5kIGxvZyBlcnJvcnNcbiAgICAgICAgY29uc3QgZnJhZ21lbnRTaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIoZ2wuRlJBR01FTlRfU0hBREVSKTtcbiAgICAgICAgZ2wuc2hhZGVyU291cmNlKGZyYWdtZW50U2hhZGVyLCBmcmFnbWVudCk7XG4gICAgICAgIGdsLmNvbXBpbGVTaGFkZXIoZnJhZ21lbnRTaGFkZXIpO1xuICAgICAgICBpZiAoZ2wuZ2V0U2hhZGVySW5mb0xvZyhmcmFnbWVudFNoYWRlcikgIT09ICcnKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYCR7Z2wuZ2V0U2hhZGVySW5mb0xvZyhmcmFnbWVudFNoYWRlcil9XFxuRnJhZ21lbnQgU2hhZGVyXFxuJHthZGRMaW5lTnVtYmVycyhmcmFnbWVudCl9YCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjb21waWxlIHByb2dyYW0gYW5kIGxvZyBlcnJvcnNcbiAgICAgICAgdGhpcy5wcm9ncmFtID0gZ2wuY3JlYXRlUHJvZ3JhbSgpO1xuICAgICAgICBnbC5hdHRhY2hTaGFkZXIodGhpcy5wcm9ncmFtLCB2ZXJ0ZXhTaGFkZXIpO1xuICAgICAgICBnbC5hdHRhY2hTaGFkZXIodGhpcy5wcm9ncmFtLCBmcmFnbWVudFNoYWRlcik7XG4gICAgICAgIGdsLmxpbmtQcm9ncmFtKHRoaXMucHJvZ3JhbSk7XG4gICAgICAgIGlmICghZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcih0aGlzLnByb2dyYW0sIGdsLkxJTktfU1RBVFVTKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUud2FybihnbC5nZXRQcm9ncmFtSW5mb0xvZyh0aGlzLnByb2dyYW0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlbW92ZSBzaGFkZXIgb25jZSBsaW5rZWRcbiAgICAgICAgZ2wuZGVsZXRlU2hhZGVyKHZlcnRleFNoYWRlcik7XG4gICAgICAgIGdsLmRlbGV0ZVNoYWRlcihmcmFnbWVudFNoYWRlcik7XG5cbiAgICAgICAgLy8gR2V0IGFjdGl2ZSB1bmlmb3JtIGxvY2F0aW9uc1xuICAgICAgICB0aGlzLnVuaWZvcm1Mb2NhdGlvbnMgPSBuZXcgTWFwKCk7XG4gICAgICAgIGxldCBudW1Vbmlmb3JtcyA9IGdsLmdldFByb2dyYW1QYXJhbWV0ZXIodGhpcy5wcm9ncmFtLCBnbC5BQ1RJVkVfVU5JRk9STVMpO1xuICAgICAgICBmb3IgKGxldCB1SW5kZXggPSAwOyB1SW5kZXggPCBudW1Vbmlmb3JtczsgdUluZGV4KyspIHtcbiAgICAgICAgICAgIGxldCB1bmlmb3JtID0gZ2wuZ2V0QWN0aXZlVW5pZm9ybSh0aGlzLnByb2dyYW0sIHVJbmRleCk7XG4gICAgICAgICAgICB0aGlzLnVuaWZvcm1Mb2NhdGlvbnMuc2V0KHVuaWZvcm0sIGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLnByb2dyYW0sIHVuaWZvcm0ubmFtZSkpO1xuXG4gICAgICAgICAgICAvLyBzcGxpdCB1bmlmb3JtcycgbmFtZXMgdG8gc2VwYXJhdGUgYXJyYXkgYW5kIHN0cnVjdCBkZWNsYXJhdGlvbnNcbiAgICAgICAgICAgIGNvbnN0IHNwbGl0ID0gdW5pZm9ybS5uYW1lLm1hdGNoKC8oXFx3KykvZyk7XG5cbiAgICAgICAgICAgIHVuaWZvcm0udW5pZm9ybU5hbWUgPSBzcGxpdFswXTtcbiAgICAgICAgICAgIHVuaWZvcm0ubmFtZUNvbXBvbmVudHMgPSBzcGxpdC5zbGljZSgxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdldCBhY3RpdmUgYXR0cmlidXRlIGxvY2F0aW9uc1xuICAgICAgICB0aGlzLmF0dHJpYnV0ZUxvY2F0aW9ucyA9IG5ldyBNYXAoKTtcbiAgICAgICAgY29uc3QgbG9jYXRpb25zID0gW107XG4gICAgICAgIGNvbnN0IG51bUF0dHJpYnMgPSBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHRoaXMucHJvZ3JhbSwgZ2wuQUNUSVZFX0FUVFJJQlVURVMpO1xuICAgICAgICBmb3IgKGxldCBhSW5kZXggPSAwOyBhSW5kZXggPCBudW1BdHRyaWJzOyBhSW5kZXgrKykge1xuICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlID0gZ2wuZ2V0QWN0aXZlQXR0cmliKHRoaXMucHJvZ3JhbSwgYUluZGV4KTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2F0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24odGhpcy5wcm9ncmFtLCBhdHRyaWJ1dGUubmFtZSk7XG4gICAgICAgICAgICAvLyBJZ25vcmUgc3BlY2lhbCBidWlsdC1pbiBpbnB1dHMuIGVnIGdsX1ZlcnRleElELCBnbF9JbnN0YW5jZUlEXG4gICAgICAgICAgICBpZiAobG9jYXRpb24gPT09IC0xKSBjb250aW51ZTtcbiAgICAgICAgICAgIGxvY2F0aW9uc1tsb2NhdGlvbl0gPSBhdHRyaWJ1dGUubmFtZTtcbiAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlTG9jYXRpb25zLnNldChhdHRyaWJ1dGUsIGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmF0dHJpYnV0ZU9yZGVyID0gbG9jYXRpb25zLmpvaW4oJycpO1xuICAgIH1cblxuICAgIHNldEJsZW5kRnVuYyhzcmMsIGRzdCwgc3JjQWxwaGEsIGRzdEFscGhhKSB7XG4gICAgICAgIHRoaXMuYmxlbmRGdW5jLnNyYyA9IHNyYztcbiAgICAgICAgdGhpcy5ibGVuZEZ1bmMuZHN0ID0gZHN0O1xuICAgICAgICB0aGlzLmJsZW5kRnVuYy5zcmNBbHBoYSA9IHNyY0FscGhhO1xuICAgICAgICB0aGlzLmJsZW5kRnVuYy5kc3RBbHBoYSA9IGRzdEFscGhhO1xuICAgICAgICBpZiAoc3JjKSB0aGlzLnRyYW5zcGFyZW50ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBzZXRCbGVuZEVxdWF0aW9uKG1vZGVSR0IsIG1vZGVBbHBoYSkge1xuICAgICAgICB0aGlzLmJsZW5kRXF1YXRpb24ubW9kZVJHQiA9IG1vZGVSR0I7XG4gICAgICAgIHRoaXMuYmxlbmRFcXVhdGlvbi5tb2RlQWxwaGEgPSBtb2RlQWxwaGE7XG4gICAgfVxuXG4gICAgYXBwbHlTdGF0ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuZGVwdGhUZXN0KSB0aGlzLmdsLnJlbmRlcmVyLmVuYWJsZSh0aGlzLmdsLkRFUFRIX1RFU1QpO1xuICAgICAgICBlbHNlIHRoaXMuZ2wucmVuZGVyZXIuZGlzYWJsZSh0aGlzLmdsLkRFUFRIX1RFU1QpO1xuXG4gICAgICAgIGlmICh0aGlzLmN1bGxGYWNlKSB0aGlzLmdsLnJlbmRlcmVyLmVuYWJsZSh0aGlzLmdsLkNVTExfRkFDRSk7XG4gICAgICAgIGVsc2UgdGhpcy5nbC5yZW5kZXJlci5kaXNhYmxlKHRoaXMuZ2wuQ1VMTF9GQUNFKTtcblxuICAgICAgICBpZiAodGhpcy5ibGVuZEZ1bmMuc3JjKSB0aGlzLmdsLnJlbmRlcmVyLmVuYWJsZSh0aGlzLmdsLkJMRU5EKTtcbiAgICAgICAgZWxzZSB0aGlzLmdsLnJlbmRlcmVyLmRpc2FibGUodGhpcy5nbC5CTEVORCk7XG5cbiAgICAgICAgaWYgKHRoaXMuY3VsbEZhY2UpIHRoaXMuZ2wucmVuZGVyZXIuc2V0Q3VsbEZhY2UodGhpcy5jdWxsRmFjZSk7XG4gICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuc2V0RnJvbnRGYWNlKHRoaXMuZnJvbnRGYWNlKTtcbiAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5zZXREZXB0aE1hc2sodGhpcy5kZXB0aFdyaXRlKTtcbiAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5zZXREZXB0aEZ1bmModGhpcy5kZXB0aEZ1bmMpO1xuICAgICAgICBpZiAodGhpcy5ibGVuZEZ1bmMuc3JjKVxuICAgICAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5zZXRCbGVuZEZ1bmModGhpcy5ibGVuZEZ1bmMuc3JjLCB0aGlzLmJsZW5kRnVuYy5kc3QsIHRoaXMuYmxlbmRGdW5jLnNyY0FscGhhLCB0aGlzLmJsZW5kRnVuYy5kc3RBbHBoYSk7XG4gICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuc2V0QmxlbmRFcXVhdGlvbih0aGlzLmJsZW5kRXF1YXRpb24ubW9kZVJHQiwgdGhpcy5ibGVuZEVxdWF0aW9uLm1vZGVBbHBoYSk7XG4gICAgfVxuXG4gICAgdXNlKHsgZmxpcEZhY2VzID0gZmFsc2UgfSA9IHt9KSB7XG4gICAgICAgIGxldCB0ZXh0dXJlVW5pdCA9IC0xO1xuICAgICAgICBjb25zdCBwcm9ncmFtQWN0aXZlID0gdGhpcy5nbC5yZW5kZXJlci5zdGF0ZS5jdXJyZW50UHJvZ3JhbSA9PT0gdGhpcy5pZDtcblxuICAgICAgICAvLyBBdm9pZCBnbCBjYWxsIGlmIHByb2dyYW0gYWxyZWFkeSBpbiB1c2VcbiAgICAgICAgaWYgKCFwcm9ncmFtQWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLmdsLnVzZVByb2dyYW0odGhpcy5wcm9ncmFtKTtcbiAgICAgICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuc3RhdGUuY3VycmVudFByb2dyYW0gPSB0aGlzLmlkO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IG9ubHkgdGhlIGFjdGl2ZSB1bmlmb3JtcyBmb3VuZCBpbiB0aGUgc2hhZGVyXG4gICAgICAgIHRoaXMudW5pZm9ybUxvY2F0aW9ucy5mb3JFYWNoKChsb2NhdGlvbiwgYWN0aXZlVW5pZm9ybSkgPT4ge1xuICAgICAgICAgICAgbGV0IHVuaWZvcm0gPSB0aGlzLnVuaWZvcm1zW2FjdGl2ZVVuaWZvcm0udW5pZm9ybU5hbWVdO1xuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNvbXBvbmVudCBvZiBhY3RpdmVVbmlmb3JtLm5hbWVDb21wb25lbnRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF1bmlmb3JtKSBicmVhaztcblxuICAgICAgICAgICAgICAgIGlmIChjb21wb25lbnQgaW4gdW5pZm9ybSkge1xuICAgICAgICAgICAgICAgICAgICB1bmlmb3JtID0gdW5pZm9ybVtjb21wb25lbnRdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh1bmlmb3JtLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB1bmlmb3JtID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghdW5pZm9ybSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB3YXJuKGBBY3RpdmUgdW5pZm9ybSAke2FjdGl2ZVVuaWZvcm0ubmFtZX0gaGFzIG5vdCBiZWVuIHN1cHBsaWVkYCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh1bmlmb3JtICYmIHVuaWZvcm0udmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB3YXJuKGAke2FjdGl2ZVVuaWZvcm0ubmFtZX0gdW5pZm9ybSBpcyBtaXNzaW5nIGEgdmFsdWUgcGFyYW1ldGVyYCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh1bmlmb3JtLnZhbHVlLnRleHR1cmUpIHtcbiAgICAgICAgICAgICAgICB0ZXh0dXJlVW5pdCA9IHRleHR1cmVVbml0ICsgMTtcblxuICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRleHR1cmUgbmVlZHMgdG8gYmUgdXBkYXRlZFxuICAgICAgICAgICAgICAgIHVuaWZvcm0udmFsdWUudXBkYXRlKHRleHR1cmVVbml0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2V0VW5pZm9ybSh0aGlzLmdsLCBhY3RpdmVVbmlmb3JtLnR5cGUsIGxvY2F0aW9uLCB0ZXh0dXJlVW5pdCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEZvciB0ZXh0dXJlIGFycmF5cywgc2V0IHVuaWZvcm0gYXMgYW4gYXJyYXkgb2YgdGV4dHVyZSB1bml0cyBpbnN0ZWFkIG9mIGp1c3Qgb25lXG4gICAgICAgICAgICBpZiAodW5pZm9ybS52YWx1ZS5sZW5ndGggJiYgdW5pZm9ybS52YWx1ZVswXS50ZXh0dXJlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGV4dHVyZVVuaXRzID0gW107XG4gICAgICAgICAgICAgICAgdW5pZm9ybS52YWx1ZS5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlVW5pdCA9IHRleHR1cmVVbml0ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUudXBkYXRlKHRleHR1cmVVbml0KTtcbiAgICAgICAgICAgICAgICAgICAgdGV4dHVyZVVuaXRzLnB1c2godGV4dHVyZVVuaXQpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldFVuaWZvcm0odGhpcy5nbCwgYWN0aXZlVW5pZm9ybS50eXBlLCBsb2NhdGlvbiwgdGV4dHVyZVVuaXRzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2V0VW5pZm9ybSh0aGlzLmdsLCBhY3RpdmVVbmlmb3JtLnR5cGUsIGxvY2F0aW9uLCB1bmlmb3JtLnZhbHVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hcHBseVN0YXRlKCk7XG4gICAgICAgIGlmIChmbGlwRmFjZXMpIHRoaXMuZ2wucmVuZGVyZXIuc2V0RnJvbnRGYWNlKHRoaXMuZnJvbnRGYWNlID09PSB0aGlzLmdsLkNDVyA/IHRoaXMuZ2wuQ1cgOiB0aGlzLmdsLkNDVyk7XG4gICAgfVxuXG4gICAgcmVtb3ZlKCkge1xuICAgICAgICB0aGlzLmdsLmRlbGV0ZVByb2dyYW0odGhpcy5wcm9ncmFtKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNldFVuaWZvcm0oZ2wsIHR5cGUsIGxvY2F0aW9uLCB2YWx1ZSkge1xuICAgIHZhbHVlID0gdmFsdWUubGVuZ3RoID8gZmxhdHRlbih2YWx1ZSkgOiB2YWx1ZTtcbiAgICBjb25zdCBzZXRWYWx1ZSA9IGdsLnJlbmRlcmVyLnN0YXRlLnVuaWZvcm1Mb2NhdGlvbnMuZ2V0KGxvY2F0aW9uKTtcblxuICAgIC8vIEF2b2lkIHJlZHVuZGFudCB1bmlmb3JtIGNvbW1hbmRzXG4gICAgaWYgKHZhbHVlLmxlbmd0aCkge1xuICAgICAgICBpZiAoc2V0VmFsdWUgPT09IHVuZGVmaW5lZCB8fCBzZXRWYWx1ZS5sZW5ndGggIT09IHZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gY2xvbmUgYXJyYXkgdG8gc3RvcmUgYXMgY2FjaGVcbiAgICAgICAgICAgIGdsLnJlbmRlcmVyLnN0YXRlLnVuaWZvcm1Mb2NhdGlvbnMuc2V0KGxvY2F0aW9uLCB2YWx1ZS5zbGljZSgwKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoYXJyYXlzRXF1YWwoc2V0VmFsdWUsIHZhbHVlKSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgY2FjaGVkIGFycmF5IHZhbHVlc1xuICAgICAgICAgICAgc2V0VmFsdWUuc2V0ID8gc2V0VmFsdWUuc2V0KHZhbHVlKSA6IHNldEFycmF5KHNldFZhbHVlLCB2YWx1ZSk7XG4gICAgICAgICAgICBnbC5yZW5kZXJlci5zdGF0ZS51bmlmb3JtTG9jYXRpb25zLnNldChsb2NhdGlvbiwgc2V0VmFsdWUpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHNldFZhbHVlID09PSB2YWx1ZSkgcmV0dXJuO1xuICAgICAgICBnbC5yZW5kZXJlci5zdGF0ZS51bmlmb3JtTG9jYXRpb25zLnNldChsb2NhdGlvbiwgdmFsdWUpO1xuICAgIH1cblxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIDUxMjY6XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUubGVuZ3RoID8gZ2wudW5pZm9ybTFmdihsb2NhdGlvbiwgdmFsdWUpIDogZ2wudW5pZm9ybTFmKGxvY2F0aW9uLCB2YWx1ZSk7IC8vIEZMT0FUXG4gICAgICAgIGNhc2UgMzU2NjQ6XG4gICAgICAgICAgICByZXR1cm4gZ2wudW5pZm9ybTJmdihsb2NhdGlvbiwgdmFsdWUpOyAvLyBGTE9BVF9WRUMyXG4gICAgICAgIGNhc2UgMzU2NjU6XG4gICAgICAgICAgICByZXR1cm4gZ2wudW5pZm9ybTNmdihsb2NhdGlvbiwgdmFsdWUpOyAvLyBGTE9BVF9WRUMzXG4gICAgICAgIGNhc2UgMzU2NjY6XG4gICAgICAgICAgICByZXR1cm4gZ2wudW5pZm9ybTRmdihsb2NhdGlvbiwgdmFsdWUpOyAvLyBGTE9BVF9WRUM0XG4gICAgICAgIGNhc2UgMzU2NzA6IC8vIEJPT0xcbiAgICAgICAgY2FzZSA1MTI0OiAvLyBJTlRcbiAgICAgICAgY2FzZSAzNTY3ODogLy8gU0FNUExFUl8yRFxuICAgICAgICBjYXNlIDM1NjgwOlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLmxlbmd0aCA/IGdsLnVuaWZvcm0xaXYobG9jYXRpb24sIHZhbHVlKSA6IGdsLnVuaWZvcm0xaShsb2NhdGlvbiwgdmFsdWUpOyAvLyBTQU1QTEVSX0NVQkVcbiAgICAgICAgY2FzZSAzNTY3MTogLy8gQk9PTF9WRUMyXG4gICAgICAgIGNhc2UgMzU2Njc6XG4gICAgICAgICAgICByZXR1cm4gZ2wudW5pZm9ybTJpdihsb2NhdGlvbiwgdmFsdWUpOyAvLyBJTlRfVkVDMlxuICAgICAgICBjYXNlIDM1NjcyOiAvLyBCT09MX1ZFQzNcbiAgICAgICAgY2FzZSAzNTY2ODpcbiAgICAgICAgICAgIHJldHVybiBnbC51bmlmb3JtM2l2KGxvY2F0aW9uLCB2YWx1ZSk7IC8vIElOVF9WRUMzXG4gICAgICAgIGNhc2UgMzU2NzM6IC8vIEJPT0xfVkVDNFxuICAgICAgICBjYXNlIDM1NjY5OlxuICAgICAgICAgICAgcmV0dXJuIGdsLnVuaWZvcm00aXYobG9jYXRpb24sIHZhbHVlKTsgLy8gSU5UX1ZFQzRcbiAgICAgICAgY2FzZSAzNTY3NDpcbiAgICAgICAgICAgIHJldHVybiBnbC51bmlmb3JtTWF0cml4MmZ2KGxvY2F0aW9uLCBmYWxzZSwgdmFsdWUpOyAvLyBGTE9BVF9NQVQyXG4gICAgICAgIGNhc2UgMzU2NzU6XG4gICAgICAgICAgICByZXR1cm4gZ2wudW5pZm9ybU1hdHJpeDNmdihsb2NhdGlvbiwgZmFsc2UsIHZhbHVlKTsgLy8gRkxPQVRfTUFUM1xuICAgICAgICBjYXNlIDM1Njc2OlxuICAgICAgICAgICAgcmV0dXJuIGdsLnVuaWZvcm1NYXRyaXg0ZnYobG9jYXRpb24sIGZhbHNlLCB2YWx1ZSk7IC8vIEZMT0FUX01BVDRcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGFkZExpbmVOdW1iZXJzKHN0cmluZykge1xuICAgIGxldCBsaW5lcyA9IHN0cmluZy5zcGxpdCgnXFxuJyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsaW5lc1tpXSA9IGkgKyAxICsgJzogJyArIGxpbmVzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gbGluZXMuam9pbignXFxuJyk7XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW4oYSkge1xuICAgIGNvbnN0IGFycmF5TGVuID0gYS5sZW5ndGg7XG4gICAgY29uc3QgdmFsdWVMZW4gPSBhWzBdLmxlbmd0aDtcbiAgICBpZiAodmFsdWVMZW4gPT09IHVuZGVmaW5lZCkgcmV0dXJuIGE7XG4gICAgY29uc3QgbGVuZ3RoID0gYXJyYXlMZW4gKiB2YWx1ZUxlbjtcbiAgICBsZXQgdmFsdWUgPSBhcnJheUNhY2hlRjMyW2xlbmd0aF07XG4gICAgaWYgKCF2YWx1ZSkgYXJyYXlDYWNoZUYzMltsZW5ndGhdID0gdmFsdWUgPSBuZXcgRmxvYXQzMkFycmF5KGxlbmd0aCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheUxlbjsgaSsrKSB2YWx1ZS5zZXQoYVtpXSwgaSAqIHZhbHVlTGVuKTtcbiAgICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGFycmF5c0VxdWFsKGEsIGIpIHtcbiAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBhLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZiAoYVtpXSAhPT0gYltpXSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gc2V0QXJyYXkoYSwgYikge1xuICAgIGZvciAobGV0IGkgPSAwLCBsID0gYS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgYVtpXSA9IGJbaV07XG4gICAgfVxufVxuXG5sZXQgd2FybkNvdW50ID0gMDtcbmZ1bmN0aW9uIHdhcm4obWVzc2FnZSkge1xuICAgIGlmICh3YXJuQ291bnQgPiAxMDApIHJldHVybjtcbiAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7XG4gICAgd2FybkNvdW50Kys7XG4gICAgaWYgKHdhcm5Db3VudCA+IDEwMCkgY29uc29sZS53YXJuKCdNb3JlIHRoYW4gMTAwIHByb2dyYW0gd2FybmluZ3MgLSBzdG9wcGluZyBsb2dzLicpO1xufVxuIiwiaW1wb3J0IHsgR2VvbWV0cnkgfSBmcm9tICcuLi9jb3JlL0dlb21ldHJ5LmpzJztcbmltcG9ydCB7IFBsYW5lIH0gZnJvbSAnLi9QbGFuZS5qcyc7XG5cbmV4cG9ydCBjbGFzcyBCb3ggZXh0ZW5kcyBHZW9tZXRyeSB7XG4gICAgY29uc3RydWN0b3IoZ2wsIHsgd2lkdGggPSAxLCBoZWlnaHQgPSAxLCBkZXB0aCA9IDEsIHdpZHRoU2VnbWVudHMgPSAxLCBoZWlnaHRTZWdtZW50cyA9IDEsIGRlcHRoU2VnbWVudHMgPSAxLCBhdHRyaWJ1dGVzID0ge30gfSA9IHt9KSB7XG4gICAgICAgIGNvbnN0IHdTZWdzID0gd2lkdGhTZWdtZW50cztcbiAgICAgICAgY29uc3QgaFNlZ3MgPSBoZWlnaHRTZWdtZW50cztcbiAgICAgICAgY29uc3QgZFNlZ3MgPSBkZXB0aFNlZ21lbnRzO1xuXG4gICAgICAgIGNvbnN0IG51bSA9ICh3U2VncyArIDEpICogKGhTZWdzICsgMSkgKiAyICsgKHdTZWdzICsgMSkgKiAoZFNlZ3MgKyAxKSAqIDIgKyAoaFNlZ3MgKyAxKSAqIChkU2VncyArIDEpICogMjtcbiAgICAgICAgY29uc3QgbnVtSW5kaWNlcyA9ICh3U2VncyAqIGhTZWdzICogMiArIHdTZWdzICogZFNlZ3MgKiAyICsgaFNlZ3MgKiBkU2VncyAqIDIpICogNjtcblxuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IG5ldyBGbG9hdDMyQXJyYXkobnVtICogMyk7XG4gICAgICAgIGNvbnN0IG5vcm1hbCA9IG5ldyBGbG9hdDMyQXJyYXkobnVtICogMyk7XG4gICAgICAgIGNvbnN0IHV2ID0gbmV3IEZsb2F0MzJBcnJheShudW0gKiAyKTtcbiAgICAgICAgY29uc3QgaW5kZXggPSBudW0gPiA2NTUzNiA/IG5ldyBVaW50MzJBcnJheShudW1JbmRpY2VzKSA6IG5ldyBVaW50MTZBcnJheShudW1JbmRpY2VzKTtcblxuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGxldCBpaSA9IDA7XG5cbiAgICAgICAgLy8gbGVmdCwgcmlnaHRcbiAgICAgICAgUGxhbmUuYnVpbGRQbGFuZShwb3NpdGlvbiwgbm9ybWFsLCB1diwgaW5kZXgsIGRlcHRoLCBoZWlnaHQsIHdpZHRoLCBkU2VncywgaFNlZ3MsIDIsIDEsIDAsIC0xLCAtMSwgaSwgaWkpO1xuICAgICAgICBpICs9IChkU2VncyArIDEpICogKGhTZWdzICsgMSk7XG4gICAgICAgIGlpICs9IGRTZWdzICogaFNlZ3M7XG5cbiAgICAgICAgUGxhbmUuYnVpbGRQbGFuZShwb3NpdGlvbiwgbm9ybWFsLCB1diwgaW5kZXgsIGRlcHRoLCBoZWlnaHQsIC13aWR0aCwgZFNlZ3MsIGhTZWdzLCAyLCAxLCAwLCAxLCAtMSwgaSwgaWkpO1xuICAgICAgICBpICs9IChkU2VncyArIDEpICogKGhTZWdzICsgMSk7XG4gICAgICAgIGlpICs9IGRTZWdzICogaFNlZ3M7XG5cbiAgICAgICAgLy8gdG9wLCBib3R0b21cbiAgICAgICAgUGxhbmUuYnVpbGRQbGFuZShwb3NpdGlvbiwgbm9ybWFsLCB1diwgaW5kZXgsIHdpZHRoLCBkZXB0aCwgaGVpZ2h0LCBkU2Vncywgd1NlZ3MsIDAsIDIsIDEsIDEsIDEsIGksIGlpKTtcbiAgICAgICAgaSArPSAod1NlZ3MgKyAxKSAqIChkU2VncyArIDEpO1xuICAgICAgICBpaSArPSB3U2VncyAqIGRTZWdzO1xuXG4gICAgICAgIFBsYW5lLmJ1aWxkUGxhbmUocG9zaXRpb24sIG5vcm1hbCwgdXYsIGluZGV4LCB3aWR0aCwgZGVwdGgsIC1oZWlnaHQsIGRTZWdzLCB3U2VncywgMCwgMiwgMSwgMSwgLTEsIGksIGlpKTtcbiAgICAgICAgaSArPSAod1NlZ3MgKyAxKSAqIChkU2VncyArIDEpO1xuICAgICAgICBpaSArPSB3U2VncyAqIGRTZWdzO1xuXG4gICAgICAgIC8vIGZyb250LCBiYWNrXG4gICAgICAgIFBsYW5lLmJ1aWxkUGxhbmUocG9zaXRpb24sIG5vcm1hbCwgdXYsIGluZGV4LCB3aWR0aCwgaGVpZ2h0LCAtZGVwdGgsIHdTZWdzLCBoU2VncywgMCwgMSwgMiwgLTEsIC0xLCBpLCBpaSk7XG4gICAgICAgIGkgKz0gKHdTZWdzICsgMSkgKiAoaFNlZ3MgKyAxKTtcbiAgICAgICAgaWkgKz0gd1NlZ3MgKiBoU2VncztcblxuICAgICAgICBQbGFuZS5idWlsZFBsYW5lKHBvc2l0aW9uLCBub3JtYWwsIHV2LCBpbmRleCwgd2lkdGgsIGhlaWdodCwgZGVwdGgsIHdTZWdzLCBoU2VncywgMCwgMSwgMiwgMSwgLTEsIGksIGlpKTtcblxuICAgICAgICBPYmplY3QuYXNzaWduKGF0dHJpYnV0ZXMsIHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiB7IHNpemU6IDMsIGRhdGE6IHBvc2l0aW9uIH0sXG4gICAgICAgICAgICBub3JtYWw6IHsgc2l6ZTogMywgZGF0YTogbm9ybWFsIH0sXG4gICAgICAgICAgICB1djogeyBzaXplOiAyLCBkYXRhOiB1diB9LFxuICAgICAgICAgICAgaW5kZXg6IHsgZGF0YTogaW5kZXggfSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3VwZXIoZ2wsIGF0dHJpYnV0ZXMpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEdlb21ldHJ5IH0gZnJvbSAnLi4vY29yZS9HZW9tZXRyeS5qcyc7XG5cbmV4cG9ydCBjbGFzcyBQbGFuZSBleHRlbmRzIEdlb21ldHJ5IHtcbiAgICBjb25zdHJ1Y3RvcihnbCwgeyB3aWR0aCA9IDEsIGhlaWdodCA9IDEsIHdpZHRoU2VnbWVudHMgPSAxLCBoZWlnaHRTZWdtZW50cyA9IDEsIGF0dHJpYnV0ZXMgPSB7fSB9ID0ge30pIHtcbiAgICAgICAgY29uc3Qgd1NlZ3MgPSB3aWR0aFNlZ21lbnRzO1xuICAgICAgICBjb25zdCBoU2VncyA9IGhlaWdodFNlZ21lbnRzO1xuXG4gICAgICAgIC8vIERldGVybWluZSBsZW5ndGggb2YgYXJyYXlzXG4gICAgICAgIGNvbnN0IG51bSA9ICh3U2VncyArIDEpICogKGhTZWdzICsgMSk7XG4gICAgICAgIGNvbnN0IG51bUluZGljZXMgPSB3U2VncyAqIGhTZWdzICogNjtcblxuICAgICAgICAvLyBHZW5lcmF0ZSBlbXB0eSBhcnJheXMgb25jZVxuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IG5ldyBGbG9hdDMyQXJyYXkobnVtICogMyk7XG4gICAgICAgIGNvbnN0IG5vcm1hbCA9IG5ldyBGbG9hdDMyQXJyYXkobnVtICogMyk7XG4gICAgICAgIGNvbnN0IHV2ID0gbmV3IEZsb2F0MzJBcnJheShudW0gKiAyKTtcbiAgICAgICAgY29uc3QgaW5kZXggPSBudW1JbmRpY2VzID4gNjU1MzYgPyBuZXcgVWludDMyQXJyYXkobnVtSW5kaWNlcykgOiBuZXcgVWludDE2QXJyYXkobnVtSW5kaWNlcyk7XG5cbiAgICAgICAgUGxhbmUuYnVpbGRQbGFuZShwb3NpdGlvbiwgbm9ybWFsLCB1diwgaW5kZXgsIHdpZHRoLCBoZWlnaHQsIDAsIHdTZWdzLCBoU2Vncyk7XG5cbiAgICAgICAgT2JqZWN0LmFzc2lnbihhdHRyaWJ1dGVzLCB7XG4gICAgICAgICAgICBwb3NpdGlvbjogeyBzaXplOiAzLCBkYXRhOiBwb3NpdGlvbiB9LFxuICAgICAgICAgICAgbm9ybWFsOiB7IHNpemU6IDMsIGRhdGE6IG5vcm1hbCB9LFxuICAgICAgICAgICAgdXY6IHsgc2l6ZTogMiwgZGF0YTogdXYgfSxcbiAgICAgICAgICAgIGluZGV4OiB7IGRhdGE6IGluZGV4IH0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHN1cGVyKGdsLCBhdHRyaWJ1dGVzKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgYnVpbGRQbGFuZShwb3NpdGlvbiwgbm9ybWFsLCB1diwgaW5kZXgsIHdpZHRoLCBoZWlnaHQsIGRlcHRoLCB3U2VncywgaFNlZ3MsIHUgPSAwLCB2ID0gMSwgdyA9IDIsIHVEaXIgPSAxLCB2RGlyID0gLTEsIGkgPSAwLCBpaSA9IDApIHtcbiAgICAgICAgY29uc3QgaW8gPSBpO1xuICAgICAgICBjb25zdCBzZWdXID0gd2lkdGggLyB3U2VncztcbiAgICAgICAgY29uc3Qgc2VnSCA9IGhlaWdodCAvIGhTZWdzO1xuXG4gICAgICAgIGZvciAobGV0IGl5ID0gMDsgaXkgPD0gaFNlZ3M7IGl5KyspIHtcbiAgICAgICAgICAgIGxldCB5ID0gaXkgKiBzZWdIIC0gaGVpZ2h0IC8gMjtcbiAgICAgICAgICAgIGZvciAobGV0IGl4ID0gMDsgaXggPD0gd1NlZ3M7IGl4KyssIGkrKykge1xuICAgICAgICAgICAgICAgIGxldCB4ID0gaXggKiBzZWdXIC0gd2lkdGggLyAyO1xuXG4gICAgICAgICAgICAgICAgcG9zaXRpb25baSAqIDMgKyB1XSA9IHggKiB1RGlyO1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uW2kgKiAzICsgdl0gPSB5ICogdkRpcjtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbltpICogMyArIHddID0gZGVwdGggLyAyO1xuXG4gICAgICAgICAgICAgICAgbm9ybWFsW2kgKiAzICsgdV0gPSAwO1xuICAgICAgICAgICAgICAgIG5vcm1hbFtpICogMyArIHZdID0gMDtcbiAgICAgICAgICAgICAgICBub3JtYWxbaSAqIDMgKyB3XSA9IGRlcHRoID49IDAgPyAxIDogLTE7XG5cbiAgICAgICAgICAgICAgICB1dltpICogMl0gPSBpeCAvIHdTZWdzO1xuICAgICAgICAgICAgICAgIHV2W2kgKiAyICsgMV0gPSAxIC0gaXkgLyBoU2VncztcblxuICAgICAgICAgICAgICAgIGlmIChpeSA9PT0gaFNlZ3MgfHwgaXggPT09IHdTZWdzKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBsZXQgYSA9IGlvICsgaXggKyBpeSAqICh3U2VncyArIDEpO1xuICAgICAgICAgICAgICAgIGxldCBiID0gaW8gKyBpeCArIChpeSArIDEpICogKHdTZWdzICsgMSk7XG4gICAgICAgICAgICAgICAgbGV0IGMgPSBpbyArIGl4ICsgKGl5ICsgMSkgKiAod1NlZ3MgKyAxKSArIDE7XG4gICAgICAgICAgICAgICAgbGV0IGQgPSBpbyArIGl4ICsgaXkgKiAod1NlZ3MgKyAxKSArIDE7XG5cbiAgICAgICAgICAgICAgICBpbmRleFtpaSAqIDZdID0gYTtcbiAgICAgICAgICAgICAgICBpbmRleFtpaSAqIDYgKyAxXSA9IGI7XG4gICAgICAgICAgICAgICAgaW5kZXhbaWkgKiA2ICsgMl0gPSBkO1xuICAgICAgICAgICAgICAgIGluZGV4W2lpICogNiArIDNdID0gYjtcbiAgICAgICAgICAgICAgICBpbmRleFtpaSAqIDYgKyA0XSA9IGM7XG4gICAgICAgICAgICAgICAgaW5kZXhbaWkgKiA2ICsgNV0gPSBkO1xuICAgICAgICAgICAgICAgIGlpKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgKiBhcyBNYXQzRnVuYyBmcm9tICcuL2Z1bmN0aW9ucy9NYXQzRnVuYy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBNYXQzIGV4dGVuZHMgQXJyYXkge1xuICAgIGNvbnN0cnVjdG9yKG0wMCA9IDEsIG0wMSA9IDAsIG0wMiA9IDAsIG0xMCA9IDAsIG0xMSA9IDEsIG0xMiA9IDAsIG0yMCA9IDAsIG0yMSA9IDAsIG0yMiA9IDEpIHtcbiAgICAgICAgc3VwZXIobTAwLCBtMDEsIG0wMiwgbTEwLCBtMTEsIG0xMiwgbTIwLCBtMjEsIG0yMik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHNldChtMDAsIG0wMSwgbTAyLCBtMTAsIG0xMSwgbTEyLCBtMjAsIG0yMSwgbTIyKSB7XG4gICAgICAgIGlmIChtMDAubGVuZ3RoKSByZXR1cm4gdGhpcy5jb3B5KG0wMCk7XG4gICAgICAgIE1hdDNGdW5jLnNldCh0aGlzLCBtMDAsIG0wMSwgbTAyLCBtMTAsIG0xMSwgbTEyLCBtMjAsIG0yMSwgbTIyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdHJhbnNsYXRlKHYsIG0gPSB0aGlzKSB7XG4gICAgICAgIE1hdDNGdW5jLnRyYW5zbGF0ZSh0aGlzLCBtLCB2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcm90YXRlKHYsIG0gPSB0aGlzKSB7XG4gICAgICAgIE1hdDNGdW5jLnJvdGF0ZSh0aGlzLCBtLCB2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc2NhbGUodiwgbSA9IHRoaXMpIHtcbiAgICAgICAgTWF0M0Z1bmMuc2NhbGUodGhpcywgbSwgdik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIG11bHRpcGx5KG1hLCBtYikge1xuICAgICAgICBpZiAobWIpIHtcbiAgICAgICAgICAgIE1hdDNGdW5jLm11bHRpcGx5KHRoaXMsIG1hLCBtYik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBNYXQzRnVuYy5tdWx0aXBseSh0aGlzLCB0aGlzLCBtYSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaWRlbnRpdHkoKSB7XG4gICAgICAgIE1hdDNGdW5jLmlkZW50aXR5KHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBjb3B5KG0pIHtcbiAgICAgICAgTWF0M0Z1bmMuY29weSh0aGlzLCBtKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbU1hdHJpeDQobSkge1xuICAgICAgICBNYXQzRnVuYy5mcm9tTWF0NCh0aGlzLCBtKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbVF1YXRlcm5pb24ocSkge1xuICAgICAgICBNYXQzRnVuYy5mcm9tUXVhdCh0aGlzLCBxKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbUJhc2lzKHZlYzNhLCB2ZWMzYiwgdmVjM2MpIHtcbiAgICAgICAgdGhpcy5zZXQodmVjM2FbMF0sIHZlYzNhWzFdLCB2ZWMzYVsyXSwgdmVjM2JbMF0sIHZlYzNiWzFdLCB2ZWMzYlsyXSwgdmVjM2NbMF0sIHZlYzNjWzFdLCB2ZWMzY1syXSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGludmVyc2UobSA9IHRoaXMpIHtcbiAgICAgICAgTWF0M0Z1bmMuaW52ZXJ0KHRoaXMsIG0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBnZXROb3JtYWxNYXRyaXgobSkge1xuICAgICAgICBNYXQzRnVuYy5ub3JtYWxGcm9tTWF0NCh0aGlzLCBtKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuIiwiY29uc3QgRVBTSUxPTiA9IDAuMDAwMDAxO1xuXG4vKipcbiAqIENvcGllcyB0aGUgdXBwZXItbGVmdCAzeDMgdmFsdWVzIGludG8gdGhlIGdpdmVuIG1hdDMuXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyAzeDMgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgICB0aGUgc291cmNlIDR4NCBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21NYXQ0KG91dCwgYSkge1xuICAgIG91dFswXSA9IGFbMF07XG4gICAgb3V0WzFdID0gYVsxXTtcbiAgICBvdXRbMl0gPSBhWzJdO1xuICAgIG91dFszXSA9IGFbNF07XG4gICAgb3V0WzRdID0gYVs1XTtcbiAgICBvdXRbNV0gPSBhWzZdO1xuICAgIG91dFs2XSA9IGFbOF07XG4gICAgb3V0WzddID0gYVs5XTtcbiAgICBvdXRbOF0gPSBhWzEwXTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgYSAzeDMgbWF0cml4IGZyb20gdGhlIGdpdmVuIHF1YXRlcm5pb25cbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCBtYXQzIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge3F1YXR9IHEgUXVhdGVybmlvbiB0byBjcmVhdGUgbWF0cml4IGZyb21cbiAqXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUXVhdChvdXQsIHEpIHtcbiAgICBsZXQgeCA9IHFbMF0sXG4gICAgICAgIHkgPSBxWzFdLFxuICAgICAgICB6ID0gcVsyXSxcbiAgICAgICAgdyA9IHFbM107XG4gICAgbGV0IHgyID0geCArIHg7XG4gICAgbGV0IHkyID0geSArIHk7XG4gICAgbGV0IHoyID0geiArIHo7XG5cbiAgICBsZXQgeHggPSB4ICogeDI7XG4gICAgbGV0IHl4ID0geSAqIHgyO1xuICAgIGxldCB5eSA9IHkgKiB5MjtcbiAgICBsZXQgenggPSB6ICogeDI7XG4gICAgbGV0IHp5ID0geiAqIHkyO1xuICAgIGxldCB6eiA9IHogKiB6MjtcbiAgICBsZXQgd3ggPSB3ICogeDI7XG4gICAgbGV0IHd5ID0gdyAqIHkyO1xuICAgIGxldCB3eiA9IHcgKiB6MjtcblxuICAgIG91dFswXSA9IDEgLSB5eSAtIHp6O1xuICAgIG91dFszXSA9IHl4IC0gd3o7XG4gICAgb3V0WzZdID0genggKyB3eTtcblxuICAgIG91dFsxXSA9IHl4ICsgd3o7XG4gICAgb3V0WzRdID0gMSAtIHh4IC0geno7XG4gICAgb3V0WzddID0genkgLSB3eDtcblxuICAgIG91dFsyXSA9IHp4IC0gd3k7XG4gICAgb3V0WzVdID0genkgKyB3eDtcbiAgICBvdXRbOF0gPSAxIC0geHggLSB5eTtcblxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIG1hdDMgdG8gYW5vdGhlclxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvcHkob3V0LCBhKSB7XG4gICAgb3V0WzBdID0gYVswXTtcbiAgICBvdXRbMV0gPSBhWzFdO1xuICAgIG91dFsyXSA9IGFbMl07XG4gICAgb3V0WzNdID0gYVszXTtcbiAgICBvdXRbNF0gPSBhWzRdO1xuICAgIG91dFs1XSA9IGFbNV07XG4gICAgb3V0WzZdID0gYVs2XTtcbiAgICBvdXRbN10gPSBhWzddO1xuICAgIG91dFs4XSA9IGFbOF07XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSBtYXQzIHRvIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0KG91dCwgbTAwLCBtMDEsIG0wMiwgbTEwLCBtMTEsIG0xMiwgbTIwLCBtMjEsIG0yMikge1xuICAgIG91dFswXSA9IG0wMDtcbiAgICBvdXRbMV0gPSBtMDE7XG4gICAgb3V0WzJdID0gbTAyO1xuICAgIG91dFszXSA9IG0xMDtcbiAgICBvdXRbNF0gPSBtMTE7XG4gICAgb3V0WzVdID0gbTEyO1xuICAgIG91dFs2XSA9IG0yMDtcbiAgICBvdXRbN10gPSBtMjE7XG4gICAgb3V0WzhdID0gbTIyO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU2V0IGEgbWF0MyB0byB0aGUgaWRlbnRpdHkgbWF0cml4XG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KG91dCkge1xuICAgIG91dFswXSA9IDE7XG4gICAgb3V0WzFdID0gMDtcbiAgICBvdXRbMl0gPSAwO1xuICAgIG91dFszXSA9IDA7XG4gICAgb3V0WzRdID0gMTtcbiAgICBvdXRbNV0gPSAwO1xuICAgIG91dFs2XSA9IDA7XG4gICAgb3V0WzddID0gMDtcbiAgICBvdXRbOF0gPSAxO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogVHJhbnNwb3NlIHRoZSB2YWx1ZXMgb2YgYSBtYXQzXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNwb3NlKG91dCwgYSkge1xuICAgIC8vIElmIHdlIGFyZSB0cmFuc3Bvc2luZyBvdXJzZWx2ZXMgd2UgY2FuIHNraXAgYSBmZXcgc3RlcHMgYnV0IGhhdmUgdG8gY2FjaGUgc29tZSB2YWx1ZXNcbiAgICBpZiAob3V0ID09PSBhKSB7XG4gICAgICAgIGxldCBhMDEgPSBhWzFdLFxuICAgICAgICAgICAgYTAyID0gYVsyXSxcbiAgICAgICAgICAgIGExMiA9IGFbNV07XG4gICAgICAgIG91dFsxXSA9IGFbM107XG4gICAgICAgIG91dFsyXSA9IGFbNl07XG4gICAgICAgIG91dFszXSA9IGEwMTtcbiAgICAgICAgb3V0WzVdID0gYVs3XTtcbiAgICAgICAgb3V0WzZdID0gYTAyO1xuICAgICAgICBvdXRbN10gPSBhMTI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgb3V0WzBdID0gYVswXTtcbiAgICAgICAgb3V0WzFdID0gYVszXTtcbiAgICAgICAgb3V0WzJdID0gYVs2XTtcbiAgICAgICAgb3V0WzNdID0gYVsxXTtcbiAgICAgICAgb3V0WzRdID0gYVs0XTtcbiAgICAgICAgb3V0WzVdID0gYVs3XTtcbiAgICAgICAgb3V0WzZdID0gYVsyXTtcbiAgICAgICAgb3V0WzddID0gYVs1XTtcbiAgICAgICAgb3V0WzhdID0gYVs4XTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIEludmVydHMgYSBtYXQzXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJ0KG91dCwgYSkge1xuICAgIGxldCBhMDAgPSBhWzBdLFxuICAgICAgICBhMDEgPSBhWzFdLFxuICAgICAgICBhMDIgPSBhWzJdO1xuICAgIGxldCBhMTAgPSBhWzNdLFxuICAgICAgICBhMTEgPSBhWzRdLFxuICAgICAgICBhMTIgPSBhWzVdO1xuICAgIGxldCBhMjAgPSBhWzZdLFxuICAgICAgICBhMjEgPSBhWzddLFxuICAgICAgICBhMjIgPSBhWzhdO1xuXG4gICAgbGV0IGIwMSA9IGEyMiAqIGExMSAtIGExMiAqIGEyMTtcbiAgICBsZXQgYjExID0gLWEyMiAqIGExMCArIGExMiAqIGEyMDtcbiAgICBsZXQgYjIxID0gYTIxICogYTEwIC0gYTExICogYTIwO1xuXG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBkZXRlcm1pbmFudFxuICAgIGxldCBkZXQgPSBhMDAgKiBiMDEgKyBhMDEgKiBiMTEgKyBhMDIgKiBiMjE7XG5cbiAgICBpZiAoIWRldCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZGV0ID0gMS4wIC8gZGV0O1xuXG4gICAgb3V0WzBdID0gYjAxICogZGV0O1xuICAgIG91dFsxXSA9ICgtYTIyICogYTAxICsgYTAyICogYTIxKSAqIGRldDtcbiAgICBvdXRbMl0gPSAoYTEyICogYTAxIC0gYTAyICogYTExKSAqIGRldDtcbiAgICBvdXRbM10gPSBiMTEgKiBkZXQ7XG4gICAgb3V0WzRdID0gKGEyMiAqIGEwMCAtIGEwMiAqIGEyMCkgKiBkZXQ7XG4gICAgb3V0WzVdID0gKC1hMTIgKiBhMDAgKyBhMDIgKiBhMTApICogZGV0O1xuICAgIG91dFs2XSA9IGIyMSAqIGRldDtcbiAgICBvdXRbN10gPSAoLWEyMSAqIGEwMCArIGEwMSAqIGEyMCkgKiBkZXQ7XG4gICAgb3V0WzhdID0gKGExMSAqIGEwMCAtIGEwMSAqIGExMCkgKiBkZXQ7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBkZXRlcm1pbmFudCBvZiBhIG1hdDNcbiAqXG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRldGVybWluYW50IG9mIGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRldGVybWluYW50KGEpIHtcbiAgICBsZXQgYTAwID0gYVswXSxcbiAgICAgICAgYTAxID0gYVsxXSxcbiAgICAgICAgYTAyID0gYVsyXTtcbiAgICBsZXQgYTEwID0gYVszXSxcbiAgICAgICAgYTExID0gYVs0XSxcbiAgICAgICAgYTEyID0gYVs1XTtcbiAgICBsZXQgYTIwID0gYVs2XSxcbiAgICAgICAgYTIxID0gYVs3XSxcbiAgICAgICAgYTIyID0gYVs4XTtcblxuICAgIHJldHVybiBhMDAgKiAoYTIyICogYTExIC0gYTEyICogYTIxKSArIGEwMSAqICgtYTIyICogYTEwICsgYTEyICogYTIwKSArIGEwMiAqIChhMjEgKiBhMTAgLSBhMTEgKiBhMjApO1xufVxuXG4vKipcbiAqIE11bHRpcGxpZXMgdHdvIG1hdDMnc1xuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7bWF0M30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dCwgYSwgYikge1xuICAgIGxldCBhMDAgPSBhWzBdLFxuICAgICAgICBhMDEgPSBhWzFdLFxuICAgICAgICBhMDIgPSBhWzJdO1xuICAgIGxldCBhMTAgPSBhWzNdLFxuICAgICAgICBhMTEgPSBhWzRdLFxuICAgICAgICBhMTIgPSBhWzVdO1xuICAgIGxldCBhMjAgPSBhWzZdLFxuICAgICAgICBhMjEgPSBhWzddLFxuICAgICAgICBhMjIgPSBhWzhdO1xuXG4gICAgbGV0IGIwMCA9IGJbMF0sXG4gICAgICAgIGIwMSA9IGJbMV0sXG4gICAgICAgIGIwMiA9IGJbMl07XG4gICAgbGV0IGIxMCA9IGJbM10sXG4gICAgICAgIGIxMSA9IGJbNF0sXG4gICAgICAgIGIxMiA9IGJbNV07XG4gICAgbGV0IGIyMCA9IGJbNl0sXG4gICAgICAgIGIyMSA9IGJbN10sXG4gICAgICAgIGIyMiA9IGJbOF07XG5cbiAgICBvdXRbMF0gPSBiMDAgKiBhMDAgKyBiMDEgKiBhMTAgKyBiMDIgKiBhMjA7XG4gICAgb3V0WzFdID0gYjAwICogYTAxICsgYjAxICogYTExICsgYjAyICogYTIxO1xuICAgIG91dFsyXSA9IGIwMCAqIGEwMiArIGIwMSAqIGExMiArIGIwMiAqIGEyMjtcblxuICAgIG91dFszXSA9IGIxMCAqIGEwMCArIGIxMSAqIGExMCArIGIxMiAqIGEyMDtcbiAgICBvdXRbNF0gPSBiMTAgKiBhMDEgKyBiMTEgKiBhMTEgKyBiMTIgKiBhMjE7XG4gICAgb3V0WzVdID0gYjEwICogYTAyICsgYjExICogYTEyICsgYjEyICogYTIyO1xuXG4gICAgb3V0WzZdID0gYjIwICogYTAwICsgYjIxICogYTEwICsgYjIyICogYTIwO1xuICAgIG91dFs3XSA9IGIyMCAqIGEwMSArIGIyMSAqIGExMSArIGIyMiAqIGEyMTtcbiAgICBvdXRbOF0gPSBiMjAgKiBhMDIgKyBiMjEgKiBhMTIgKyBiMjIgKiBhMjI7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBUcmFuc2xhdGUgYSBtYXQzIGJ5IHRoZSBnaXZlbiB2ZWN0b3JcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBtYXRyaXggdG8gdHJhbnNsYXRlXG4gKiBAcGFyYW0ge3ZlYzJ9IHYgdmVjdG9yIHRvIHRyYW5zbGF0ZSBieVxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNsYXRlKG91dCwgYSwgdikge1xuICAgIGxldCBhMDAgPSBhWzBdLFxuICAgICAgICBhMDEgPSBhWzFdLFxuICAgICAgICBhMDIgPSBhWzJdLFxuICAgICAgICBhMTAgPSBhWzNdLFxuICAgICAgICBhMTEgPSBhWzRdLFxuICAgICAgICBhMTIgPSBhWzVdLFxuICAgICAgICBhMjAgPSBhWzZdLFxuICAgICAgICBhMjEgPSBhWzddLFxuICAgICAgICBhMjIgPSBhWzhdLFxuICAgICAgICB4ID0gdlswXSxcbiAgICAgICAgeSA9IHZbMV07XG5cbiAgICBvdXRbMF0gPSBhMDA7XG4gICAgb3V0WzFdID0gYTAxO1xuICAgIG91dFsyXSA9IGEwMjtcblxuICAgIG91dFszXSA9IGExMDtcbiAgICBvdXRbNF0gPSBhMTE7XG4gICAgb3V0WzVdID0gYTEyO1xuXG4gICAgb3V0WzZdID0geCAqIGEwMCArIHkgKiBhMTAgKyBhMjA7XG4gICAgb3V0WzddID0geCAqIGEwMSArIHkgKiBhMTEgKyBhMjE7XG4gICAgb3V0WzhdID0geCAqIGEwMiArIHkgKiBhMTIgKyBhMjI7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBSb3RhdGVzIGEgbWF0MyBieSB0aGUgZ2l2ZW4gYW5nbGVcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlKG91dCwgYSwgcmFkKSB7XG4gICAgbGV0IGEwMCA9IGFbMF0sXG4gICAgICAgIGEwMSA9IGFbMV0sXG4gICAgICAgIGEwMiA9IGFbMl0sXG4gICAgICAgIGExMCA9IGFbM10sXG4gICAgICAgIGExMSA9IGFbNF0sXG4gICAgICAgIGExMiA9IGFbNV0sXG4gICAgICAgIGEyMCA9IGFbNl0sXG4gICAgICAgIGEyMSA9IGFbN10sXG4gICAgICAgIGEyMiA9IGFbOF0sXG4gICAgICAgIHMgPSBNYXRoLnNpbihyYWQpLFxuICAgICAgICBjID0gTWF0aC5jb3MocmFkKTtcblxuICAgIG91dFswXSA9IGMgKiBhMDAgKyBzICogYTEwO1xuICAgIG91dFsxXSA9IGMgKiBhMDEgKyBzICogYTExO1xuICAgIG91dFsyXSA9IGMgKiBhMDIgKyBzICogYTEyO1xuXG4gICAgb3V0WzNdID0gYyAqIGExMCAtIHMgKiBhMDA7XG4gICAgb3V0WzRdID0gYyAqIGExMSAtIHMgKiBhMDE7XG4gICAgb3V0WzVdID0gYyAqIGExMiAtIHMgKiBhMDI7XG5cbiAgICBvdXRbNl0gPSBhMjA7XG4gICAgb3V0WzddID0gYTIxO1xuICAgIG91dFs4XSA9IGEyMjtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFNjYWxlcyB0aGUgbWF0MyBieSB0aGUgZGltZW5zaW9ucyBpbiB0aGUgZ2l2ZW4gdmVjMlxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIG1hdHJpeCB0byByb3RhdGVcbiAqIEBwYXJhbSB7dmVjMn0gdiB0aGUgdmVjMiB0byBzY2FsZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKiovXG5leHBvcnQgZnVuY3Rpb24gc2NhbGUob3V0LCBhLCB2KSB7XG4gICAgbGV0IHggPSB2WzBdLFxuICAgICAgICB5ID0gdlsxXTtcblxuICAgIG91dFswXSA9IHggKiBhWzBdO1xuICAgIG91dFsxXSA9IHggKiBhWzFdO1xuICAgIG91dFsyXSA9IHggKiBhWzJdO1xuXG4gICAgb3V0WzNdID0geSAqIGFbM107XG4gICAgb3V0WzRdID0geSAqIGFbNF07XG4gICAgb3V0WzVdID0geSAqIGFbNV07XG5cbiAgICBvdXRbNl0gPSBhWzZdO1xuICAgIG91dFs3XSA9IGFbN107XG4gICAgb3V0WzhdID0gYVs4XTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgYSAzeDMgbm9ybWFsIG1hdHJpeCAodHJhbnNwb3NlIGludmVyc2UpIGZyb20gdGhlIDR4NCBtYXRyaXhcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCBtYXQzIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge21hdDR9IGEgTWF0NCB0byBkZXJpdmUgdGhlIG5vcm1hbCBtYXRyaXggZnJvbVxuICpcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbEZyb21NYXQ0KG91dCwgYSkge1xuICAgIGxldCBhMDAgPSBhWzBdLFxuICAgICAgICBhMDEgPSBhWzFdLFxuICAgICAgICBhMDIgPSBhWzJdLFxuICAgICAgICBhMDMgPSBhWzNdO1xuICAgIGxldCBhMTAgPSBhWzRdLFxuICAgICAgICBhMTEgPSBhWzVdLFxuICAgICAgICBhMTIgPSBhWzZdLFxuICAgICAgICBhMTMgPSBhWzddO1xuICAgIGxldCBhMjAgPSBhWzhdLFxuICAgICAgICBhMjEgPSBhWzldLFxuICAgICAgICBhMjIgPSBhWzEwXSxcbiAgICAgICAgYTIzID0gYVsxMV07XG4gICAgbGV0IGEzMCA9IGFbMTJdLFxuICAgICAgICBhMzEgPSBhWzEzXSxcbiAgICAgICAgYTMyID0gYVsxNF0sXG4gICAgICAgIGEzMyA9IGFbMTVdO1xuXG4gICAgbGV0IGIwMCA9IGEwMCAqIGExMSAtIGEwMSAqIGExMDtcbiAgICBsZXQgYjAxID0gYTAwICogYTEyIC0gYTAyICogYTEwO1xuICAgIGxldCBiMDIgPSBhMDAgKiBhMTMgLSBhMDMgKiBhMTA7XG4gICAgbGV0IGIwMyA9IGEwMSAqIGExMiAtIGEwMiAqIGExMTtcbiAgICBsZXQgYjA0ID0gYTAxICogYTEzIC0gYTAzICogYTExO1xuICAgIGxldCBiMDUgPSBhMDIgKiBhMTMgLSBhMDMgKiBhMTI7XG4gICAgbGV0IGIwNiA9IGEyMCAqIGEzMSAtIGEyMSAqIGEzMDtcbiAgICBsZXQgYjA3ID0gYTIwICogYTMyIC0gYTIyICogYTMwO1xuICAgIGxldCBiMDggPSBhMjAgKiBhMzMgLSBhMjMgKiBhMzA7XG4gICAgbGV0IGIwOSA9IGEyMSAqIGEzMiAtIGEyMiAqIGEzMTtcbiAgICBsZXQgYjEwID0gYTIxICogYTMzIC0gYTIzICogYTMxO1xuICAgIGxldCBiMTEgPSBhMjIgKiBhMzMgLSBhMjMgKiBhMzI7XG5cbiAgICAvLyBDYWxjdWxhdGUgdGhlIGRldGVybWluYW50XG4gICAgbGV0IGRldCA9IGIwMCAqIGIxMSAtIGIwMSAqIGIxMCArIGIwMiAqIGIwOSArIGIwMyAqIGIwOCAtIGIwNCAqIGIwNyArIGIwNSAqIGIwNjtcblxuICAgIGlmICghZGV0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBkZXQgPSAxLjAgLyBkZXQ7XG5cbiAgICBvdXRbMF0gPSAoYTExICogYjExIC0gYTEyICogYjEwICsgYTEzICogYjA5KSAqIGRldDtcbiAgICBvdXRbMV0gPSAoYTEyICogYjA4IC0gYTEwICogYjExIC0gYTEzICogYjA3KSAqIGRldDtcbiAgICBvdXRbMl0gPSAoYTEwICogYjEwIC0gYTExICogYjA4ICsgYTEzICogYjA2KSAqIGRldDtcblxuICAgIG91dFszXSA9IChhMDIgKiBiMTAgLSBhMDEgKiBiMTEgLSBhMDMgKiBiMDkpICogZGV0O1xuICAgIG91dFs0XSA9IChhMDAgKiBiMTEgLSBhMDIgKiBiMDggKyBhMDMgKiBiMDcpICogZGV0O1xuICAgIG91dFs1XSA9IChhMDEgKiBiMDggLSBhMDAgKiBiMTAgLSBhMDMgKiBiMDYpICogZGV0O1xuXG4gICAgb3V0WzZdID0gKGEzMSAqIGIwNSAtIGEzMiAqIGIwNCArIGEzMyAqIGIwMykgKiBkZXQ7XG4gICAgb3V0WzddID0gKGEzMiAqIGIwMiAtIGEzMCAqIGIwNSAtIGEzMyAqIGIwMSkgKiBkZXQ7XG4gICAgb3V0WzhdID0gKGEzMCAqIGIwNCAtIGEzMSAqIGIwMiArIGEzMyAqIGIwMCkgKiBkZXQ7XG5cbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIEdlbmVyYXRlcyBhIDJEIHByb2plY3Rpb24gbWF0cml4IHdpdGggdGhlIGdpdmVuIGJvdW5kc1xuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IG1hdDMgZnJ1c3R1bSBtYXRyaXggd2lsbCBiZSB3cml0dGVuIGludG9cbiAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCBXaWR0aCBvZiB5b3VyIGdsIGNvbnRleHRcbiAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgSGVpZ2h0IG9mIGdsIGNvbnRleHRcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb2plY3Rpb24ob3V0LCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgb3V0WzBdID0gMiAvIHdpZHRoO1xuICAgIG91dFsxXSA9IDA7XG4gICAgb3V0WzJdID0gMDtcbiAgICBvdXRbM10gPSAwO1xuICAgIG91dFs0XSA9IC0yIC8gaGVpZ2h0O1xuICAgIG91dFs1XSA9IDA7XG4gICAgb3V0WzZdID0gLTE7XG4gICAgb3V0WzddID0gMTtcbiAgICBvdXRbOF0gPSAxO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQWRkcyB0d28gbWF0MydzXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHttYXQzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkKG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gKyBiWzBdO1xuICAgIG91dFsxXSA9IGFbMV0gKyBiWzFdO1xuICAgIG91dFsyXSA9IGFbMl0gKyBiWzJdO1xuICAgIG91dFszXSA9IGFbM10gKyBiWzNdO1xuICAgIG91dFs0XSA9IGFbNF0gKyBiWzRdO1xuICAgIG91dFs1XSA9IGFbNV0gKyBiWzVdO1xuICAgIG91dFs2XSA9IGFbNl0gKyBiWzZdO1xuICAgIG91dFs3XSA9IGFbN10gKyBiWzddO1xuICAgIG91dFs4XSA9IGFbOF0gKyBiWzhdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU3VidHJhY3RzIG1hdHJpeCBiIGZyb20gbWF0cml4IGFcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge21hdDN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdWJ0cmFjdChvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcbiAgICBvdXRbMV0gPSBhWzFdIC0gYlsxXTtcbiAgICBvdXRbMl0gPSBhWzJdIC0gYlsyXTtcbiAgICBvdXRbM10gPSBhWzNdIC0gYlszXTtcbiAgICBvdXRbNF0gPSBhWzRdIC0gYls0XTtcbiAgICBvdXRbNV0gPSBhWzVdIC0gYls1XTtcbiAgICBvdXRbNl0gPSBhWzZdIC0gYls2XTtcbiAgICBvdXRbN10gPSBhWzddIC0gYls3XTtcbiAgICBvdXRbOF0gPSBhWzhdIC0gYls4XTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIE11bHRpcGx5IGVhY2ggZWxlbWVudCBvZiB0aGUgbWF0cml4IGJ5IGEgc2NhbGFyLlxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIG1hdHJpeCB0byBzY2FsZVxuICogQHBhcmFtIHtOdW1iZXJ9IGIgYW1vdW50IHRvIHNjYWxlIHRoZSBtYXRyaXgncyBlbGVtZW50cyBieVxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHlTY2FsYXIob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSAqIGI7XG4gICAgb3V0WzFdID0gYVsxXSAqIGI7XG4gICAgb3V0WzJdID0gYVsyXSAqIGI7XG4gICAgb3V0WzNdID0gYVszXSAqIGI7XG4gICAgb3V0WzRdID0gYVs0XSAqIGI7XG4gICAgb3V0WzVdID0gYVs1XSAqIGI7XG4gICAgb3V0WzZdID0gYVs2XSAqIGI7XG4gICAgb3V0WzddID0gYVs3XSAqIGI7XG4gICAgb3V0WzhdID0gYVs4XSAqIGI7XG4gICAgcmV0dXJuIG91dDtcbn1cbiIsIl9fd2VicGFja19yZXF1aXJlX18uaCA9ICgpID0+IChcIjExYjU2NTM1MDQ5YjNlNzAwMDQ5XCIpIl0sIm5hbWVzIjpbIkNhbnZhcyIsImNvbnN0cnVjdG9yIiwidGhpcyIsImNyZWF0ZVJlbmRlcmVyIiwiY3JlYXRlU2NlbmUiLCJjcmVhdGVDdWJlIiwicmVuZGVyZXIiLCJSZW5kZXJlciIsImdsIiwiZG9jdW1lbnQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJjYW52YXMiLCJjcmVhdGVDYW1lcmEiLCJjYW1lcmEiLCJDYW1lcmEiLCJwb3NpdGlvbiIsInoiLCJzY2VuZSIsIlRyYW5zZm9ybSIsImdlb21ldHJ5IiwiQm94IiwicHJvZ3JhbSIsIlByb2dyYW0iLCJ2ZXJ0ZXgiLCJmcmFnbWVudCIsIm1lc2giLCJNZXNoIiwic2V0UGFyZW50Iiwib25SZXNpemUiLCJzZXRTaXplIiwid2luZG93IiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwicGVyc3BlY3RpdmUiLCJhc3BlY3QiLCJ1cGRhdGUiLCJyZW5kZXIiLCJ0ZW1wVmVjMyIsIlZlYzMiLCJJRCIsIkFUVFJfSUQiLCJpc0JvdW5kc1dhcm5lZCIsIkdlb21ldHJ5IiwiYXR0cmlidXRlcyIsImNvbnNvbGUiLCJlcnJvciIsImlkIiwiVkFPcyIsImRyYXdSYW5nZSIsInN0YXJ0IiwiY291bnQiLCJpbnN0YW5jZWRDb3VudCIsImJpbmRWZXJ0ZXhBcnJheSIsImN1cnJlbnRHZW9tZXRyeSIsImdsU3RhdGUiLCJzdGF0ZSIsImtleSIsImFkZEF0dHJpYnV0ZSIsImF0dHIiLCJzaXplIiwidHlwZSIsImRhdGEiLCJGbG9hdDMyQXJyYXkiLCJGTE9BVCIsIlVpbnQxNkFycmF5IiwiVU5TSUdORURfU0hPUlQiLCJVTlNJR05FRF9JTlQiLCJ0YXJnZXQiLCJFTEVNRU5UX0FSUkFZX0JVRkZFUiIsIkFSUkFZX0JVRkZFUiIsIm5vcm1hbGl6ZWQiLCJzdHJpZGUiLCJvZmZzZXQiLCJieXRlTGVuZ3RoIiwibGVuZ3RoIiwiZGl2aXNvciIsImluc3RhbmNlZCIsIm5lZWRzVXBkYXRlIiwidXNhZ2UiLCJTVEFUSUNfRFJBVyIsImJ1ZmZlciIsInVwZGF0ZUF0dHJpYnV0ZSIsImlzSW5zdGFuY2VkIiwid2FybiIsIk1hdGgiLCJtaW4iLCJpbmRleCIsIm1heCIsImlzTmV3QnVmZmVyIiwiY3JlYXRlQnVmZmVyIiwiYm91bmRCdWZmZXIiLCJiaW5kQnVmZmVyIiwiYnVmZmVyRGF0YSIsImJ1ZmZlclN1YkRhdGEiLCJzZXRJbmRleCIsInZhbHVlIiwic2V0RHJhd1JhbmdlIiwic2V0SW5zdGFuY2VkQ291bnQiLCJjcmVhdGVWQU8iLCJhdHRyaWJ1dGVPcmRlciIsImNyZWF0ZVZlcnRleEFycmF5IiwiYmluZEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVMb2NhdGlvbnMiLCJmb3JFYWNoIiwibG9jYXRpb24iLCJuYW1lIiwibnVtTG9jIiwiaSIsInZlcnRleEF0dHJpYlBvaW50ZXIiLCJlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSIsInZlcnRleEF0dHJpYkRpdmlzb3IiLCJkcmF3IiwibW9kZSIsIlRSSUFOR0xFUyIsImluZGV4Qnl0ZXNQZXJFbGVtZW50IiwiZHJhd0VsZW1lbnRzSW5zdGFuY2VkIiwiZHJhd0FycmF5c0luc3RhbmNlZCIsImRyYXdFbGVtZW50cyIsImRyYXdBcnJheXMiLCJnZXRQb3NpdGlvbiIsImNvbXB1dGVCb3VuZGluZ0JveCIsImFycmF5IiwiYm91bmRzIiwiY2VudGVyIiwic2NhbGUiLCJyYWRpdXMiLCJJbmZpbml0eSIsInNldCIsImwiLCJ4IiwieSIsInN1YiIsImFkZCIsImRpdmlkZSIsImNvbXB1dGVCb3VuZGluZ1NwaGVyZSIsIm1heFJhZGl1c1NxIiwiZnJvbUFycmF5Iiwic3F1YXJlZERpc3RhbmNlIiwic3FydCIsInJlbW92ZSIsImRlbGV0ZVZlcnRleEFycmF5IiwiZGVsZXRlQnVmZmVyIiwiZnJ1c3R1bUN1bGxlZCIsInJlbmRlck9yZGVyIiwic3VwZXIiLCJtb2RlbFZpZXdNYXRyaXgiLCJNYXQ0Iiwibm9ybWFsTWF0cml4IiwiTWF0MyIsImJlZm9yZVJlbmRlckNhbGxiYWNrcyIsImFmdGVyUmVuZGVyQ2FsbGJhY2tzIiwib25CZWZvcmVSZW5kZXIiLCJmIiwicHVzaCIsIm9uQWZ0ZXJSZW5kZXIiLCJ1bmlmb3JtcyIsIm1vZGVsTWF0cml4IiwiT2JqZWN0IiwiYXNzaWduIiwidmlld01hdHJpeCIsInByb2plY3Rpb25NYXRyaXgiLCJjYW1lcmFQb3NpdGlvbiIsIndvcmxkUG9zaXRpb24iLCJtdWx0aXBseSIsIndvcmxkTWF0cml4IiwiZ2V0Tm9ybWFsTWF0cml4IiwiZmxpcEZhY2VzIiwiY3VsbEZhY2UiLCJkZXRlcm1pbmFudCIsInVzZSIsImFycmF5Q2FjaGVGMzIiLCJ0cmFuc3BhcmVudCIsIkJBQ0siLCJmcm9udEZhY2UiLCJDQ1ciLCJkZXB0aFRlc3QiLCJkZXB0aFdyaXRlIiwiZGVwdGhGdW5jIiwiTEVTUyIsImJsZW5kRnVuYyIsImJsZW5kRXF1YXRpb24iLCJzcmMiLCJwcmVtdWx0aXBsaWVkQWxwaGEiLCJzZXRCbGVuZEZ1bmMiLCJPTkUiLCJPTkVfTUlOVVNfU1JDX0FMUEhBIiwiU1JDX0FMUEhBIiwidmVydGV4U2hhZGVyIiwiY3JlYXRlU2hhZGVyIiwiVkVSVEVYX1NIQURFUiIsInNoYWRlclNvdXJjZSIsImNvbXBpbGVTaGFkZXIiLCJnZXRTaGFkZXJJbmZvTG9nIiwiYWRkTGluZU51bWJlcnMiLCJmcmFnbWVudFNoYWRlciIsIkZSQUdNRU5UX1NIQURFUiIsImNyZWF0ZVByb2dyYW0iLCJhdHRhY2hTaGFkZXIiLCJsaW5rUHJvZ3JhbSIsImdldFByb2dyYW1QYXJhbWV0ZXIiLCJMSU5LX1NUQVRVUyIsImdldFByb2dyYW1JbmZvTG9nIiwiZGVsZXRlU2hhZGVyIiwidW5pZm9ybUxvY2F0aW9ucyIsIk1hcCIsIm51bVVuaWZvcm1zIiwiQUNUSVZFX1VOSUZPUk1TIiwidUluZGV4IiwidW5pZm9ybSIsImdldEFjdGl2ZVVuaWZvcm0iLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJzcGxpdCIsIm1hdGNoIiwidW5pZm9ybU5hbWUiLCJuYW1lQ29tcG9uZW50cyIsInNsaWNlIiwibG9jYXRpb25zIiwibnVtQXR0cmlicyIsIkFDVElWRV9BVFRSSUJVVEVTIiwiYUluZGV4IiwiYXR0cmlidXRlIiwiZ2V0QWN0aXZlQXR0cmliIiwiZ2V0QXR0cmliTG9jYXRpb24iLCJqb2luIiwiZHN0Iiwic3JjQWxwaGEiLCJkc3RBbHBoYSIsInNldEJsZW5kRXF1YXRpb24iLCJtb2RlUkdCIiwibW9kZUFscGhhIiwiYXBwbHlTdGF0ZSIsImVuYWJsZSIsIkRFUFRIX1RFU1QiLCJkaXNhYmxlIiwiQ1VMTF9GQUNFIiwiQkxFTkQiLCJzZXRDdWxsRmFjZSIsInNldEZyb250RmFjZSIsInNldERlcHRoTWFzayIsInNldERlcHRoRnVuYyIsInRleHR1cmVVbml0IiwiY3VycmVudFByb2dyYW0iLCJ1c2VQcm9ncmFtIiwiYWN0aXZlVW5pZm9ybSIsImNvbXBvbmVudCIsIkFycmF5IiwiaXNBcnJheSIsInVuZGVmaW5lZCIsInRleHR1cmUiLCJzZXRVbmlmb3JtIiwidGV4dHVyZVVuaXRzIiwiQ1ciLCJkZWxldGVQcm9ncmFtIiwiYSIsImFycmF5TGVuIiwidmFsdWVMZW4iLCJmbGF0dGVuIiwic2V0VmFsdWUiLCJnZXQiLCJiIiwiYXJyYXlzRXF1YWwiLCJzZXRBcnJheSIsInVuaWZvcm0xZnYiLCJ1bmlmb3JtMWYiLCJ1bmlmb3JtMmZ2IiwidW5pZm9ybTNmdiIsInVuaWZvcm00ZnYiLCJ1bmlmb3JtMWl2IiwidW5pZm9ybTFpIiwidW5pZm9ybTJpdiIsInVuaWZvcm0zaXYiLCJ1bmlmb3JtNGl2IiwidW5pZm9ybU1hdHJpeDJmdiIsInVuaWZvcm1NYXRyaXgzZnYiLCJ1bmlmb3JtTWF0cml4NGZ2Iiwic3RyaW5nIiwibGluZXMiLCJ3YXJuQ291bnQiLCJtZXNzYWdlIiwid2lkdGgiLCJoZWlnaHQiLCJkZXB0aCIsIndpZHRoU2VnbWVudHMiLCJoZWlnaHRTZWdtZW50cyIsImRlcHRoU2VnbWVudHMiLCJ3U2VncyIsImhTZWdzIiwiZFNlZ3MiLCJudW0iLCJudW1JbmRpY2VzIiwibm9ybWFsIiwidXYiLCJVaW50MzJBcnJheSIsImlpIiwiUGxhbmUiLCJidWlsZFBsYW5lIiwidSIsInYiLCJ3IiwidURpciIsInZEaXIiLCJpbyIsInNlZ1ciLCJzZWdIIiwiaXkiLCJpeCIsImMiLCJkIiwibTAwIiwibTAxIiwibTAyIiwibTEwIiwibTExIiwibTEyIiwibTIwIiwibTIxIiwibTIyIiwiY29weSIsIk1hdDNGdW5jIiwidHJhbnNsYXRlIiwibSIsInJvdGF0ZSIsIm1hIiwibWIiLCJpZGVudGl0eSIsImZyb21NYXRyaXg0IiwiZnJvbVF1YXRlcm5pb24iLCJxIiwiZnJvbUJhc2lzIiwidmVjM2EiLCJ2ZWMzYiIsInZlYzNjIiwiaW52ZXJzZSIsImZyb21NYXQ0Iiwib3V0IiwiZnJvbVF1YXQiLCJ4MiIsInkyIiwiejIiLCJ4eCIsInl4IiwieXkiLCJ6eCIsInp5IiwienoiLCJ3eCIsInd5Iiwid3oiLCJ0cmFuc3Bvc2UiLCJhMDEiLCJhMDIiLCJhMTIiLCJpbnZlcnQiLCJhMDAiLCJhMTAiLCJhMTEiLCJhMjAiLCJhMjEiLCJhMjIiLCJiMDEiLCJiMTEiLCJiMjEiLCJkZXQiLCJiMDAiLCJiMDIiLCJiMTAiLCJiMTIiLCJiMjAiLCJiMjIiLCJyYWQiLCJzIiwic2luIiwiY29zIiwibm9ybWFsRnJvbU1hdDQiLCJhMDMiLCJhMTMiLCJhMjMiLCJhMzAiLCJhMzEiLCJhMzIiLCJhMzMiLCJiMDMiLCJiMDQiLCJiMDUiLCJiMDYiLCJiMDciLCJiMDgiLCJiMDkiLCJwcm9qZWN0aW9uIiwic3VidHJhY3QiLCJtdWx0aXBseVNjYWxhciIsIl9fd2VicGFja19yZXF1aXJlX18iLCJoIl0sInNvdXJjZVJvb3QiOiIifQ==