/*! For license information please see main.fbfd0d962fd4df436d87.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatefloema("main",{"./app/components/Canvas/home/Media.js":(t,e,i)=>{i.r(e),i.d(e,{default:()=>o});var r=i("./node_modules/ogl/src/core/Texture.js"),s=i("./node_modules/ogl/src/core/Program.js"),a=i("./node_modules/ogl/src/core/Mesh.js"),n=i("./app/shaders/plane-fragment.glsl"),h=i("./app/shaders/plane-vertex.glsl");const o=class{constructor({element:t,geometry:e,gl:i,index:r,scene:s,sizes:a}){this.element=t,this.gl=i,this.geometry=e,this.scene=s,this.index=r,this.sizes=a,this.createTexture(),this.createProgram(),this.createMesh()}createTexture(){this.texture=new r.Texture(this.gl),console.log(this.element),this.image=new window.Image,this.image.src=this.element.getAttribute("data-src"),this.image.onload=t=>this.texture.image=this.image,console.log(this,this.element)}createProgram(){this.program=new s.Program(this.gl,{fragment:n.default,vertex:h.default,uniforms:{tMap:{value:this.texture}}})}createMesh(){this.mesh=new a.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene)}}},"./app/components/Canvas/home/index.js":(t,e,i)=>{i.r(e),i.d(e,{default:()=>o});var r=i("./node_modules/ogl/src/core/Transform.js"),s=i("./node_modules/ogl/src/extras/Plane.js"),a=i("./node_modules/lodash/map.js"),n=i.n(a),h=i("./app/components/Canvas/home/Media.js");const o=class{constructor(t,e,i){this.gl=t,this.group=new r.Transform,this.mediasElements=document.querySelectorAll(".home__gallery__media__image"),this.createGeometry(),this.createGallery(),this.group.setParent(e)}createGeometry(){this.geometry=new s.Plane(this.gl)}createGallery(){this.medias=n()(this.mediasElements,((t,e)=>new h.default({element:t,geometry:this.geometry,gl:this.gl,index:e,scene:this.group})))}}},"./app/shaders/plane-fragment.glsl":(t,e,i)=>{i.r(e),i.d(e,{default:()=>r});const r="#define GLSLIFY 1\nuniform sampler2D tMap;\n\nvarying vec2 vUv;\n\nvoid main() {\n    gl_FragColor = vec4(1.0, 0.5, 0.5, 1.0);\n}"},"./app/shaders/plane-vertex.glsl":(t,e,i)=>{i.r(e),i.d(e,{default:()=>r});const r="#define GLSLIFY 1\nattribute vec3 position;\nattribute vec2 uv;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec2 vUv;\n\nvoid main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}"},"./node_modules/ogl/src/core/Geometry.js":(t,e,i)=>{i.r(e),i.d(e,{Geometry:()=>o});var r=i("./node_modules/ogl/src/math/Vec3.js");const s=new r.Vec3;let a=1,n=1,h=!1;class o{constructor(t,e={}){t.canvas||console.error("gl not passed as first argument to Geometry"),this.gl=t,this.attributes=e,this.id=a++,this.VAOs={},this.drawRange={start:0,count:0},this.instancedCount=0,this.gl.renderer.bindVertexArray(null),this.gl.renderer.currentGeometry=null,this.glState=this.gl.renderer.state;for(let t in e)this.addAttribute(t,e[t])}addAttribute(t,e){if(this.attributes[t]=e,e.id=n++,e.size=e.size||1,e.type=e.type||(e.data.constructor===Float32Array?this.gl.FLOAT:e.data.constructor===Uint16Array?this.gl.UNSIGNED_SHORT:this.gl.UNSIGNED_INT),e.target="index"===t?this.gl.ELEMENT_ARRAY_BUFFER:this.gl.ARRAY_BUFFER,e.normalized=e.normalized||!1,e.stride=e.stride||0,e.offset=e.offset||0,e.count=e.count||(e.stride?e.data.byteLength/e.stride:e.data.length/e.size),e.divisor=e.instanced||0,e.needsUpdate=!1,e.usage=e.usage||this.gl.STATIC_DRAW,e.buffer||this.updateAttribute(e),e.divisor){if(this.isInstanced=!0,this.instancedCount&&this.instancedCount!==e.count*e.divisor)return console.warn("geometry has multiple instanced buffers of different length"),this.instancedCount=Math.min(this.instancedCount,e.count*e.divisor);this.instancedCount=e.count*e.divisor}else"index"===t?this.drawRange.count=e.count:this.attributes.index||(this.drawRange.count=Math.max(this.drawRange.count,e.count))}updateAttribute(t){const e=!t.buffer;e&&(t.buffer=this.gl.createBuffer()),this.glState.boundBuffer!==t.buffer&&(this.gl.bindBuffer(t.target,t.buffer),this.glState.boundBuffer=t.buffer),e?this.gl.bufferData(t.target,t.data,t.usage):this.gl.bufferSubData(t.target,0,t.data),t.needsUpdate=!1}setIndex(t){this.addAttribute("index",t)}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}setInstancedCount(t){this.instancedCount=t}createVAO(t){this.VAOs[t.attributeOrder]=this.gl.renderer.createVertexArray(),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.bindAttributes(t)}bindAttributes(t){t.attributeLocations.forEach(((t,{name:e,type:i})=>{if(!this.attributes[e])return void console.warn(`active attribute ${e} not being supplied`);const r=this.attributes[e];this.gl.bindBuffer(r.target,r.buffer),this.glState.boundBuffer=r.buffer;let s=1;35674===i&&(s=2),35675===i&&(s=3),35676===i&&(s=4);const a=r.size/s,n=1===s?0:s*s*4,h=1===s?0:4*s;for(let e=0;e<s;e++)this.gl.vertexAttribPointer(t+e,a,r.type,r.normalized,r.stride+n,r.offset+e*h),this.gl.enableVertexAttribArray(t+e),this.gl.renderer.vertexAttribDivisor(t+e,r.divisor)})),this.attributes.index&&this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.attributes.index.buffer)}draw({program:t,mode:e=this.gl.TRIANGLES}){this.gl.renderer.currentGeometry!==`${this.id}_${t.attributeOrder}`&&(this.VAOs[t.attributeOrder]||this.createVAO(t),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.gl.renderer.currentGeometry=`${this.id}_${t.attributeOrder}`),t.attributeLocations.forEach(((t,{name:e})=>{const i=this.attributes[e];i.needsUpdate&&this.updateAttribute(i)}));let i=2;this.attributes.index?.type===this.gl.UNSIGNED_INT&&(i=4),this.isInstanced?this.attributes.index?this.gl.renderer.drawElementsInstanced(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+this.drawRange.start*i,this.instancedCount):this.gl.renderer.drawArraysInstanced(e,this.drawRange.start,this.drawRange.count,this.instancedCount):this.attributes.index?this.gl.drawElements(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+this.drawRange.start*i):this.gl.drawArrays(e,this.drawRange.start,this.drawRange.count)}getPosition(){const t=this.attributes.position;return t.data?t:h?void 0:(console.warn("No position buffer data found to compute bounds"),h=!0)}computeBoundingBox(t){t||(t=this.getPosition());const e=t.data,i=t.size;this.bounds||(this.bounds={min:new r.Vec3,max:new r.Vec3,center:new r.Vec3,scale:new r.Vec3,radius:1/0});const s=this.bounds.min,a=this.bounds.max,n=this.bounds.center,h=this.bounds.scale;s.set(1/0),a.set(-1/0);for(let t=0,r=e.length;t<r;t+=i){const i=e[t],r=e[t+1],n=e[t+2];s.x=Math.min(i,s.x),s.y=Math.min(r,s.y),s.z=Math.min(n,s.z),a.x=Math.max(i,a.x),a.y=Math.max(r,a.y),a.z=Math.max(n,a.z)}h.sub(a,s),n.add(s,a).divide(2)}computeBoundingSphere(t){t||(t=this.getPosition());const e=t.data,i=t.size;this.bounds||this.computeBoundingBox(t);let r=0;for(let t=0,a=e.length;t<a;t+=i)s.fromArray(e,t),r=Math.max(r,this.bounds.center.squaredDistance(s));this.bounds.radius=Math.sqrt(r)}remove(){for(let t in this.VAOs)this.gl.renderer.deleteVertexArray(this.VAOs[t]),delete this.VAOs[t];for(let t in this.attributes)this.gl.deleteBuffer(this.attributes[t].buffer),delete this.attributes[t]}}},"./node_modules/ogl/src/core/Mesh.js":(t,e,i)=>{i.r(e),i.d(e,{Mesh:()=>h});var r=i("./node_modules/ogl/src/core/Transform.js"),s=i("./node_modules/ogl/src/math/Mat3.js"),a=i("./node_modules/ogl/src/math/Mat4.js");let n=0;class h extends r.Transform{constructor(t,{geometry:e,program:i,mode:r=t.TRIANGLES,frustumCulled:h=!0,renderOrder:o=0}={}){super(),t.canvas||console.error("gl not passed as first argument to Mesh"),this.gl=t,this.id=n++,this.geometry=e,this.program=i,this.mode=r,this.frustumCulled=h,this.renderOrder=o,this.modelViewMatrix=new a.Mat4,this.normalMatrix=new s.Mat3,this.beforeRenderCallbacks=[],this.afterRenderCallbacks=[]}onBeforeRender(t){return this.beforeRenderCallbacks.push(t),this}onAfterRender(t){return this.afterRenderCallbacks.push(t),this}draw({camera:t}={}){t&&(this.program.uniforms.modelMatrix||Object.assign(this.program.uniforms,{modelMatrix:{value:null},viewMatrix:{value:null},modelViewMatrix:{value:null},normalMatrix:{value:null},projectionMatrix:{value:null},cameraPosition:{value:null}}),this.program.uniforms.projectionMatrix.value=t.projectionMatrix,this.program.uniforms.cameraPosition.value=t.worldPosition,this.program.uniforms.viewMatrix.value=t.viewMatrix,this.modelViewMatrix.multiply(t.viewMatrix,this.worldMatrix),this.normalMatrix.getNormalMatrix(this.modelViewMatrix),this.program.uniforms.modelMatrix.value=this.worldMatrix,this.program.uniforms.modelViewMatrix.value=this.modelViewMatrix,this.program.uniforms.normalMatrix.value=this.normalMatrix),this.beforeRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t})));let e=this.program.cullFace&&this.worldMatrix.determinant()<0;this.program.use({flipFaces:e}),this.geometry.draw({mode:this.mode,program:this.program}),this.afterRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t})))}}},"./node_modules/ogl/src/core/Program.js":(t,e,i)=>{i.r(e),i.d(e,{Program:()=>a});let r=1;const s={};class a{constructor(t,{vertex:e,fragment:i,uniforms:s={},transparent:a=!1,cullFace:n=t.BACK,frontFace:o=t.CCW,depthTest:l=!0,depthWrite:u=!0,depthFunc:d=t.LESS}={}){t.canvas||console.error("gl not passed as first argument to Program"),this.gl=t,this.uniforms=s,this.id=r++,e||console.warn("vertex shader not supplied"),i||console.warn("fragment shader not supplied"),this.transparent=a,this.cullFace=n,this.frontFace=o,this.depthTest=l,this.depthWrite=u,this.depthFunc=d,this.blendFunc={},this.blendEquation={},this.transparent&&!this.blendFunc.src&&(this.gl.renderer.premultipliedAlpha?this.setBlendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA):this.setBlendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA));const g=t.createShader(t.VERTEX_SHADER);t.shaderSource(g,e),t.compileShader(g),""!==t.getShaderInfoLog(g)&&console.warn(`${t.getShaderInfoLog(g)}\nVertex Shader\n${h(e)}`);const m=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(m,i),t.compileShader(m),""!==t.getShaderInfoLog(m)&&console.warn(`${t.getShaderInfoLog(m)}\nFragment Shader\n${h(i)}`),this.program=t.createProgram(),t.attachShader(this.program,g),t.attachShader(this.program,m),t.linkProgram(this.program),!t.getProgramParameter(this.program,t.LINK_STATUS))return console.warn(t.getProgramInfoLog(this.program));t.deleteShader(g),t.deleteShader(m),this.uniformLocations=new Map;let c=t.getProgramParameter(this.program,t.ACTIVE_UNIFORMS);for(let e=0;e<c;e++){let i=t.getActiveUniform(this.program,e);this.uniformLocations.set(i,t.getUniformLocation(this.program,i.name));const r=i.name.match(/(\w+)/g);i.uniformName=r[0],i.nameComponents=r.slice(1)}this.attributeLocations=new Map;const f=[],p=t.getProgramParameter(this.program,t.ACTIVE_ATTRIBUTES);for(let e=0;e<p;e++){const i=t.getActiveAttrib(this.program,e),r=t.getAttribLocation(this.program,i.name);-1!==r&&(f[r]=i.name,this.attributeLocations.set(i,r))}this.attributeOrder=f.join("")}setBlendFunc(t,e,i,r){this.blendFunc.src=t,this.blendFunc.dst=e,this.blendFunc.srcAlpha=i,this.blendFunc.dstAlpha=r,t&&(this.transparent=!0)}setBlendEquation(t,e){this.blendEquation.modeRGB=t,this.blendEquation.modeAlpha=e}applyState(){this.depthTest?this.gl.renderer.enable(this.gl.DEPTH_TEST):this.gl.renderer.disable(this.gl.DEPTH_TEST),this.cullFace?this.gl.renderer.enable(this.gl.CULL_FACE):this.gl.renderer.disable(this.gl.CULL_FACE),this.blendFunc.src?this.gl.renderer.enable(this.gl.BLEND):this.gl.renderer.disable(this.gl.BLEND),this.cullFace&&this.gl.renderer.setCullFace(this.cullFace),this.gl.renderer.setFrontFace(this.frontFace),this.gl.renderer.setDepthMask(this.depthWrite),this.gl.renderer.setDepthFunc(this.depthFunc),this.blendFunc.src&&this.gl.renderer.setBlendFunc(this.blendFunc.src,this.blendFunc.dst,this.blendFunc.srcAlpha,this.blendFunc.dstAlpha),this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB,this.blendEquation.modeAlpha)}use({flipFaces:t=!1}={}){let e=-1;this.gl.renderer.state.currentProgram===this.id||(this.gl.useProgram(this.program),this.gl.renderer.state.currentProgram=this.id),this.uniformLocations.forEach(((t,i)=>{let r=this.uniforms[i.uniformName];for(const t of i.nameComponents){if(!r)break;if(!(t in r)){if(Array.isArray(r.value))break;r=void 0;break}r=r[t]}if(!r)return l(`Active uniform ${i.name} has not been supplied`);if(r&&void 0===r.value)return l(`${i.name} uniform is missing a value parameter`);if(r.value.texture)return e+=1,r.value.update(e),n(this.gl,i.type,t,e);if(r.value.length&&r.value[0].texture){const s=[];return r.value.forEach((t=>{e+=1,t.update(e),s.push(e)})),n(this.gl,i.type,t,s)}n(this.gl,i.type,t,r.value)})),this.applyState(),t&&this.gl.renderer.setFrontFace(this.frontFace===this.gl.CCW?this.gl.CW:this.gl.CCW)}remove(){this.gl.deleteProgram(this.program)}}function n(t,e,i,r){r=r.length?function(t){const e=t.length,i=t[0].length;if(void 0===i)return t;const r=e*i;let a=s[r];a||(s[r]=a=new Float32Array(r));for(let r=0;r<e;r++)a.set(t[r],r*i);return a}(r):r;const a=t.renderer.state.uniformLocations.get(i);if(r.length)if(void 0===a||a.length!==r.length)t.renderer.state.uniformLocations.set(i,r.slice(0));else{if(function(t,e){if(t.length!==e.length)return!1;for(let i=0,r=t.length;i<r;i++)if(t[i]!==e[i])return!1;return!0}(a,r))return;a.set?a.set(r):function(t,e){for(let i=0,r=t.length;i<r;i++)t[i]=e[i]}(a,r),t.renderer.state.uniformLocations.set(i,a)}else{if(a===r)return;t.renderer.state.uniformLocations.set(i,r)}switch(e){case 5126:return r.length?t.uniform1fv(i,r):t.uniform1f(i,r);case 35664:return t.uniform2fv(i,r);case 35665:return t.uniform3fv(i,r);case 35666:return t.uniform4fv(i,r);case 35670:case 5124:case 35678:case 35680:return r.length?t.uniform1iv(i,r):t.uniform1i(i,r);case 35671:case 35667:return t.uniform2iv(i,r);case 35672:case 35668:return t.uniform3iv(i,r);case 35673:case 35669:return t.uniform4iv(i,r);case 35674:return t.uniformMatrix2fv(i,!1,r);case 35675:return t.uniformMatrix3fv(i,!1,r);case 35676:return t.uniformMatrix4fv(i,!1,r)}}function h(t){let e=t.split("\n");for(let t=0;t<e.length;t++)e[t]=t+1+": "+e[t];return e.join("\n")}let o=0;function l(t){o>100||(console.warn(t),o++,o>100&&console.warn("More than 100 program warnings - stopping logs."))}},"./node_modules/ogl/src/core/Texture.js":(t,e,i)=>{i.r(e),i.d(e,{Texture:()=>n});const r=new Uint8Array(4);function s(t){return 0==(t&t-1)}let a=1;class n{constructor(t,{image:e,target:i=t.TEXTURE_2D,type:r=t.UNSIGNED_BYTE,format:s=t.RGBA,internalFormat:n=s,wrapS:h=t.CLAMP_TO_EDGE,wrapT:o=t.CLAMP_TO_EDGE,generateMipmaps:l=!0,minFilter:u=(l?t.NEAREST_MIPMAP_LINEAR:t.LINEAR),magFilter:d=t.LINEAR,premultiplyAlpha:g=!1,unpackAlignment:m=4,flipY:c=i==t.TEXTURE_2D,anisotropy:f=0,level:p=0,width:b,height:A=b}={}){this.gl=t,this.id=a++,this.image=e,this.target=i,this.type=r,this.format=s,this.internalFormat=n,this.minFilter=u,this.magFilter=d,this.wrapS=h,this.wrapT=o,this.generateMipmaps=l,this.premultiplyAlpha=g,this.unpackAlignment=m,this.flipY=c,this.anisotropy=Math.min(f,this.gl.renderer.parameters.maxAnisotropy),this.level=p,this.width=b,this.height=A,this.texture=this.gl.createTexture(),this.store={image:null},this.glState=this.gl.renderer.state,this.state={},this.state.minFilter=this.gl.NEAREST_MIPMAP_LINEAR,this.state.magFilter=this.gl.LINEAR,this.state.wrapS=this.gl.REPEAT,this.state.wrapT=this.gl.REPEAT,this.state.anisotropy=0}bind(){this.glState.textureUnits[this.glState.activeTextureUnit]!==this.id&&(this.gl.bindTexture(this.target,this.texture),this.glState.textureUnits[this.glState.activeTextureUnit]=this.id)}update(t=0){const e=!(this.image===this.store.image&&!this.needsUpdate);if((e||this.glState.textureUnits[t]!==this.id)&&(this.gl.renderer.activeTexture(t),this.bind()),e){if(this.needsUpdate=!1,this.flipY!==this.glState.flipY&&(this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,this.flipY),this.glState.flipY=this.flipY),this.premultiplyAlpha!==this.glState.premultiplyAlpha&&(this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this.premultiplyAlpha),this.glState.premultiplyAlpha=this.premultiplyAlpha),this.unpackAlignment!==this.glState.unpackAlignment&&(this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT,this.unpackAlignment),this.glState.unpackAlignment=this.unpackAlignment),this.minFilter!==this.state.minFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MIN_FILTER,this.minFilter),this.state.minFilter=this.minFilter),this.magFilter!==this.state.magFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MAG_FILTER,this.magFilter),this.state.magFilter=this.magFilter),this.wrapS!==this.state.wrapS&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_S,this.wrapS),this.state.wrapS=this.wrapS),this.wrapT!==this.state.wrapT&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_T,this.wrapT),this.state.wrapT=this.wrapT),this.anisotropy&&this.anisotropy!==this.state.anisotropy&&(this.gl.texParameterf(this.target,this.gl.renderer.getExtension("EXT_texture_filter_anisotropic").TEXTURE_MAX_ANISOTROPY_EXT,this.anisotropy),this.state.anisotropy=this.anisotropy),this.image){if(this.image.width&&(this.width=this.image.width,this.height=this.image.height),this.target===this.gl.TEXTURE_CUBE_MAP)for(let t=0;t<6;t++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+t,this.level,this.internalFormat,this.format,this.type,this.image[t]);else if(ArrayBuffer.isView(this.image))this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,this.image);else if(this.image.isCompressedTexture)for(let t=0;t<this.image.length;t++)this.gl.compressedTexImage2D(this.target,t,this.internalFormat,this.image[t].width,this.image[t].height,0,this.image[t].data);else this.gl.texImage2D(this.target,this.level,this.internalFormat,this.format,this.type,this.image);this.generateMipmaps&&(this.gl.renderer.isWebgl2||s(this.image.width)&&s(this.image.height)?this.gl.generateMipmap(this.target):(this.generateMipmaps=!1,this.wrapS=this.wrapT=this.gl.CLAMP_TO_EDGE,this.minFilter=this.gl.LINEAR)),this.onUpdate&&this.onUpdate()}else if(this.target===this.gl.TEXTURE_CUBE_MAP)for(let t=0;t<6;t++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,r);else this.width?this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,null):this.gl.texImage2D(this.target,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,r);this.store.image=this.image}}}},"./node_modules/ogl/src/extras/Plane.js":(t,e,i)=>{i.r(e),i.d(e,{Plane:()=>s});var r=i("./node_modules/ogl/src/core/Geometry.js");class s extends r.Geometry{constructor(t,{width:e=1,height:i=1,widthSegments:r=1,heightSegments:a=1,attributes:n={}}={}){const h=r,o=a,l=(h+1)*(o+1),u=h*o*6,d=new Float32Array(3*l),g=new Float32Array(3*l),m=new Float32Array(2*l),c=u>65536?new Uint32Array(u):new Uint16Array(u);s.buildPlane(d,g,m,c,e,i,0,h,o),Object.assign(n,{position:{size:3,data:d},normal:{size:3,data:g},uv:{size:2,data:m},index:{data:c}}),super(t,n)}static buildPlane(t,e,i,r,s,a,n,h,o,l=0,u=1,d=2,g=1,m=-1,c=0,f=0){const p=c,b=s/h,A=a/o;for(let x=0;x<=o;x++){let E=x*A-a/2;for(let a=0;a<=h;a++,c++){let A=a*b-s/2;if(t[3*c+l]=A*g,t[3*c+u]=E*m,t[3*c+d]=n/2,e[3*c+l]=0,e[3*c+u]=0,e[3*c+d]=n>=0?1:-1,i[2*c]=a/h,i[2*c+1]=1-x/o,x===o||a===h)continue;let w=p+a+x*(h+1),v=p+a+(x+1)*(h+1),y=p+a+(x+1)*(h+1)+1,_=p+a+x*(h+1)+1;r[6*f]=w,r[6*f+1]=v,r[6*f+2]=_,r[6*f+3]=v,r[6*f+4]=y,r[6*f+5]=_,f++}}}}},"./node_modules/ogl/src/math/Mat3.js":(t,e,i)=>{i.r(e),i.d(e,{Mat3:()=>s});var r=i("./node_modules/ogl/src/math/functions/Mat3Func.js");class s extends Array{constructor(t=1,e=0,i=0,r=0,s=1,a=0,n=0,h=0,o=1){return super(t,e,i,r,s,a,n,h,o),this}set(t,e,i,s,a,n,h,o,l){return t.length?this.copy(t):(r.set(this,t,e,i,s,a,n,h,o,l),this)}translate(t,e=this){return r.translate(this,e,t),this}rotate(t,e=this){return r.rotate(this,e,t),this}scale(t,e=this){return r.scale(this,e,t),this}multiply(t,e){return e?r.multiply(this,t,e):r.multiply(this,this,t),this}identity(){return r.identity(this),this}copy(t){return r.copy(this,t),this}fromMatrix4(t){return r.fromMat4(this,t),this}fromQuaternion(t){return r.fromQuat(this,t),this}fromBasis(t,e,i){return this.set(t[0],t[1],t[2],e[0],e[1],e[2],i[0],i[1],i[2]),this}inverse(t=this){return r.invert(this,t),this}getNormalMatrix(t){return r.normalFromMat4(this,t),this}}},"./node_modules/ogl/src/math/functions/Mat3Func.js":(t,e,i)=>{i.r(e),i.d(e,{add:()=>b,copy:()=>a,determinant:()=>u,fromMat4:()=>r,fromQuat:()=>s,identity:()=>h,invert:()=>l,multiply:()=>d,multiplyScalar:()=>x,normalFromMat4:()=>f,projection:()=>p,rotate:()=>m,scale:()=>c,set:()=>n,subtract:()=>A,translate:()=>g,transpose:()=>o});function r(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[4],t[4]=e[5],t[5]=e[6],t[6]=e[8],t[7]=e[9],t[8]=e[10],t}function s(t,e){let i=e[0],r=e[1],s=e[2],a=e[3],n=i+i,h=r+r,o=s+s,l=i*n,u=r*n,d=r*h,g=s*n,m=s*h,c=s*o,f=a*n,p=a*h,b=a*o;return t[0]=1-d-c,t[3]=u-b,t[6]=g+p,t[1]=u+b,t[4]=1-l-c,t[7]=m-f,t[2]=g-p,t[5]=m+f,t[8]=1-l-d,t}function a(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function n(t,e,i,r,s,a,n,h,o,l){return t[0]=e,t[1]=i,t[2]=r,t[3]=s,t[4]=a,t[5]=n,t[6]=h,t[7]=o,t[8]=l,t}function h(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function o(t,e){if(t===e){let i=e[1],r=e[2],s=e[5];t[1]=e[3],t[2]=e[6],t[3]=i,t[5]=e[7],t[6]=r,t[7]=s}else t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8];return t}function l(t,e){let i=e[0],r=e[1],s=e[2],a=e[3],n=e[4],h=e[5],o=e[6],l=e[7],u=e[8],d=u*n-h*l,g=-u*a+h*o,m=l*a-n*o,c=i*d+r*g+s*m;return c?(c=1/c,t[0]=d*c,t[1]=(-u*r+s*l)*c,t[2]=(h*r-s*n)*c,t[3]=g*c,t[4]=(u*i-s*o)*c,t[5]=(-h*i+s*a)*c,t[6]=m*c,t[7]=(-l*i+r*o)*c,t[8]=(n*i-r*a)*c,t):null}function u(t){let e=t[0],i=t[1],r=t[2],s=t[3],a=t[4],n=t[5],h=t[6],o=t[7],l=t[8];return e*(l*a-n*o)+i*(-l*s+n*h)+r*(o*s-a*h)}function d(t,e,i){let r=e[0],s=e[1],a=e[2],n=e[3],h=e[4],o=e[5],l=e[6],u=e[7],d=e[8],g=i[0],m=i[1],c=i[2],f=i[3],p=i[4],b=i[5],A=i[6],x=i[7],E=i[8];return t[0]=g*r+m*n+c*l,t[1]=g*s+m*h+c*u,t[2]=g*a+m*o+c*d,t[3]=f*r+p*n+b*l,t[4]=f*s+p*h+b*u,t[5]=f*a+p*o+b*d,t[6]=A*r+x*n+E*l,t[7]=A*s+x*h+E*u,t[8]=A*a+x*o+E*d,t}function g(t,e,i){let r=e[0],s=e[1],a=e[2],n=e[3],h=e[4],o=e[5],l=e[6],u=e[7],d=e[8],g=i[0],m=i[1];return t[0]=r,t[1]=s,t[2]=a,t[3]=n,t[4]=h,t[5]=o,t[6]=g*r+m*n+l,t[7]=g*s+m*h+u,t[8]=g*a+m*o+d,t}function m(t,e,i){let r=e[0],s=e[1],a=e[2],n=e[3],h=e[4],o=e[5],l=e[6],u=e[7],d=e[8],g=Math.sin(i),m=Math.cos(i);return t[0]=m*r+g*n,t[1]=m*s+g*h,t[2]=m*a+g*o,t[3]=m*n-g*r,t[4]=m*h-g*s,t[5]=m*o-g*a,t[6]=l,t[7]=u,t[8]=d,t}function c(t,e,i){let r=i[0],s=i[1];return t[0]=r*e[0],t[1]=r*e[1],t[2]=r*e[2],t[3]=s*e[3],t[4]=s*e[4],t[5]=s*e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function f(t,e){let i=e[0],r=e[1],s=e[2],a=e[3],n=e[4],h=e[5],o=e[6],l=e[7],u=e[8],d=e[9],g=e[10],m=e[11],c=e[12],f=e[13],p=e[14],b=e[15],A=i*h-r*n,x=i*o-s*n,E=i*l-a*n,w=r*o-s*h,v=r*l-a*h,y=s*l-a*o,_=u*f-d*c,M=u*p-g*c,T=u*b-m*c,F=d*p-g*f,S=d*b-m*f,R=g*b-m*p,P=A*R-x*S+E*F+w*T-v*M+y*_;return P?(P=1/P,t[0]=(h*R-o*S+l*F)*P,t[1]=(o*T-n*R-l*M)*P,t[2]=(n*S-h*T+l*_)*P,t[3]=(s*S-r*R-a*F)*P,t[4]=(i*R-s*T+a*M)*P,t[5]=(r*T-i*S-a*_)*P,t[6]=(f*y-p*v+b*w)*P,t[7]=(p*E-c*y-b*x)*P,t[8]=(c*v-f*E+b*A)*P,t):null}function p(t,e,i){return t[0]=2/e,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/i,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t}function b(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t[2]=e[2]+i[2],t[3]=e[3]+i[3],t[4]=e[4]+i[4],t[5]=e[5]+i[5],t[6]=e[6]+i[6],t[7]=e[7]+i[7],t[8]=e[8]+i[8],t}function A(t,e,i){return t[0]=e[0]-i[0],t[1]=e[1]-i[1],t[2]=e[2]-i[2],t[3]=e[3]-i[3],t[4]=e[4]-i[4],t[5]=e[5]-i[5],t[6]=e[6]-i[6],t[7]=e[7]-i[7],t[8]=e[8]-i[8],t}function x(t,e,i){return t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t[3]=e[3]*i,t[4]=e[4]*i,t[5]=e[5]*i,t[6]=e[6]*i,t[7]=e[7]*i,t[8]=e[8]*i,t}}},(function(t){t.h=()=>"4b399d2190af506ff61d"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,