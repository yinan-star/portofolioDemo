/*! For license information please see main.9f7ca71362c4ffed48ae.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatefloema("main",{"./app/components/Canvas/home/Media.js":(t,e,i)=>{i.r(e),i.d(e,{default:()=>l});var r=i("./node_modules/ogl/src/core/Texture.js"),s=i("./node_modules/ogl/src/core/Program.js"),a=i("./node_modules/ogl/src/core/Mesh.js"),n=i("./app/shaders/plane-fragment.glsl"),h=i("./app/shaders/plane-vertex.glsl");class l{constructor({element:t,geometry:e,gl:i,index:r,scene:s,sizes:a}){this.element=t,this.gl=i,this.geometry=e,this.scene=s,this.index=r,this.sizes=a,this.createTexture(),this.createProgram(),this.createMesh()}createTexture(){this.texture=new r.Texture(this.gl),console.log(this.element),this.image=new window.Image,this.image.src=this.element.getAttribute("data-src"),this.image.onload=t=>this.texture.image=this.image,console.log(this,this.element)}createProgram(){this.program=new s.Program(this.gl,{fragment:n.default,vertex:h.default,uniforms:{tMap:{value:this.texture}}})}createMesh(){this.mesh=new a.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene)}}},"./app/components/Canvas/home/index.js":(t,e,i)=>{i.r(e),i.d(e,{default:()=>l});var r=i("./node_modules/ogl/src/core/Transform.js"),s=i("./node_modules/ogl/src/extras/Plane.js"),a=i("./node_modules/lodash/map.js"),n=i.n(a),h=i("./app/components/Canvas/home/Media.js");const l=class{constructor(t,e,i){this.gl=t,this.scene=e,this.group=new r.Transform,this.mediasElements=document.querySelectorAll(".home__gallery__media__image"),this.createGeometry(),this.createGallery(),this.group.setParent(this.scene)}createGeometry(){this.geometry=new s.Plane(this.gl,{heightSegments:20,widthSegments:20})}createGallery(){this.medias=n()(this.mediasElements,((t,e)=>new h.default({element:t,gl:this.gl,geometry:this.geometry,index:e,scene:this.group})))}}},"./node_modules/ogl/src/core/Mesh.js":(t,e,i)=>{i.r(e),i.d(e,{Mesh:()=>h});var r=i("./node_modules/ogl/src/core/Transform.js"),s=i("./node_modules/ogl/src/math/Mat3.js"),a=i("./node_modules/ogl/src/math/Mat4.js");let n=0;class h extends r.Transform{constructor(t,{geometry:e,program:i,mode:r=t.TRIANGLES,frustumCulled:h=!0,renderOrder:l=0}={}){super(),t.canvas||console.error("gl not passed as first argument to Mesh"),this.gl=t,this.id=n++,this.geometry=e,this.program=i,this.mode=r,this.frustumCulled=h,this.renderOrder=l,this.modelViewMatrix=new a.Mat4,this.normalMatrix=new s.Mat3,this.beforeRenderCallbacks=[],this.afterRenderCallbacks=[]}onBeforeRender(t){return this.beforeRenderCallbacks.push(t),this}onAfterRender(t){return this.afterRenderCallbacks.push(t),this}draw({camera:t}={}){t&&(this.program.uniforms.modelMatrix||Object.assign(this.program.uniforms,{modelMatrix:{value:null},viewMatrix:{value:null},modelViewMatrix:{value:null},normalMatrix:{value:null},projectionMatrix:{value:null},cameraPosition:{value:null}}),this.program.uniforms.projectionMatrix.value=t.projectionMatrix,this.program.uniforms.cameraPosition.value=t.worldPosition,this.program.uniforms.viewMatrix.value=t.viewMatrix,this.modelViewMatrix.multiply(t.viewMatrix,this.worldMatrix),this.normalMatrix.getNormalMatrix(this.modelViewMatrix),this.program.uniforms.modelMatrix.value=this.worldMatrix,this.program.uniforms.modelViewMatrix.value=this.modelViewMatrix,this.program.uniforms.normalMatrix.value=this.normalMatrix),this.beforeRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t})));let e=this.program.cullFace&&this.worldMatrix.determinant()<0;this.program.use({flipFaces:e}),this.geometry.draw({mode:this.mode,program:this.program}),this.afterRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t})))}}},"./node_modules/ogl/src/core/Program.js":(t,e,i)=>{i.r(e),i.d(e,{Program:()=>a});let r=1;const s={};class a{constructor(t,{vertex:e,fragment:i,uniforms:s={},transparent:a=!1,cullFace:n=t.BACK,frontFace:l=t.CCW,depthTest:o=!0,depthWrite:m=!0,depthFunc:g=t.LESS}={}){t.canvas||console.error("gl not passed as first argument to Program"),this.gl=t,this.uniforms=s,this.id=r++,e||console.warn("vertex shader not supplied"),i||console.warn("fragment shader not supplied"),this.transparent=a,this.cullFace=n,this.frontFace=l,this.depthTest=o,this.depthWrite=m,this.depthFunc=g,this.blendFunc={},this.blendEquation={},this.transparent&&!this.blendFunc.src&&(this.gl.renderer.premultipliedAlpha?this.setBlendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA):this.setBlendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA));const u=t.createShader(t.VERTEX_SHADER);t.shaderSource(u,e),t.compileShader(u),""!==t.getShaderInfoLog(u)&&console.warn(`${t.getShaderInfoLog(u)}\nVertex Shader\n${h(e)}`);const c=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(c,i),t.compileShader(c),""!==t.getShaderInfoLog(c)&&console.warn(`${t.getShaderInfoLog(c)}\nFragment Shader\n${h(i)}`),this.program=t.createProgram(),t.attachShader(this.program,u),t.attachShader(this.program,c),t.linkProgram(this.program),!t.getProgramParameter(this.program,t.LINK_STATUS))return console.warn(t.getProgramInfoLog(this.program));t.deleteShader(u),t.deleteShader(c),this.uniformLocations=new Map;let d=t.getProgramParameter(this.program,t.ACTIVE_UNIFORMS);for(let e=0;e<d;e++){let i=t.getActiveUniform(this.program,e);this.uniformLocations.set(i,t.getUniformLocation(this.program,i.name));const r=i.name.match(/(\w+)/g);i.uniformName=r[0],i.nameComponents=r.slice(1)}this.attributeLocations=new Map;const p=[],f=t.getProgramParameter(this.program,t.ACTIVE_ATTRIBUTES);for(let e=0;e<f;e++){const i=t.getActiveAttrib(this.program,e),r=t.getAttribLocation(this.program,i.name);-1!==r&&(p[r]=i.name,this.attributeLocations.set(i,r))}this.attributeOrder=p.join("")}setBlendFunc(t,e,i,r){this.blendFunc.src=t,this.blendFunc.dst=e,this.blendFunc.srcAlpha=i,this.blendFunc.dstAlpha=r,t&&(this.transparent=!0)}setBlendEquation(t,e){this.blendEquation.modeRGB=t,this.blendEquation.modeAlpha=e}applyState(){this.depthTest?this.gl.renderer.enable(this.gl.DEPTH_TEST):this.gl.renderer.disable(this.gl.DEPTH_TEST),this.cullFace?this.gl.renderer.enable(this.gl.CULL_FACE):this.gl.renderer.disable(this.gl.CULL_FACE),this.blendFunc.src?this.gl.renderer.enable(this.gl.BLEND):this.gl.renderer.disable(this.gl.BLEND),this.cullFace&&this.gl.renderer.setCullFace(this.cullFace),this.gl.renderer.setFrontFace(this.frontFace),this.gl.renderer.setDepthMask(this.depthWrite),this.gl.renderer.setDepthFunc(this.depthFunc),this.blendFunc.src&&this.gl.renderer.setBlendFunc(this.blendFunc.src,this.blendFunc.dst,this.blendFunc.srcAlpha,this.blendFunc.dstAlpha),this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB,this.blendEquation.modeAlpha)}use({flipFaces:t=!1}={}){let e=-1;this.gl.renderer.state.currentProgram===this.id||(this.gl.useProgram(this.program),this.gl.renderer.state.currentProgram=this.id),this.uniformLocations.forEach(((t,i)=>{let r=this.uniforms[i.uniformName];for(const t of i.nameComponents){if(!r)break;if(!(t in r)){if(Array.isArray(r.value))break;r=void 0;break}r=r[t]}if(!r)return o(`Active uniform ${i.name} has not been supplied`);if(r&&void 0===r.value)return o(`${i.name} uniform is missing a value parameter`);if(r.value.texture)return e+=1,r.value.update(e),n(this.gl,i.type,t,e);if(r.value.length&&r.value[0].texture){const s=[];return r.value.forEach((t=>{e+=1,t.update(e),s.push(e)})),n(this.gl,i.type,t,s)}n(this.gl,i.type,t,r.value)})),this.applyState(),t&&this.gl.renderer.setFrontFace(this.frontFace===this.gl.CCW?this.gl.CW:this.gl.CCW)}remove(){this.gl.deleteProgram(this.program)}}function n(t,e,i,r){r=r.length?function(t){const e=t.length,i=t[0].length;if(void 0===i)return t;const r=e*i;let a=s[r];a||(s[r]=a=new Float32Array(r));for(let r=0;r<e;r++)a.set(t[r],r*i);return a}(r):r;const a=t.renderer.state.uniformLocations.get(i);if(r.length)if(void 0===a||a.length!==r.length)t.renderer.state.uniformLocations.set(i,r.slice(0));else{if(function(t,e){if(t.length!==e.length)return!1;for(let i=0,r=t.length;i<r;i++)if(t[i]!==e[i])return!1;return!0}(a,r))return;a.set?a.set(r):function(t,e){for(let i=0,r=t.length;i<r;i++)t[i]=e[i]}(a,r),t.renderer.state.uniformLocations.set(i,a)}else{if(a===r)return;t.renderer.state.uniformLocations.set(i,r)}switch(e){case 5126:return r.length?t.uniform1fv(i,r):t.uniform1f(i,r);case 35664:return t.uniform2fv(i,r);case 35665:return t.uniform3fv(i,r);case 35666:return t.uniform4fv(i,r);case 35670:case 5124:case 35678:case 35680:return r.length?t.uniform1iv(i,r):t.uniform1i(i,r);case 35671:case 35667:return t.uniform2iv(i,r);case 35672:case 35668:return t.uniform3iv(i,r);case 35673:case 35669:return t.uniform4iv(i,r);case 35674:return t.uniformMatrix2fv(i,!1,r);case 35675:return t.uniformMatrix3fv(i,!1,r);case 35676:return t.uniformMatrix4fv(i,!1,r)}}function h(t){let e=t.split("\n");for(let t=0;t<e.length;t++)e[t]=t+1+": "+e[t];return e.join("\n")}let l=0;function o(t){l>100||(console.warn(t),l++,l>100&&console.warn("More than 100 program warnings - stopping logs."))}},"./node_modules/ogl/src/core/Texture.js":(t,e,i)=>{i.r(e),i.d(e,{Texture:()=>n});const r=new Uint8Array(4);function s(t){return 0==(t&t-1)}let a=1;class n{constructor(t,{image:e,target:i=t.TEXTURE_2D,type:r=t.UNSIGNED_BYTE,format:s=t.RGBA,internalFormat:n=s,wrapS:h=t.CLAMP_TO_EDGE,wrapT:l=t.CLAMP_TO_EDGE,generateMipmaps:o=!0,minFilter:m=(o?t.NEAREST_MIPMAP_LINEAR:t.LINEAR),magFilter:g=t.LINEAR,premultiplyAlpha:u=!1,unpackAlignment:c=4,flipY:d=i==t.TEXTURE_2D,anisotropy:p=0,level:f=0,width:E,height:A=E}={}){this.gl=t,this.id=a++,this.image=e,this.target=i,this.type=r,this.format=s,this.internalFormat=n,this.minFilter=m,this.magFilter=g,this.wrapS=h,this.wrapT=l,this.generateMipmaps=o,this.premultiplyAlpha=u,this.unpackAlignment=c,this.flipY=d,this.anisotropy=Math.min(p,this.gl.renderer.parameters.maxAnisotropy),this.level=f,this.width=E,this.height=A,this.texture=this.gl.createTexture(),this.store={image:null},this.glState=this.gl.renderer.state,this.state={},this.state.minFilter=this.gl.NEAREST_MIPMAP_LINEAR,this.state.magFilter=this.gl.LINEAR,this.state.wrapS=this.gl.REPEAT,this.state.wrapT=this.gl.REPEAT,this.state.anisotropy=0}bind(){this.glState.textureUnits[this.glState.activeTextureUnit]!==this.id&&(this.gl.bindTexture(this.target,this.texture),this.glState.textureUnits[this.glState.activeTextureUnit]=this.id)}update(t=0){const e=!(this.image===this.store.image&&!this.needsUpdate);if((e||this.glState.textureUnits[t]!==this.id)&&(this.gl.renderer.activeTexture(t),this.bind()),e){if(this.needsUpdate=!1,this.flipY!==this.glState.flipY&&(this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,this.flipY),this.glState.flipY=this.flipY),this.premultiplyAlpha!==this.glState.premultiplyAlpha&&(this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this.premultiplyAlpha),this.glState.premultiplyAlpha=this.premultiplyAlpha),this.unpackAlignment!==this.glState.unpackAlignment&&(this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT,this.unpackAlignment),this.glState.unpackAlignment=this.unpackAlignment),this.minFilter!==this.state.minFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MIN_FILTER,this.minFilter),this.state.minFilter=this.minFilter),this.magFilter!==this.state.magFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MAG_FILTER,this.magFilter),this.state.magFilter=this.magFilter),this.wrapS!==this.state.wrapS&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_S,this.wrapS),this.state.wrapS=this.wrapS),this.wrapT!==this.state.wrapT&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_T,this.wrapT),this.state.wrapT=this.wrapT),this.anisotropy&&this.anisotropy!==this.state.anisotropy&&(this.gl.texParameterf(this.target,this.gl.renderer.getExtension("EXT_texture_filter_anisotropic").TEXTURE_MAX_ANISOTROPY_EXT,this.anisotropy),this.state.anisotropy=this.anisotropy),this.image){if(this.image.width&&(this.width=this.image.width,this.height=this.image.height),this.target===this.gl.TEXTURE_CUBE_MAP)for(let t=0;t<6;t++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+t,this.level,this.internalFormat,this.format,this.type,this.image[t]);else if(ArrayBuffer.isView(this.image))this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,this.image);else if(this.image.isCompressedTexture)for(let t=0;t<this.image.length;t++)this.gl.compressedTexImage2D(this.target,t,this.internalFormat,this.image[t].width,this.image[t].height,0,this.image[t].data);else this.gl.texImage2D(this.target,this.level,this.internalFormat,this.format,this.type,this.image);this.generateMipmaps&&(this.gl.renderer.isWebgl2||s(this.image.width)&&s(this.image.height)?this.gl.generateMipmap(this.target):(this.generateMipmaps=!1,this.wrapS=this.wrapT=this.gl.CLAMP_TO_EDGE,this.minFilter=this.gl.LINEAR)),this.onUpdate&&this.onUpdate()}else if(this.target===this.gl.TEXTURE_CUBE_MAP)for(let t=0;t<6;t++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,r);else this.width?this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,null):this.gl.texImage2D(this.target,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,r);this.store.image=this.image}}}},"./node_modules/ogl/src/math/Mat3.js":(t,e,i)=>{i.r(e),i.d(e,{Mat3:()=>s});var r=i("./node_modules/ogl/src/math/functions/Mat3Func.js");class s extends Array{constructor(t=1,e=0,i=0,r=0,s=1,a=0,n=0,h=0,l=1){return super(t,e,i,r,s,a,n,h,l),this}set(t,e,i,s,a,n,h,l,o){return t.length?this.copy(t):(r.set(this,t,e,i,s,a,n,h,l,o),this)}translate(t,e=this){return r.translate(this,e,t),this}rotate(t,e=this){return r.rotate(this,e,t),this}scale(t,e=this){return r.scale(this,e,t),this}multiply(t,e){return e?r.multiply(this,t,e):r.multiply(this,this,t),this}identity(){return r.identity(this),this}copy(t){return r.copy(this,t),this}fromMatrix4(t){return r.fromMat4(this,t),this}fromQuaternion(t){return r.fromQuat(this,t),this}fromBasis(t,e,i){return this.set(t[0],t[1],t[2],e[0],e[1],e[2],i[0],i[1],i[2]),this}inverse(t=this){return r.invert(this,t),this}getNormalMatrix(t){return r.normalFromMat4(this,t),this}}},"./node_modules/ogl/src/math/functions/Mat3Func.js":(t,e,i)=>{i.r(e),i.d(e,{add:()=>E,copy:()=>a,determinant:()=>m,fromMat4:()=>r,fromQuat:()=>s,identity:()=>h,invert:()=>o,multiply:()=>g,multiplyScalar:()=>T,normalFromMat4:()=>p,projection:()=>f,rotate:()=>c,scale:()=>d,set:()=>n,subtract:()=>A,translate:()=>u,transpose:()=>l});function r(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[4],t[4]=e[5],t[5]=e[6],t[6]=e[8],t[7]=e[9],t[8]=e[10],t}function s(t,e){let i=e[0],r=e[1],s=e[2],a=e[3],n=i+i,h=r+r,l=s+s,o=i*n,m=r*n,g=r*h,u=s*n,c=s*h,d=s*l,p=a*n,f=a*h,E=a*l;return t[0]=1-g-d,t[3]=m-E,t[6]=u+f,t[1]=m+E,t[4]=1-o-d,t[7]=c-p,t[2]=u-f,t[5]=c+p,t[8]=1-o-g,t}function a(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function n(t,e,i,r,s,a,n,h,l,o){return t[0]=e,t[1]=i,t[2]=r,t[3]=s,t[4]=a,t[5]=n,t[6]=h,t[7]=l,t[8]=o,t}function h(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function l(t,e){if(t===e){let i=e[1],r=e[2],s=e[5];t[1]=e[3],t[2]=e[6],t[3]=i,t[5]=e[7],t[6]=r,t[7]=s}else t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8];return t}function o(t,e){let i=e[0],r=e[1],s=e[2],a=e[3],n=e[4],h=e[5],l=e[6],o=e[7],m=e[8],g=m*n-h*o,u=-m*a+h*l,c=o*a-n*l,d=i*g+r*u+s*c;return d?(d=1/d,t[0]=g*d,t[1]=(-m*r+s*o)*d,t[2]=(h*r-s*n)*d,t[3]=u*d,t[4]=(m*i-s*l)*d,t[5]=(-h*i+s*a)*d,t[6]=c*d,t[7]=(-o*i+r*l)*d,t[8]=(n*i-r*a)*d,t):null}function m(t){let e=t[0],i=t[1],r=t[2],s=t[3],a=t[4],n=t[5],h=t[6],l=t[7],o=t[8];return e*(o*a-n*l)+i*(-o*s+n*h)+r*(l*s-a*h)}function g(t,e,i){let r=e[0],s=e[1],a=e[2],n=e[3],h=e[4],l=e[5],o=e[6],m=e[7],g=e[8],u=i[0],c=i[1],d=i[2],p=i[3],f=i[4],E=i[5],A=i[6],T=i[7],_=i[8];return t[0]=u*r+c*n+d*o,t[1]=u*s+c*h+d*m,t[2]=u*a+c*l+d*g,t[3]=p*r+f*n+E*o,t[4]=p*s+f*h+E*m,t[5]=p*a+f*l+E*g,t[6]=A*r+T*n+_*o,t[7]=A*s+T*h+_*m,t[8]=A*a+T*l+_*g,t}function u(t,e,i){let r=e[0],s=e[1],a=e[2],n=e[3],h=e[4],l=e[5],o=e[6],m=e[7],g=e[8],u=i[0],c=i[1];return t[0]=r,t[1]=s,t[2]=a,t[3]=n,t[4]=h,t[5]=l,t[6]=u*r+c*n+o,t[7]=u*s+c*h+m,t[8]=u*a+c*l+g,t}function c(t,e,i){let r=e[0],s=e[1],a=e[2],n=e[3],h=e[4],l=e[5],o=e[6],m=e[7],g=e[8],u=Math.sin(i),c=Math.cos(i);return t[0]=c*r+u*n,t[1]=c*s+u*h,t[2]=c*a+u*l,t[3]=c*n-u*r,t[4]=c*h-u*s,t[5]=c*l-u*a,t[6]=o,t[7]=m,t[8]=g,t}function d(t,e,i){let r=i[0],s=i[1];return t[0]=r*e[0],t[1]=r*e[1],t[2]=r*e[2],t[3]=s*e[3],t[4]=s*e[4],t[5]=s*e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function p(t,e){let i=e[0],r=e[1],s=e[2],a=e[3],n=e[4],h=e[5],l=e[6],o=e[7],m=e[8],g=e[9],u=e[10],c=e[11],d=e[12],p=e[13],f=e[14],E=e[15],A=i*h-r*n,T=i*l-s*n,_=i*o-a*n,M=r*l-s*h,x=r*o-a*h,F=s*o-a*l,w=m*p-g*d,S=m*f-u*d,v=m*E-c*d,y=g*f-u*p,P=g*E-c*p,R=u*E-c*f,b=A*R-T*P+_*y+M*v-x*S+F*w;return b?(b=1/b,t[0]=(h*R-l*P+o*y)*b,t[1]=(l*v-n*R-o*S)*b,t[2]=(n*P-h*v+o*w)*b,t[3]=(s*P-r*R-a*y)*b,t[4]=(i*R-s*v+a*S)*b,t[5]=(r*v-i*P-a*w)*b,t[6]=(p*F-f*x+E*M)*b,t[7]=(f*_-d*F-E*T)*b,t[8]=(d*x-p*_+E*A)*b,t):null}function f(t,e,i){return t[0]=2/e,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/i,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t}function E(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t[2]=e[2]+i[2],t[3]=e[3]+i[3],t[4]=e[4]+i[4],t[5]=e[5]+i[5],t[6]=e[6]+i[6],t[7]=e[7]+i[7],t[8]=e[8]+i[8],t}function A(t,e,i){return t[0]=e[0]-i[0],t[1]=e[1]-i[1],t[2]=e[2]-i[2],t[3]=e[3]-i[3],t[4]=e[4]-i[4],t[5]=e[5]-i[5],t[6]=e[6]-i[6],t[7]=e[7]-i[7],t[8]=e[8]-i[8],t}function T(t,e,i){return t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t[3]=e[3]*i,t[4]=e[4]*i,t[5]=e[5]*i,t[6]=e[6]*i,t[7]=e[7]*i,t[8]=e[8]*i,t}}},(function(t){t.h=()=>"7f137d03f89534831c0a"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,